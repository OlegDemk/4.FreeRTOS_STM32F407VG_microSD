
4.FreeRTOS_STM32F407VG_microSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000108c  080180c8  080180c8  000280c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019154  08019154  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  08019154  08019154  00029154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801915c  0801915c  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801915c  0801915c  0002915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019160  08019160  00029160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  08019164  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003036c  2**0
                  CONTENTS
 10 .bss          00014834  20000370  20000370  00030370  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20014ba4  20014ba4  00030370  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a893  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000715f  00000000  00000000  0006ac2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002598  00000000  00000000  00071d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002308  00000000  00000000  00074328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb28  00000000  00000000  00076630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034b76  00000000  00000000  000a2158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e640a  00000000  00000000  000d6cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bd0d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b044  00000000  00000000  001bd12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080180ac 	.word	0x080180ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	080180ac 	.word	0x080180ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <bme280_init>:
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	2305      	movs	r3, #5
 8000f4a:	73bb      	strb	r3, [r7, #14]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	737b      	strb	r3, [r7, #13]
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 f9ef 	bl	8002334 <null_ptr_check>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d133      	bne.n	8000fca <bme280_init+0x8a>
 8000f62:	e028      	b.n	8000fb6 <bme280_init+0x76>
 8000f64:	f107 010d 	add.w	r1, r7, #13
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	20d0      	movs	r0, #208	; 0xd0
 8000f6e:	f000 f832 	bl	8000fd6 <bme280_get_regs>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d114      	bne.n	8000fa8 <bme280_init+0x68>
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	2b60      	cmp	r3, #96	; 0x60
 8000f82:	d111      	bne.n	8000fa8 <bme280_init+0x68>
 8000f84:	7b7a      	ldrb	r2, [r7, #13]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f976 	bl	800127c <bme280_soft_reset>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d110      	bne.n	8000fbe <bme280_init+0x7e>
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f001 f83f 	bl	8002020 <get_calib_data>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e00a      	b.n	8000fbe <bme280_init+0x7e>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2001      	movs	r0, #1
 8000fae:	4798      	blx	r3
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1d3      	bne.n	8000f64 <bme280_init+0x24>
 8000fbc:	e000      	b.n	8000fc0 <bme280_init+0x80>
 8000fbe:	bf00      	nop
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <bme280_init+0x8a>
 8000fc6:	23fe      	movs	r3, #254	; 0xfe
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <bme280_get_regs>:
 8000fd6:	b590      	push	{r4, r7, lr}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	81bb      	strh	r3, [r7, #12]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 f9a3 	bl	8002334 <null_ptr_check>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d117      	bne.n	800102a <bme280_get_regs+0x54>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	789b      	ldrb	r3, [r3, #2]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d003      	beq.n	800100a <bme280_get_regs+0x34>
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685c      	ldr	r4, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7858      	ldrb	r0, [r3, #1]
 8001012:	89bb      	ldrh	r3, [r7, #12]
 8001014:	7bf9      	ldrb	r1, [r7, #15]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	47a0      	blx	r4
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]
 800101e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <bme280_get_regs+0x54>
 8001026:	23fc      	movs	r3, #252	; 0xfc
 8001028:	75fb      	strb	r3, [r7, #23]
 800102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800102e:	4618      	mov	r0, r3
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <bme280_set_regs>:
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b08d      	sub	sp, #52	; 0x34
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d901      	bls.n	8001050 <bme280_set_regs+0x1a>
 800104c:	230a      	movs	r3, #10
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f001 f96f 	bl	8002334 <null_ptr_check>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800105c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001060:	2b00      	cmp	r3, #0
 8001062:	d154      	bne.n	800110e <bme280_set_regs+0xd8>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d051      	beq.n	800110e <bme280_set_regs+0xd8>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d04e      	beq.n	800110e <bme280_set_regs+0xd8>
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d047      	beq.n	8001106 <bme280_set_regs+0xd0>
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	753b      	strb	r3, [r7, #20]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d01a      	beq.n	80010ba <bme280_set_regs+0x84>
 8001084:	2300      	movs	r3, #0
 8001086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800108a:	e011      	b.n	80010b0 <bme280_set_regs+0x7a>
 800108c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	440b      	add	r3, r1
 800109e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010aa:	3301      	adds	r3, #1
 80010ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3e8      	bcc.n	800108c <bme280_set_regs+0x56>
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d90b      	bls.n	80010d8 <bme280_set_regs+0xa2>
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f107 0114 	add.w	r1, r7, #20
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 ffee 	bl	80020aa <interleave_reg_addr>
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010d6:	e001      	b.n	80010dc <bme280_set_regs+0xa6>
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689c      	ldr	r4, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	7858      	ldrb	r0, [r3, #1]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7819      	ldrb	r1, [r3, #0]
 80010e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010ea:	f107 0214 	add.w	r2, r7, #20
 80010ee:	47a0      	blx	r4
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <bme280_set_regs+0xe0>
 80010fe:	23fc      	movs	r3, #252	; 0xfc
 8001100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001104:	e007      	b.n	8001116 <bme280_set_regs+0xe0>
 8001106:	23fd      	movs	r3, #253	; 0xfd
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800110c:	e003      	b.n	8001116 <bme280_set_regs+0xe0>
 800110e:	23ff      	movs	r3, #255	; 0xff
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001114:	e000      	b.n	8001118 <bme280_set_regs+0xe2>
 8001116:	bf00      	nop
 8001118:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800111c:	4618      	mov	r0, r3
 800111e:	3734      	adds	r7, #52	; 0x34
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <bme280_set_sensor_settings>:
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f001 f8ff 	bl	8002334 <null_ptr_check>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d13f      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
 8001142:	f107 030e 	add.w	r3, r7, #14
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f874 	bl	8001236 <bme280_get_sensor_mode>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <bme280_set_sensor_settings+0x46>
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <bme280_set_sensor_settings+0x46>
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f000 fb4e 	bl	8001802 <put_device_to_sleep>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d127      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	2007      	movs	r0, #7
 8001178:	f001 f8c0 	bl	80022fc <are_settings_changed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <bme280_set_sensor_settings+0x72>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f98a 	bl	80014a6 <set_osr_settings>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d111      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4619      	mov	r1, r3
 80011a2:	2018      	movs	r0, #24
 80011a4:	f001 f8aa 	bl	80022fc <are_settings_changed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <bme280_set_sensor_settings+0x9e>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fa11 	bl	80015e0 <set_filter_standby_settings>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <bme280_set_sensor_mode>:
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	6039      	str	r1, [r7, #0]
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f001 f8aa 	bl	8002334 <null_ptr_check>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d11e      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
 80011ec:	f107 030e 	add.w	r3, r7, #14
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f81f 	bl	8001236 <bme280_get_sensor_mode>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <bme280_set_sensor_mode+0x46>
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <bme280_set_sensor_mode+0x46>
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f000 faf9 	bl	8001802 <put_device_to_sleep>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fabb 	bl	800179c <write_power_mode>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <bme280_get_sensor_mode>:
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f001 f877 	bl	8002334 <null_ptr_check>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10e      	bne.n	8001270 <bme280_get_sensor_mode+0x3a>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	20f4      	movs	r0, #244	; 0xf4
 800125a:	f7ff febc 	bl	8000fd6 <bme280_get_regs>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <bme280_soft_reset>:
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	23e0      	movs	r3, #224	; 0xe0
 8001286:	73bb      	strb	r3, [r7, #14]
 8001288:	23b6      	movs	r3, #182	; 0xb6
 800128a:	737b      	strb	r3, [r7, #13]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 f851 	bl	8002334 <null_ptr_check>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10d      	bne.n	80012ba <bme280_soft_reset+0x3e>
 800129e:	f107 010d 	add.w	r1, r7, #13
 80012a2:	f107 000e 	add.w	r0, r7, #14
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f7ff fec4 	bl	8001036 <bme280_set_regs>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2002      	movs	r0, #2
 80012b8:	4798      	blx	r3
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <bme280_get_sensor_data>:
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b08a      	sub	sp, #40	; 0x28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f001 f823 	bl	8002334 <null_ptr_check>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d124      	bne.n	8001346 <bme280_get_sensor_data+0x80>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d021      	beq.n	8001346 <bme280_get_sensor_data+0x80>
 8001302:	f107 011c 	add.w	r1, r7, #28
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2208      	movs	r2, #8
 800130a:	20f7      	movs	r0, #247	; 0xf7
 800130c:	f7ff fe63 	bl	8000fd6 <bme280_get_regs>
 8001310:	4603      	mov	r3, r0
 8001312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <bme280_get_sensor_data+0x86>
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f815 	bl	8001358 <bme280_parse_sensor_data>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3310      	adds	r3, #16
 8001332:	f107 0110 	add.w	r1, r7, #16
 8001336:	7bf8      	ldrb	r0, [r7, #15]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	f000 f853 	bl	80013e4 <bme280_compensate_data>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001344:	e002      	b.n	800134c <bme280_get_sensor_data+0x86>
 8001346:	23ff      	movs	r3, #255	; 0xff
 8001348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800134c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001350:	4618      	mov	r0, r3
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <bme280_parse_sensor_data>:
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	031b      	lsls	r3, r3, #12
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3301      	adds	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3302      	adds	r3, #2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b2db      	uxtb	r3, r3
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	431a      	orrs	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	431a      	orrs	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3303      	adds	r3, #3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	031b      	lsls	r3, r3, #12
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3304      	adds	r3, #4
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3305      	adds	r3, #5
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3306      	adds	r3, #6
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3307      	adds	r3, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <bme280_compensate_data>:
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	2300      	movs	r3, #0
 80013f6:	75fb      	strb	r3, [r7, #23]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d04b      	beq.n	8001496 <bme280_compensate_data+0xb2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d048      	beq.n	8001496 <bme280_compensate_data+0xb2>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d045      	beq.n	8001496 <bme280_compensate_data+0xb2>
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <bme280_compensate_data+0x70>
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f000 fa2b 	bl	800189c <compensate_temperature>
 8001446:	eeb0 7a40 	vmov.f32	s14, s0
 800144a:	eef0 7a60 	vmov.f32	s15, s1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	ed83 7b02 	vstr	d7, [r3, #8]
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <bme280_compensate_data+0x90>
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f000 faed 	bl	8001a40 <compensate_pressure>
 8001466:	eeb0 7a40 	vmov.f32	s14, s0
 800146a:	eef0 7a60 	vmov.f32	s15, s1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed83 7b00 	vstr	d7, [r3]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <bme280_compensate_data+0xb6>
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f000 fcad 	bl	8001de0 <compensate_humidity>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	eef0 7a60 	vmov.f32	s15, s1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed83 7b04 	vstr	d7, [r3, #16]
 8001494:	e001      	b.n	800149a <bme280_compensate_data+0xb6>
 8001496:	23ff      	movs	r3, #255	; 0xff
 8001498:	75fb      	strb	r3, [r7, #23]
 800149a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <set_osr_settings>:
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	2301      	movs	r3, #1
 80014b6:	75fb      	strb	r3, [r7, #23]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <set_osr_settings+0x28>
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f000 f815 	bl	80014f4 <set_osr_humidity_settings>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <set_osr_settings+0x42>
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f842 	bl	8001568 <set_osr_press_temp_settings>
 80014e4:	4603      	mov	r3, r0
 80014e6:	75fb      	strb	r3, [r7, #23]
 80014e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <set_osr_humidity_settings>:
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	23f2      	movs	r3, #242	; 0xf2
 8001500:	733b      	strb	r3, [r7, #12]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73bb      	strb	r3, [r7, #14]
 800150e:	f107 010e 	add.w	r1, r7, #14
 8001512:	f107 000c 	add.w	r0, r7, #12
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	f7ff fd8c 	bl	8001036 <bme280_set_regs>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <set_osr_humidity_settings+0x68>
 800152a:	23f4      	movs	r3, #244	; 0xf4
 800152c:	733b      	strb	r3, [r7, #12]
 800152e:	7b38      	ldrb	r0, [r7, #12]
 8001530:	f107 010d 	add.w	r1, r7, #13
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	f7ff fd4d 	bl	8000fd6 <bme280_get_regs>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <set_osr_humidity_settings+0x68>
 8001548:	f107 010d 	add.w	r1, r7, #13
 800154c:	f107 000c 	add.w	r0, r7, #12
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	f7ff fd6f 	bl	8001036 <bme280_set_regs>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <set_osr_press_temp_settings>:
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	23f4      	movs	r3, #244	; 0xf4
 8001578:	75bb      	strb	r3, [r7, #22]
 800157a:	7db8      	ldrb	r0, [r7, #22]
 800157c:	f107 0115 	add.w	r1, r7, #21
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f7ff fd27 	bl	8000fd6 <bme280_get_regs>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]
 800158c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11f      	bne.n	80015d4 <set_osr_press_temp_settings+0x6c>
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <set_osr_press_temp_settings+0x42>
 800159e:	f107 0315 	add.w	r3, r7, #21
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f88e 	bl	80016c6 <fill_osr_press_settings>
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <set_osr_press_temp_settings+0x58>
 80015b4:	f107 0315 	add.w	r3, r7, #21
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f8a0 	bl	8001700 <fill_osr_temp_settings>
 80015c0:	f107 0115 	add.w	r1, r7, #21
 80015c4:	f107 0016 	add.w	r0, r7, #22
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f7ff fd33 	bl	8001036 <bme280_set_regs>
 80015d0:	4603      	mov	r3, r0
 80015d2:	75fb      	strb	r3, [r7, #23]
 80015d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <set_filter_standby_settings>:
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	23f5      	movs	r3, #245	; 0xf5
 80015f0:	75bb      	strb	r3, [r7, #22]
 80015f2:	7db8      	ldrb	r0, [r7, #22]
 80015f4:	f107 0115 	add.w	r1, r7, #21
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f7ff fceb 	bl	8000fd6 <bme280_get_regs>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]
 8001604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11f      	bne.n	800164c <set_filter_standby_settings+0x6c>
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <set_filter_standby_settings+0x42>
 8001616:	f107 0315 	add.w	r3, r7, #21
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f81b 	bl	8001658 <fill_filter_settings>
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <set_filter_standby_settings+0x58>
 800162c:	f107 0315 	add.w	r3, r7, #21
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f82d 	bl	8001692 <fill_standby_settings>
 8001638:	f107 0115 	add.w	r1, r7, #21
 800163c:	f107 0016 	add.w	r0, r7, #22
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fcf7 	bl	8001036 <bme280_set_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <fill_filter_settings>:
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	f023 031c 	bic.w	r3, r3, #28
 800166c:	b25a      	sxtb	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	f003 031c 	and.w	r3, r3, #28
 800167a:	b25b      	sxtb	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <fill_standby_settings>:
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	015b      	lsls	r3, r3, #5
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <fill_osr_press_settings>:
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	f023 031c 	bic.w	r3, r3, #28
 80016da:	b25a      	sxtb	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f003 031c 	and.w	r3, r3, #28
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <fill_osr_temp_settings>:
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	b25a      	sxtb	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	b25b      	sxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <parse_device_settings>:
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	b2da      	uxtb	r2, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	709a      	strb	r2, [r3, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3302      	adds	r3, #2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	109b      	asrs	r3, r3, #2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3302      	adds	r3, #2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2da      	uxtb	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	705a      	strb	r2, [r3, #1]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3303      	adds	r3, #3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	109b      	asrs	r3, r3, #2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	b2da      	uxtb	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	70da      	strb	r2, [r3, #3]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	095b      	lsrs	r3, r3, #5
 800178a:	b2da      	uxtb	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	711a      	strb	r2, [r3, #4]
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <write_power_mode>:
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	23f4      	movs	r3, #244	; 0xf4
 80017aa:	73bb      	strb	r3, [r7, #14]
 80017ac:	7bb8      	ldrb	r0, [r7, #14]
 80017ae:	f107 010d 	add.w	r1, r7, #13
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f7ff fc0e 	bl	8000fd6 <bme280_get_regs>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d117      	bne.n	80017f6 <write_power_mode+0x5a>
 80017c6:	7b7b      	ldrb	r3, [r7, #13]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	737b      	strb	r3, [r7, #13]
 80017e2:	f107 010d 	add.w	r1, r7, #13
 80017e6:	f107 000e 	add.w	r0, r7, #14
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f7ff fc22 	bl	8001036 <bme280_set_regs>
 80017f2:	4603      	mov	r3, r0
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <put_device_to_sleep>:
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	f107 0110 	add.w	r1, r7, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	20f2      	movs	r0, #242	; 0xf2
 8001814:	f7ff fbdf 	bl	8000fd6 <bme280_get_regs>
 8001818:	4603      	mov	r3, r0
 800181a:	75fb      	strb	r3, [r7, #23]
 800181c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <put_device_to_sleep+0x54>
 8001824:	f107 0208 	add.w	r2, r7, #8
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff80 	bl	8001734 <parse_device_settings>
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd21 	bl	800127c <bme280_soft_reset>
 800183a:	4603      	mov	r3, r0
 800183c:	75fb      	strb	r3, [r7, #23]
 800183e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <put_device_to_sleep+0x54>
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f808 	bl	8001862 <reload_device_settings>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
 8001856:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <reload_device_settings>:
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	201f      	movs	r0, #31
 8001872:	f7ff fe18 	bl	80014a6 <set_osr_settings>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <reload_device_settings+0x2e>
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	201f      	movs	r0, #31
 8001888:	f7ff feaa 	bl	80015e0 <set_filter_standby_settings>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <compensate_temperature>:
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <compensate_temperature+0x18c>)
 80018ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <compensate_temperature+0x190>)
 80018b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe20 	bl	8000504 <__aeabi_ui2d>
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <compensate_temperature+0x194>)
 80018ca:	f7fe ffbf 	bl	800084c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe12 	bl	8000504 <__aeabi_ui2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <compensate_temperature+0x198>)
 80018e6:	f7fe ffb1 	bl	800084c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7fe fcc9 	bl	8000288 <__aeabi_dsub>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe0d 	bl	8000524 <__aeabi_i2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001912:	f7fe fe71 	bl	80005f8 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdee 	bl	8000504 <__aeabi_ui2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001930:	f7fe ff8c 	bl	800084c <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fddf 	bl	8000504 <__aeabi_ui2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <compensate_temperature+0x19c>)
 800194c:	f7fe ff7e 	bl	800084c <__aeabi_ddiv>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fc96 	bl	8000288 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001968:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800196c:	f7fe fe44 	bl	80005f8 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fdd0 	bl	8000524 <__aeabi_i2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fe34 	bl	80005f8 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800199c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019a0:	f7fe fc74 	bl	800028c <__adddf3>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f8d4 	bl	8000b58 <__aeabi_d2iz>
 80019b0:	4602      	mov	r2, r0
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
 80019b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019be:	f7fe fc65 	bl	800028c <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <compensate_temperature+0x1a0>)
 80019d0:	f7fe ff3c 	bl	800084c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019e4:	f7ff f87a 	bl	8000adc <__aeabi_dcmplt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <compensate_temperature+0x15c>
 80019ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019f6:	e00c      	b.n	8001a12 <compensate_temperature+0x176>
 80019f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a00:	f7ff f88a 	bl	8000b18 <__aeabi_dcmpgt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <compensate_temperature+0x176>
 8001a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a16:	ec43 2b17 	vmov	d7, r2, r3
 8001a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1e:	eef0 0a67 	vmov.f32	s1, s15
 8001a22:	3730      	adds	r7, #48	; 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bdb0      	pop	{r4, r5, r7, pc}
 8001a28:	c0440000 	.word	0xc0440000
 8001a2c:	40554000 	.word	0x40554000
 8001a30:	40d00000 	.word	0x40d00000
 8001a34:	40900000 	.word	0x40900000
 8001a38:	40c00000 	.word	0x40c00000
 8001a3c:	40b40000 	.word	0x40b40000

08001a40 <compensate_pressure>:
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	a3d9      	add	r3, pc, #868	; (adr r3, 8001db0 <compensate_pressure+0x370>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a54:	a3d8      	add	r3, pc, #864	; (adr r3, 8001db8 <compensate_pressure+0x378>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd5e 	bl	8000524 <__aeabi_i2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a70:	f7fe feec 	bl	800084c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4bc1      	ldr	r3, [pc, #772]	; (8001d88 <compensate_pressure+0x348>)
 8001a82:	f7fe fc01 	bl	8000288 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a96:	f7fe fdaf 	bl	80005f8 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd3b 	bl	8000524 <__aeabi_i2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fd9f 	bl	80005f8 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4bb1      	ldr	r3, [pc, #708]	; (8001d8c <compensate_pressure+0x34c>)
 8001ac8:	f7fe fec0 	bl	800084c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd22 	bl	8000524 <__aeabi_i2d>
 8001ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae4:	f7fe fd88 	bl	80005f8 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	f7fe fbca 	bl	800028c <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b00:	f7fe fbc4 	bl	800028c <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b9f      	ldr	r3, [pc, #636]	; (8001d90 <compensate_pressure+0x350>)
 8001b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcfb 	bl	8000524 <__aeabi_i2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b98      	ldr	r3, [pc, #608]	; (8001d94 <compensate_pressure+0x354>)
 8001b34:	f7fe fd60 	bl	80005f8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fba4 	bl	800028c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fce6 	bl	8000524 <__aeabi_i2d>
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b86      	ldr	r3, [pc, #536]	; (8001d98 <compensate_pressure+0x358>)
 8001b7e:	f7fe fe65 	bl	800084c <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcc7 	bl	8000524 <__aeabi_i2d>
 8001b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9a:	f7fe fd2d 	bl	80005f8 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001baa:	f7fe fb6f 	bl	800028c <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <compensate_pressure+0x358>)
 8001bbc:	f7fe fe46 	bl	800084c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <compensate_pressure+0x34c>)
 8001bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bd2:	f7fe fe3b 	bl	800084c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <compensate_pressure+0x35c>)
 8001be4:	f7fe fb52 	bl	800028c <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4614      	mov	r4, r2
 8001bee:	461d      	mov	r5, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	88db      	ldrh	r3, [r3, #6]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc85 	bl	8000504 <__aeabi_ui2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fcf9 	bl	80005f8 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c1a:	f7fe ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 80cd 	bne.w	8001dc0 <compensate_pressure+0x380>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc6a 	bl	8000504 <__aeabi_ui2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <compensate_pressure+0x360>)
 8001c3a:	f7fe fb25 	bl	8000288 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <compensate_pressure+0x364>)
 8001c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c50:	f7fe fdfc 	bl	800084c <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c5c:	f7fe fb14 	bl	8000288 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	a345      	add	r3, pc, #276	; (adr r3, 8001d80 <compensate_pressure+0x340>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7e:	f7fe fde5 	bl	800084c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc47 	bl	8000524 <__aeabi_i2d>
 8001c96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c9a:	f7fe fcad 	bl	80005f8 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001caa:	f7fe fca5 	bl	80005f8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <compensate_pressure+0x368>)
 8001cbc:	f7fe fdc6 	bl	800084c <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc28 	bl	8000524 <__aeabi_i2d>
 8001cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <compensate_pressure+0x34c>)
 8001cea:	f7fe fdaf 	bl	800084c <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cfe:	f7fe fac5 	bl	800028c <__adddf3>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	461d      	mov	r5, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc07 	bl	8000524 <__aeabi_i2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fab5 	bl	800028c <__adddf3>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <compensate_pressure+0x36c>)
 8001d30:	f7fe fd8c 	bl	800084c <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d3c:	f7fe faa6 	bl	800028c <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d50:	f7fe fec4 	bl	8000adc <__aeabi_dcmplt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <compensate_pressure+0x324>
 8001d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d62:	e031      	b.n	8001dc8 <compensate_pressure+0x388>
 8001d64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d6c:	f7fe fed4 	bl	8000b18 <__aeabi_dcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d028      	beq.n	8001dc8 <compensate_pressure+0x388>
 8001d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d7e:	e023      	b.n	8001dc8 <compensate_pressure+0x388>
 8001d80:	00000000 	.word	0x00000000
 8001d84:	40b86a00 	.word	0x40b86a00
 8001d88:	40ef4000 	.word	0x40ef4000
 8001d8c:	40e00000 	.word	0x40e00000
 8001d90:	40100000 	.word	0x40100000
 8001d94:	40f00000 	.word	0x40f00000
 8001d98:	41200000 	.word	0x41200000
 8001d9c:	3ff00000 	.word	0x3ff00000
 8001da0:	41300000 	.word	0x41300000
 8001da4:	40b00000 	.word	0x40b00000
 8001da8:	41e00000 	.word	0x41e00000
 8001dac:	40300000 	.word	0x40300000
 8001db0:	00000000 	.word	0x00000000
 8001db4:	40dd4c00 	.word	0x40dd4c00
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40fadb00 	.word	0x40fadb00
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dcc:	ec43 2b17 	vmov	d7, r2, r3
 8001dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd4:	eef0 0a67 	vmov.f32	s1, s15
 8001dd8:	3738      	adds	r7, #56	; 0x38
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dde:	bf00      	nop

08001de0 <compensate_humidity>:
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b094      	sub	sp, #80	; 0x50
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <compensate_humidity+0x220>)
 8001dfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b7d      	ldr	r3, [pc, #500]	; (8002004 <compensate_humidity+0x224>)
 8001e10:	f7fe fa3a 	bl	8000288 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb7e 	bl	8000524 <__aeabi_i2d>
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b76      	ldr	r3, [pc, #472]	; (8002008 <compensate_humidity+0x228>)
 8001e2e:	f7fe fbe3 	bl	80005f8 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4614      	mov	r4, r2
 8001e38:	461d      	mov	r5, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <compensate_humidity+0x22c>)
 8001e4c:	f7fe fcfe 	bl	800084c <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe fa10 	bl	800028c <__adddf3>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb43 	bl	8000504 <__aeabi_ui2d>
 8001e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e82:	f7fe fa01 	bl	8000288 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <compensate_humidity+0x230>)
 8001ea0:	f7fe fcd4 	bl	800084c <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	7f1b      	ldrb	r3, [r3, #28]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb27 	bl	8000504 <__aeabi_ui2d>
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <compensate_humidity+0x234>)
 8001ebc:	f7fe fcc6 	bl	800084c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ecc:	f7fe fb94 	bl	80005f8 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <compensate_humidity+0x238>)
 8001ede:	f7fe f9d5 	bl	800028c <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb17 	bl	8000524 <__aeabi_i2d>
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <compensate_humidity+0x234>)
 8001efc:	f7fe fca6 	bl	800084c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f1c:	f7fe fb6c 	bl	80005f8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <compensate_humidity+0x238>)
 8001f2e:	f7fe f9ad 	bl	800028c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f42:	f7fe fb59 	bl	80005f8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f56:	f7fe fb4f 	bl	80005f8 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fb49 	bl	80005f8 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7e1b      	ldrb	r3, [r3, #24]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fac6 	bl	8000504 <__aeabi_ui2d>
 8001f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f7c:	f7fe fb3c 	bl	80005f8 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <compensate_humidity+0x23c>)
 8001f8e:	f7fe fc5d 	bl	800084c <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	f04f 0000 	mov.w	r0, #0
 8001f9a:	491f      	ldr	r1, [pc, #124]	; (8002018 <compensate_humidity+0x238>)
 8001f9c:	f7fe f974 	bl	8000288 <__aeabi_dsub>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa8:	f7fe fb26 	bl	80005f8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fbc:	f7fe fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <compensate_humidity+0x1f0>
 8001fc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fce:	e00c      	b.n	8001fea <compensate_humidity+0x20a>
 8001fd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fd4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fd8:	f7fe fd80 	bl	8000adc <__aeabi_dcmplt>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <compensate_humidity+0x20a>
 8001fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fee:	ec43 2b17 	vmov	d7, r2, r3
 8001ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff6:	eef0 0a67 	vmov.f32	s1, s15
 8001ffa:	3750      	adds	r7, #80	; 0x50
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	40590000 	.word	0x40590000
 8002004:	40f2c000 	.word	0x40f2c000
 8002008:	40500000 	.word	0x40500000
 800200c:	40d00000 	.word	0x40d00000
 8002010:	40f00000 	.word	0x40f00000
 8002014:	41900000 	.word	0x41900000
 8002018:	3ff00000 	.word	0x3ff00000
 800201c:	41200000 	.word	0x41200000

08002020 <get_calib_data>:
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	2388      	movs	r3, #136	; 0x88
 800202a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	829a      	strh	r2, [r3, #20]
 8002044:	f107 010c 	add.w	r1, r7, #12
 8002048:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	221a      	movs	r2, #26
 8002050:	f7fe ffc1 	bl	8000fd6 <bme280_get_regs>
 8002054:	4603      	mov	r3, r0
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800205a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11d      	bne.n	800209e <get_calib_data+0x7e>
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 f84a 	bl	8002102 <parse_temp_press_calib_data>
 800206e:	23e1      	movs	r3, #225	; 0xe1
 8002070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002074:	f107 010c 	add.w	r1, r7, #12
 8002078:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2207      	movs	r2, #7
 8002080:	f7fe ffa9 	bl	8000fd6 <bme280_get_regs>
 8002084:	4603      	mov	r3, r0
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800208a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <get_calib_data+0x7e>
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f8e1 	bl	8002260 <parse_humidity_calib_data>
 800209e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020a2:	4618      	mov	r0, r3
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <interleave_reg_addr>:
 80020aa:	b480      	push	{r7}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	70fb      	strb	r3, [r7, #3]
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
 80020bc:	e016      	b.n	80020ec <interleave_reg_addr+0x42>
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	441a      	add	r2, r3
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	440b      	add	r3, r1
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	441a      	add	r2, r3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4619      	mov	r1, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	440b      	add	r3, r1
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	3301      	adds	r3, #1
 80020ea:	75fb      	strb	r3, [r7, #23]
 80020ec:	7dfa      	ldrb	r2, [r7, #23]
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3e4      	bcc.n	80020be <interleave_reg_addr+0x14>
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <parse_temp_press_calib_data>:
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3310      	adds	r3, #16
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3301      	adds	r3, #1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21a      	sxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3303      	adds	r3, #3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3302      	adds	r3, #2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21a      	sxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	805a      	strh	r2, [r3, #2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3305      	adds	r3, #5
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3304      	adds	r3, #4
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21a      	sxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	809a      	strh	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3307      	adds	r3, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3306      	adds	r3, #6
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	80da      	strh	r2, [r3, #6]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3309      	adds	r3, #9
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b21a      	sxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3308      	adds	r3, #8
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21a      	sxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	811a      	strh	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	330b      	adds	r3, #11
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	330a      	adds	r3, #10
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	815a      	strh	r2, [r3, #10]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	330d      	adds	r3, #13
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	330c      	adds	r3, #12
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	819a      	strh	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	330f      	adds	r3, #15
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	330e      	adds	r3, #14
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b21b      	sxth	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b21a      	sxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	81da      	strh	r2, [r3, #14]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3311      	adds	r3, #17
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3310      	adds	r3, #16
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	821a      	strh	r2, [r3, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3313      	adds	r3, #19
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b21a      	sxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3312      	adds	r3, #18
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21a      	sxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	825a      	strh	r2, [r3, #18]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3315      	adds	r3, #21
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b21a      	sxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3314      	adds	r3, #20
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b21a      	sxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	829a      	strh	r2, [r3, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3317      	adds	r3, #23
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3316      	adds	r3, #22
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21a      	sxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	82da      	strh	r2, [r3, #22]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e5a      	ldrb	r2, [r3, #25]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	761a      	strb	r2, [r3, #24]
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <parse_humidity_calib_data>:
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	3310      	adds	r3, #16
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b21b      	sxth	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b21a      	sxth	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	835a      	strh	r2, [r3, #26]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	789a      	ldrb	r2, [r3, #2]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	771a      	strb	r2, [r3, #28]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3303      	adds	r3, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b25b      	sxtb	r3, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	b29b      	uxth	r3, r3
 800229e:	827b      	strh	r3, [r7, #18]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	823b      	strh	r3, [r7, #16]
 80022ae:	8a7a      	ldrh	r2, [r7, #18]
 80022b0:	8a3b      	ldrh	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	83da      	strh	r2, [r3, #30]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3305      	adds	r3, #5
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	81fb      	strh	r3, [r7, #14]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	81bb      	strh	r3, [r7, #12]
 80022d6:	89fa      	ldrh	r2, [r7, #14]
 80022d8:	89bb      	ldrh	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	b21a      	sxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	841a      	strh	r2, [r3, #32]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3306      	adds	r3, #6
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b25a      	sxtb	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <are_settings_changed>:
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	4013      	ands	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <are_settings_changed+0x26>
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e001      	b.n	8002326 <are_settings_changed+0x2a>
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <null_ptr_check>:
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <null_ptr_check+0x26>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <null_ptr_check+0x26>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <null_ptr_check+0x26>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <null_ptr_check+0x2c>
 800235a:	23ff      	movs	r3, #255	; 0xff
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e001      	b.n	8002364 <null_ptr_check+0x30>
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

	// Передати в чергу !!!!!!!!!!  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);   // was 1
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	480a      	ldr	r0, [pc, #40]	; (80023c0 <Mount_SD+0x38>)
 8002396:	f00d f9cd 	bl	800f734 <f_mount>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <Mount_SD+0x3c>)
 80023a0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <Mount_SD+0x3c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <Mount_SD+0x2a>
	{
		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80023aa:	4807      	ldr	r0, [pc, #28]	; (80023c8 <Mount_SD+0x40>)
 80023ac:	f7ff ffe2 	bl	8002374 <Send_Uart>
	}
	else
	{
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 80023b0:	e002      	b.n	80023b8 <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <Mount_SD+0x44>)
 80023b4:	f7ff ffde 	bl	8002374 <Send_Uart>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20005f34 	.word	0x20005f34
 80023c4:	20006f80 	.word	0x20006f80
 80023c8:	080180c8 	.word	0x080180c8
 80023cc:	080180ec 	.word	0x080180ec

080023d0 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80023d8:	2201      	movs	r2, #1
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	2000      	movs	r0, #0
 80023de:	f00d f9a9 	bl	800f734 <f_mount>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <Unmount_SD+0x38>)
 80023e8:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <Unmount_SD+0x38>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <Unmount_SD+0x2a>
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <Unmount_SD+0x3c>)
 80023f4:	f7ff ffbe 	bl	8002374 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 80023f8:	e002      	b.n	8002400 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <Unmount_SD+0x40>)
 80023fc:	f7ff ffba 	bl	8002374 <Send_Uart>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20006f80 	.word	0x20006f80
 800240c:	08018110 	.word	0x08018110
 8002410:	08018138 	.word	0x08018138

08002414 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800241c:	4940      	ldr	r1, [pc, #256]	; (8002520 <Create_File+0x10c>)
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f00d feca 	bl	80101b8 <f_stat>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <Create_File+0x110>)
 800242a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800242c:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <Create_File+0x110>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d111      	bne.n	8002458 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8002434:	2064      	movs	r0, #100	; 0x64
 8002436:	f011 ff6f 	bl	8014318 <pvPortMalloc>
 800243a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	493a      	ldr	r1, [pc, #232]	; (8002528 <Create_File+0x114>)
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f013 fd79 	bl	8015f38 <siprintf>
		Send_Uart(buf);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff ff94 	bl	8002374 <Send_Uart>
		vPortFree(buf);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f012 f82f 	bl	80144b0 <vPortFree>
	    return fresult;
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <Create_File+0x110>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	e05f      	b.n	8002518 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8002458:	220b      	movs	r2, #11
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4833      	ldr	r0, [pc, #204]	; (800252c <Create_File+0x118>)
 800245e:	f00d f9cd 	bl	800f7fc <f_open>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <Create_File+0x110>)
 8002468:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <Create_File+0x110>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d014      	beq.n	800249c <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8002472:	2064      	movs	r0, #100	; 0x64
 8002474:	f011 ff50 	bl	8014318 <pvPortMalloc>
 8002478:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <Create_File+0x110>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	492b      	ldr	r1, [pc, #172]	; (8002530 <Create_File+0x11c>)
 8002484:	6938      	ldr	r0, [r7, #16]
 8002486:	f013 fd57 	bl	8015f38 <siprintf>
			Send_Uart(buf);
 800248a:	6938      	ldr	r0, [r7, #16]
 800248c:	f7ff ff72 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 8002490:	6938      	ldr	r0, [r7, #16]
 8002492:	f012 f80d 	bl	80144b0 <vPortFree>
		    return fresult;
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <Create_File+0x110>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	e03d      	b.n	8002518 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800249c:	2064      	movs	r0, #100	; 0x64
 800249e:	f011 ff3b 	bl	8014318 <pvPortMalloc>
 80024a2:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4923      	ldr	r1, [pc, #140]	; (8002534 <Create_File+0x120>)
 80024a8:	69f8      	ldr	r0, [r7, #28]
 80024aa:	f013 fd45 	bl	8015f38 <siprintf>
			Send_Uart(buf);
 80024ae:	69f8      	ldr	r0, [r7, #28]
 80024b0:	f7ff ff60 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 80024b4:	69f8      	ldr	r0, [r7, #28]
 80024b6:	f011 fffb 	bl	80144b0 <vPortFree>
		}

		fresult = f_close(&fil);
 80024ba:	481c      	ldr	r0, [pc, #112]	; (800252c <Create_File+0x118>)
 80024bc:	f00d fe4d 	bl	801015a <f_close>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <Create_File+0x110>)
 80024c6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <Create_File+0x110>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f011 ff21 	bl	8014318 <pvPortMalloc>
 80024d6:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <Create_File+0x110>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4915      	ldr	r1, [pc, #84]	; (8002538 <Create_File+0x124>)
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f013 fd28 	bl	8015f38 <siprintf>
			Send_Uart(buf);
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f7ff ff43 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f011 ffde 	bl	80144b0 <vPortFree>
 80024f4:	e00e      	b.n	8002514 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024f6:	2064      	movs	r0, #100	; 0x64
 80024f8:	f011 ff0e 	bl	8014318 <pvPortMalloc>
 80024fc:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	490e      	ldr	r1, [pc, #56]	; (800253c <Create_File+0x128>)
 8002502:	69b8      	ldr	r0, [r7, #24]
 8002504:	f013 fd18 	bl	8015f38 <siprintf>
			Send_Uart(buf);
 8002508:	69b8      	ldr	r0, [r7, #24]
 800250a:	f7ff ff33 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f011 ffce 	bl	80144b0 <vPortFree>
		}
	}
    return fresult;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <Create_File+0x110>)
 8002516:	781b      	ldrb	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20005e1c 	.word	0x20005e1c
 8002524:	20006f80 	.word	0x20006f80
 8002528:	08018308 	.word	0x08018308
 800252c:	20006f88 	.word	0x20006f88
 8002530:	08018340 	.word	0x08018340
 8002534:	08018368 	.word	0x08018368
 8002538:	080183a8 	.word	0x080183a8
 800253c:	080182e8 	.word	0x080182e8

08002540 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800254a:	4953      	ldr	r1, [pc, #332]	; (8002698 <Update_File+0x158>)
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f00d fe33 	bl	80101b8 <f_stat>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	4b51      	ldr	r3, [pc, #324]	; (800269c <Update_File+0x15c>)
 8002558:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <Update_File+0x15c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d011      	beq.n	8002586 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8002562:	2064      	movs	r0, #100	; 0x64
 8002564:	f011 fed8 	bl	8014318 <pvPortMalloc>
 8002568:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	494c      	ldr	r1, [pc, #304]	; (80026a0 <Update_File+0x160>)
 800256e:	68b8      	ldr	r0, [r7, #8]
 8002570:	f013 fce2 	bl	8015f38 <siprintf>
		Send_Uart (buf);
 8002574:	68b8      	ldr	r0, [r7, #8]
 8002576:	f7ff fefd 	bl	8002374 <Send_Uart>
		vPortFree(buf);
 800257a:	68b8      	ldr	r0, [r7, #8]
 800257c:	f011 ff98 	bl	80144b0 <vPortFree>
	    return fresult;
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <Update_File+0x15c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	e083      	b.n	800268e <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8002586:	2232      	movs	r2, #50	; 0x32
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4846      	ldr	r0, [pc, #280]	; (80026a4 <Update_File+0x164>)
 800258c:	f00d f936 	bl	800f7fc <f_open>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	4b41      	ldr	r3, [pc, #260]	; (800269c <Update_File+0x15c>)
 8002596:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8002598:	4b40      	ldr	r3, [pc, #256]	; (800269c <Update_File+0x15c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d014      	beq.n	80025ca <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80025a0:	2064      	movs	r0, #100	; 0x64
 80025a2:	f011 feb9 	bl	8014318 <pvPortMalloc>
 80025a6:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <Update_File+0x15c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	493d      	ldr	r1, [pc, #244]	; (80026a8 <Update_File+0x168>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f013 fcc0 	bl	8015f38 <siprintf>
	    	Send_Uart(buf);
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f7ff fedb 	bl	8002374 <Send_Uart>
	        vPortFree(buf);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f011 ff76 	bl	80144b0 <vPortFree>
	        return fresult;
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <Update_File+0x15c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	e061      	b.n	800268e <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f7fd fe00 	bl	80001d0 <strlen>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <Update_File+0x16c>)
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	4833      	ldr	r0, [pc, #204]	; (80026a4 <Update_File+0x164>)
 80025d8:	f00d fb73 	bl	800fcc2 <f_write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	4b2e      	ldr	r3, [pc, #184]	; (800269c <Update_File+0x15c>)
 80025e2:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <Update_File+0x15c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80025ec:	2064      	movs	r0, #100	; 0x64
 80025ee:	f011 fe93 	bl	8014318 <pvPortMalloc>
 80025f2:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <Update_File+0x15c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	492c      	ldr	r1, [pc, #176]	; (80026b0 <Update_File+0x170>)
 80025fe:	69b8      	ldr	r0, [r7, #24]
 8002600:	f013 fc9a 	bl	8015f38 <siprintf>
	    	Send_Uart(buf);
 8002604:	69b8      	ldr	r0, [r7, #24]
 8002606:	f7ff feb5 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 800260a:	69b8      	ldr	r0, [r7, #24]
 800260c:	f011 ff50 	bl	80144b0 <vPortFree>
 8002610:	e00e      	b.n	8002630 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002612:	2064      	movs	r0, #100	; 0x64
 8002614:	f011 fe80 	bl	8014318 <pvPortMalloc>
 8002618:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4925      	ldr	r1, [pc, #148]	; (80026b4 <Update_File+0x174>)
 800261e:	69f8      	ldr	r0, [r7, #28]
 8002620:	f013 fc8a 	bl	8015f38 <siprintf>
	    	Send_Uart(buf);
 8002624:	69f8      	ldr	r0, [r7, #28]
 8002626:	f7ff fea5 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f011 ff40 	bl	80144b0 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8002630:	481c      	ldr	r0, [pc, #112]	; (80026a4 <Update_File+0x164>)
 8002632:	f00d fd92 	bl	801015a <f_close>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <Update_File+0x15c>)
 800263c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <Update_File+0x15c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d012      	beq.n	800266c <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002646:	2064      	movs	r0, #100	; 0x64
 8002648:	f011 fe66 	bl	8014318 <pvPortMalloc>
 800264c:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <Update_File+0x15c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4918      	ldr	r1, [pc, #96]	; (80026b8 <Update_File+0x178>)
 8002658:	6938      	ldr	r0, [r7, #16]
 800265a:	f013 fc6d 	bl	8015f38 <siprintf>
	    	Send_Uart(buf);
 800265e:	6938      	ldr	r0, [r7, #16]
 8002660:	f7ff fe88 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 8002664:	6938      	ldr	r0, [r7, #16]
 8002666:	f011 ff23 	bl	80144b0 <vPortFree>
 800266a:	e00e      	b.n	800268a <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f011 fe53 	bl	8014318 <pvPortMalloc>
 8002672:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4911      	ldr	r1, [pc, #68]	; (80026bc <Update_File+0x17c>)
 8002678:	6978      	ldr	r0, [r7, #20]
 800267a:	f013 fc5d 	bl	8015f38 <siprintf>
	    	Send_Uart(buf);
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff fe78 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 8002684:	6978      	ldr	r0, [r7, #20]
 8002686:	f011 ff13 	bl	80144b0 <vPortFree>
	     }
	}
    return fresult;
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <Update_File+0x15c>)
 800268c:	781b      	ldrb	r3, [r3, #0]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20005e1c 	.word	0x20005e1c
 800269c:	20006f80 	.word	0x20006f80
 80026a0:	08018190 	.word	0x08018190
 80026a4:	20006f88 	.word	0x20006f88
 80026a8:	080181b0 	.word	0x080181b0
 80026ac:	20006f78 	.word	0x20006f78
 80026b0:	080183cc 	.word	0x080183cc
 80026b4:	080183f4 	.word	0x080183f4
 80026b8:	080182c0 	.word	0x080182c0
 80026bc:	080182e8 	.word	0x080182e8

080026c0 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f00d fdc2 	bl	8010252 <f_mkdir>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <Create_Dir+0x70>)
 80026d4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <Create_Dir+0x70>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <Create_Dir+0x3e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 80026de:	2064      	movs	r0, #100	; 0x64
 80026e0:	f011 fe1a 	bl	8014318 <pvPortMalloc>
 80026e4:	60b8      	str	r0, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4912      	ldr	r1, [pc, #72]	; (8002734 <Create_Dir+0x74>)
 80026ea:	68b8      	ldr	r0, [r7, #8]
 80026ec:	f013 fc24 	bl	8015f38 <siprintf>
    	Send_Uart (buf);
 80026f0:	68b8      	ldr	r0, [r7, #8]
 80026f2:	f7ff fe3f 	bl	8002374 <Send_Uart>
    	vPortFree(buf);
 80026f6:	68b8      	ldr	r0, [r7, #8]
 80026f8:	f011 feda 	bl	80144b0 <vPortFree>
 80026fc:	e011      	b.n	8002722 <Create_Dir+0x62>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 80026fe:	2064      	movs	r0, #100	; 0x64
 8002700:	f011 fe0a 	bl	8014318 <pvPortMalloc>
 8002704:	60f8      	str	r0, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <Create_Dir+0x70>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <Create_Dir+0x78>)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f013 fc11 	bl	8015f38 <siprintf>
    	Send_Uart(buf);
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff fe2c 	bl	8002374 <Send_Uart>
    	vPortFree(buf);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f011 fec7 	bl	80144b0 <vPortFree>
    }
    return fresult;
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <Create_Dir+0x70>)
 8002724:	781b      	ldrb	r3, [r3, #0]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20006f80 	.word	0x20006f80
 8002734:	08018454 	.word	0x08018454
 8002738:	08018478 	.word	0x08018478

0800273c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <SELECT+0x14>)
 8002746:	f002 fed1 	bl	80054ec <HAL_GPIO_WritePin>
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40020800 	.word	0x40020800

08002754 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002758:	2201      	movs	r2, #1
 800275a:	2140      	movs	r1, #64	; 0x40
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <DESELECT+0x14>)
 800275e:	f002 fec5 	bl	80054ec <HAL_GPIO_WritePin>
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40020800 	.word	0x40020800

0800276c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002776:	bf00      	nop
 8002778:	4808      	ldr	r0, [pc, #32]	; (800279c <SPI_TxByte+0x30>)
 800277a:	f006 fed2 	bl	8009522 <HAL_SPI_GetState>
 800277e:	4603      	mov	r3, r0
 8002780:	2b01      	cmp	r3, #1
 8002782:	d1f9      	bne.n	8002778 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002784:	1df9      	adds	r1, r7, #7
 8002786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278a:	2201      	movs	r2, #1
 800278c:	4803      	ldr	r0, [pc, #12]	; (800279c <SPI_TxByte+0x30>)
 800278e:	f006 fbea 	bl	8008f66 <HAL_SPI_Transmit>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2000ef94 	.word	0x2000ef94

080027a0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80027a6:	23ff      	movs	r3, #255	; 0xff
 80027a8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80027ae:	bf00      	nop
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <SPI_RxByte+0x38>)
 80027b2:	f006 feb6 	bl	8009522 <HAL_SPI_GetState>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d1f9      	bne.n	80027b0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80027bc:	1dba      	adds	r2, r7, #6
 80027be:	1df9      	adds	r1, r7, #7
 80027c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <SPI_RxByte+0x38>)
 80027ca:	f006 fd08 	bl	80091de <HAL_SPI_TransmitReceive>
  
  return data;
 80027ce:	79bb      	ldrb	r3, [r7, #6]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2000ef94 	.word	0x2000ef94

080027dc <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80027e4:	f7ff ffdc 	bl	80027a0 <SPI_RxByte>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <SD_ReadyWait+0x34>)
 8002800:	2232      	movs	r2, #50	; 0x32
 8002802:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002804:	f7ff ffcc 	bl	80027a0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8002808:	f7ff ffca 	bl	80027a0 <SPI_RxByte>
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2bff      	cmp	r3, #255	; 0xff
 8002814:	d004      	beq.n	8002820 <SD_ReadyWait+0x28>
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <SD_ReadyWait+0x34>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f3      	bne.n	8002808 <SD_ReadyWait+0x10>
  
  return res;
 8002820:	79fb      	ldrb	r3, [r7, #7]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2000ef8c 	.word	0x2000ef8c

08002830 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8002836:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800283a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800283c:	f7ff ff8a 	bl	8002754 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e005      	b.n	8002852 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002846:	20ff      	movs	r0, #255	; 0xff
 8002848:	f7ff ff90 	bl	800276c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	3301      	adds	r3, #1
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b09      	cmp	r3, #9
 8002856:	ddf6      	ble.n	8002846 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8002858:	f7ff ff70 	bl	800273c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800285c:	2340      	movs	r3, #64	; 0x40
 800285e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8002870:	2395      	movs	r3, #149	; 0x95
 8002872:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e009      	b.n	800288e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800287a:	1d3a      	adds	r2, r7, #4
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff72 	bl	800276c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b05      	cmp	r3, #5
 8002892:	ddf2      	ble.n	800287a <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8002894:	e002      	b.n	800289c <SD_PowerOn+0x6c>
  {
    Count--;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3b01      	subs	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800289c:	f7ff ff80 	bl	80027a0 <SPI_RxByte>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d002      	beq.n	80028ac <SD_PowerOn+0x7c>
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f4      	bne.n	8002896 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80028ac:	f7ff ff52 	bl	8002754 <DESELECT>
  SPI_TxByte(0XFF);
 80028b0:	20ff      	movs	r0, #255	; 0xff
 80028b2:	f7ff ff5b 	bl	800276c <SPI_TxByte>
  
  PowerFlag = 1;
 80028b6:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <SD_PowerOn+0x94>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	2000038d 	.word	0x2000038d

080028c8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <SD_PowerOff+0x14>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	2000038d 	.word	0x2000038d

080028e0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <SD_CheckPower+0x14>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	2000038d 	.word	0x2000038d

080028f8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <SD_RxDataBlock+0x68>)
 8002904:	220a      	movs	r2, #10
 8002906:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8002908:	f7ff ff4a 	bl	80027a0 <SPI_RxByte>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2bff      	cmp	r3, #255	; 0xff
 8002914:	d104      	bne.n	8002920 <SD_RxDataBlock+0x28>
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <SD_RxDataBlock+0x68>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f3      	bne.n	8002908 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2bfe      	cmp	r3, #254	; 0xfe
 8002924:	d001      	beq.n	800292a <SD_RxDataBlock+0x32>
    return FALSE;
 8002926:	2300      	movs	r3, #0
 8002928:	e016      	b.n	8002958 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff53 	bl	80027dc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff4d 	bl	80027dc <SPI_RxBytePtr>
  } while(btr -= 2);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3b02      	subs	r3, #2
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ed      	bne.n	800292a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800294e:	f7ff ff27 	bl	80027a0 <SPI_RxByte>
  SPI_RxByte();
 8002952:	f7ff ff25 	bl	80027a0 <SPI_RxByte>
  
  return TRUE;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	200100f4 	.word	0x200100f4

08002964 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002974:	f7ff ff40 	bl	80027f8 <SD_ReadyWait>
 8002978:	4603      	mov	r3, r0
 800297a:	2bff      	cmp	r3, #255	; 0xff
 800297c:	d001      	beq.n	8002982 <SD_TxDataBlock+0x1e>
    return FALSE;
 800297e:	2300      	movs	r3, #0
 8002980:	e040      	b.n	8002a04 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fef1 	bl	800276c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	2bfd      	cmp	r3, #253	; 0xfd
 800298e:	d031      	beq.n	80029f4 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fee5 	bl	800276c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fede 	bl	800276c <SPI_TxByte>
    } while (--wc);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	73bb      	strb	r3, [r7, #14]
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1eb      	bne.n	8002994 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80029bc:	f7ff fef0 	bl	80027a0 <SPI_RxByte>
    SPI_RxByte();
 80029c0:	f7ff feee 	bl	80027a0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80029c4:	e00b      	b.n	80029de <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80029c6:	f7ff feeb 	bl	80027a0 <SPI_RxByte>
 80029ca:	4603      	mov	r3, r0
 80029cc:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	d006      	beq.n	80029e6 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80029d8:	7b7b      	ldrb	r3, [r7, #13]
 80029da:	3301      	adds	r3, #1
 80029dc:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80029de:	7b7b      	ldrb	r3, [r7, #13]
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d9f0      	bls.n	80029c6 <SD_TxDataBlock+0x62>
 80029e4:	e000      	b.n	80029e8 <SD_TxDataBlock+0x84>
        break;
 80029e6:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80029e8:	bf00      	nop
 80029ea:	f7ff fed9 	bl	80027a0 <SPI_RxByte>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0fa      	beq.n	80029ea <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d101      	bne.n	8002a02 <SD_TxDataBlock+0x9e>
    return TRUE;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002a18:	f7ff feee 	bl	80027f8 <SD_ReadyWait>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d001      	beq.n	8002a26 <SD_SendCmd+0x1a>
    return 0xFF;
 8002a22:	23ff      	movs	r3, #255	; 0xff
 8002a24:	e040      	b.n	8002aa8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fe9f 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	0e1b      	lsrs	r3, r3, #24
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe99 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fe93 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fe8d 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fe88 	bl	800276c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d101      	bne.n	8002a6a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8002a66:	2395      	movs	r3, #149	; 0x95
 8002a68:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b48      	cmp	r3, #72	; 0x48
 8002a6e:	d101      	bne.n	8002a74 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002a70:	2387      	movs	r3, #135	; 0x87
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fe78 	bl	800276c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b4c      	cmp	r3, #76	; 0x4c
 8002a80:	d101      	bne.n	8002a86 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002a82:	f7ff fe8d 	bl	80027a0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8002a86:	230a      	movs	r3, #10
 8002a88:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8002a8a:	f7ff fe89 	bl	80027a0 <SPI_RxByte>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002a92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da05      	bge.n	8002aa6 <SD_SendCmd+0x9a>
 8002a9a:	7bbb      	ldrb	r3, [r7, #14]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	73bb      	strb	r3, [r7, #14]
 8002aa0:	7bbb      	ldrb	r3, [r7, #14]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f1      	bne.n	8002a8a <SD_SendCmd+0x7e>
  
  return res;
 8002aa6:	7b7b      	ldrb	r3, [r7, #13]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d5      	b.n	8002c70 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002ac4:	4b6c      	ldr	r3, [pc, #432]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <SD_disk_initialize+0x2a>
    return Stat;        
 8002ad2:	4b69      	ldr	r3, [pc, #420]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e0ca      	b.n	8002c70 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8002ada:	f7ff fea9 	bl	8002830 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8002ade:	f7ff fe2d 	bl	800273c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2040      	movs	r0, #64	; 0x40
 8002aea:	f7ff ff8f 	bl	8002a0c <SD_SendCmd>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	f040 80a5 	bne.w	8002c40 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8002af6:	4b61      	ldr	r3, [pc, #388]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002af8:	2264      	movs	r2, #100	; 0x64
 8002afa:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002afc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002b00:	2048      	movs	r0, #72	; 0x48
 8002b02:	f7ff ff83 	bl	8002a0c <SD_SendCmd>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d158      	bne.n	8002bbe <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e00c      	b.n	8002b2c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002b12:	7bfc      	ldrb	r4, [r7, #15]
 8002b14:	f7ff fe44 	bl	80027a0 <SPI_RxByte>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4423      	add	r3, r4
 8002b22:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d9ef      	bls.n	8002b12 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002b32:	7abb      	ldrb	r3, [r7, #10]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 8083 	bne.w	8002c40 <SD_disk_initialize+0x190>
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	2baa      	cmp	r3, #170	; 0xaa
 8002b3e:	d17f      	bne.n	8002c40 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002b40:	2100      	movs	r1, #0
 8002b42:	2077      	movs	r0, #119	; 0x77
 8002b44:	f7ff ff62 	bl	8002a0c <SD_SendCmd>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d807      	bhi.n	8002b5e <SD_disk_initialize+0xae>
 8002b4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b52:	2069      	movs	r0, #105	; 0x69
 8002b54:	f7ff ff5a 	bl	8002a0c <SD_SendCmd>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1eb      	bne.n	8002b40 <SD_disk_initialize+0x90>
 8002b68:	e000      	b.n	8002b6c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8002b6a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d064      	beq.n	8002c40 <SD_disk_initialize+0x190>
 8002b76:	2100      	movs	r1, #0
 8002b78:	207a      	movs	r0, #122	; 0x7a
 8002b7a:	f7ff ff47 	bl	8002a0c <SD_SendCmd>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d15d      	bne.n	8002c40 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
 8002b88:	e00c      	b.n	8002ba4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8002b8a:	7bfc      	ldrb	r4, [r7, #15]
 8002b8c:	f7ff fe08 	bl	80027a0 <SPI_RxByte>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	4423      	add	r3, r4
 8002b9a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d9ef      	bls.n	8002b8a <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002baa:	7a3b      	ldrb	r3, [r7, #8]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SD_disk_initialize+0x108>
 8002bb4:	2306      	movs	r3, #6
 8002bb6:	e000      	b.n	8002bba <SD_disk_initialize+0x10a>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	73bb      	strb	r3, [r7, #14]
 8002bbc:	e040      	b.n	8002c40 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2077      	movs	r0, #119	; 0x77
 8002bc2:	f7ff ff23 	bl	8002a0c <SD_SendCmd>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d808      	bhi.n	8002bde <SD_disk_initialize+0x12e>
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2069      	movs	r0, #105	; 0x69
 8002bd0:	f7ff ff1c 	bl	8002a0c <SD_SendCmd>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d801      	bhi.n	8002bde <SD_disk_initialize+0x12e>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e000      	b.n	8002be0 <SD_disk_initialize+0x130>
 8002bde:	2301      	movs	r3, #1
 8002be0:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d10e      	bne.n	8002c06 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002be8:	2100      	movs	r1, #0
 8002bea:	2077      	movs	r0, #119	; 0x77
 8002bec:	f7ff ff0e 	bl	8002a0c <SD_SendCmd>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d80e      	bhi.n	8002c14 <SD_disk_initialize+0x164>
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2069      	movs	r0, #105	; 0x69
 8002bfa:	f7ff ff07 	bl	8002a0c <SD_SendCmd>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002c04:	e00d      	b.n	8002c22 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8002c06:	2100      	movs	r1, #0
 8002c08:	2041      	movs	r0, #65	; 0x41
 8002c0a:	f7ff feff 	bl	8002a0c <SD_SendCmd>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e1      	bne.n	8002be2 <SD_disk_initialize+0x132>
 8002c1e:	e000      	b.n	8002c22 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002c20:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <SD_disk_initialize+0x18c>
 8002c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c30:	2050      	movs	r0, #80	; 0x50
 8002c32:	f7ff feeb 	bl	8002a0c <SD_SendCmd>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002c40:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <SD_disk_initialize+0x1d0>)
 8002c42:	7bbb      	ldrb	r3, [r7, #14]
 8002c44:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8002c46:	f7ff fd85 	bl	8002754 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002c4a:	f7ff fda9 	bl	80027a0 <SPI_RxByte>
  
  if (type) 
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e001      	b.n	8002c6a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002c66:	f7ff fe2f 	bl	80028c8 <SD_PowerOff>
  }
  
  return Stat;
 8002c6a:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2db      	uxtb	r3, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	200100f4 	.word	0x200100f4
 8002c80:	2000038c 	.word	0x2000038c

08002c84 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8002c94:	2301      	movs	r3, #1
 8002c96:	e002      	b.n	8002c9e <SD_disk_status+0x1a>
  
  return Stat;
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <SD_disk_status+0x28>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000000 	.word	0x20000000

08002cb0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <SD_disk_read+0x1c>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <SD_disk_read+0x20>
    return RES_PARERR;
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e051      	b.n	8002d74 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <SD_disk_read+0xcc>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e048      	b.n	8002d74 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <SD_disk_read+0xd0>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	025b      	lsls	r3, r3, #9
 8002cf2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002cf4:	f7ff fd22 	bl	800273c <SELECT>
  
  if (count == 1) 
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d111      	bne.n	8002d22 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	2051      	movs	r0, #81	; 0x51
 8002d02:	f7ff fe83 	bl	8002a0c <SD_SendCmd>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d129      	bne.n	8002d60 <SD_disk_read+0xb0>
 8002d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d10:	68b8      	ldr	r0, [r7, #8]
 8002d12:	f7ff fdf1 	bl	80028f8 <SD_RxDataBlock>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d021      	beq.n	8002d60 <SD_disk_read+0xb0>
      count = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	e01e      	b.n	8002d60 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	2052      	movs	r0, #82	; 0x52
 8002d26:	f7ff fe71 	bl	8002a0c <SD_SendCmd>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d117      	bne.n	8002d60 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d34:	68b8      	ldr	r0, [r7, #8]
 8002d36:	f7ff fddf 	bl	80028f8 <SD_RxDataBlock>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d46:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ed      	bne.n	8002d30 <SD_disk_read+0x80>
 8002d54:	e000      	b.n	8002d58 <SD_disk_read+0xa8>
          break;
 8002d56:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8002d58:	2100      	movs	r1, #0
 8002d5a:	204c      	movs	r0, #76	; 0x4c
 8002d5c:	f7ff fe56 	bl	8002a0c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002d60:	f7ff fcf8 	bl	8002754 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002d64:	f7ff fd1c 	bl	80027a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	2000038c 	.word	0x2000038c

08002d84 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4603      	mov	r3, r0
 8002d92:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <SD_disk_write+0x1c>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <SD_disk_write+0x20>
    return RES_PARERR;
 8002da0:	2304      	movs	r3, #4
 8002da2:	e06b      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8002da4:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <SD_disk_write+0x100>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e062      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <SD_disk_write+0x100>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e059      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <SD_disk_write+0x104>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	025b      	lsls	r3, r3, #9
 8002dd8:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002dda:	f7ff fcaf 	bl	800273c <SELECT>
  
  if (count == 1) 
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d110      	bne.n	8002e06 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	2058      	movs	r0, #88	; 0x58
 8002de8:	f7ff fe10 	bl	8002a0c <SD_SendCmd>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d13a      	bne.n	8002e68 <SD_disk_write+0xe4>
 8002df2:	21fe      	movs	r1, #254	; 0xfe
 8002df4:	68b8      	ldr	r0, [r7, #8]
 8002df6:	f7ff fdb5 	bl	8002964 <SD_TxDataBlock>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d033      	beq.n	8002e68 <SD_disk_write+0xe4>
      count = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	e030      	b.n	8002e68 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <SD_disk_write+0x104>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002e12:	2100      	movs	r1, #0
 8002e14:	2077      	movs	r0, #119	; 0x77
 8002e16:	f7ff fdf9 	bl	8002a0c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	2057      	movs	r0, #87	; 0x57
 8002e1e:	f7ff fdf5 	bl	8002a0c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	2059      	movs	r0, #89	; 0x59
 8002e26:	f7ff fdf1 	bl	8002a0c <SD_SendCmd>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d11b      	bne.n	8002e68 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002e30:	21fc      	movs	r1, #252	; 0xfc
 8002e32:	68b8      	ldr	r0, [r7, #8]
 8002e34:	f7ff fd96 	bl	8002964 <SD_TxDataBlock>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e44:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ee      	bne.n	8002e30 <SD_disk_write+0xac>
 8002e52:	e000      	b.n	8002e56 <SD_disk_write+0xd2>
          break;
 8002e54:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8002e56:	21fd      	movs	r1, #253	; 0xfd
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7ff fd83 	bl	8002964 <SD_TxDataBlock>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <SD_disk_write+0xe4>
      {        
        count = 1;
 8002e64:	2301      	movs	r3, #1
 8002e66:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002e68:	f7ff fc74 	bl	8002754 <DESELECT>
  SPI_RxByte();
 8002e6c:	f7ff fc98 	bl	80027a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bf14      	ite	ne
 8002e76:	2301      	movne	r3, #1
 8002e78:	2300      	moveq	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000000 	.word	0x20000000
 8002e88:	2000038c 	.word	0x2000038c

08002e8c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b08b      	sub	sp, #44	; 0x2c
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	603a      	str	r2, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e11b      	b.n	80030e2 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002eb0:	79bb      	ldrb	r3, [r7, #6]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d129      	bne.n	8002f0a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d017      	beq.n	8002eee <SD_disk_ioctl+0x62>
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	dc1f      	bgt.n	8002f02 <SD_disk_ioctl+0x76>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <SD_disk_ioctl+0x40>
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00b      	beq.n	8002ee2 <SD_disk_ioctl+0x56>
 8002eca:	e01a      	b.n	8002f02 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002ecc:	f7ff fd08 	bl	80028e0 <SD_CheckPower>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002ed6:	f7ff fcf7 	bl	80028c8 <SD_PowerOff>
      res = RES_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002ee0:	e0fd      	b.n	80030de <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002ee2:	f7ff fca5 	bl	8002830 <SD_PowerOn>
      res = RES_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002eec:	e0f7      	b.n	80030de <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	1c5c      	adds	r4, r3, #1
 8002ef2:	f7ff fcf5 	bl	80028e0 <SD_CheckPower>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002f00:	e0ed      	b.n	80030de <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002f02:	2304      	movs	r3, #4
 8002f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f08:	e0e9      	b.n	80030de <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002f0a:	4b78      	ldr	r3, [pc, #480]	; (80030ec <SD_disk_ioctl+0x260>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0e2      	b.n	80030e2 <SD_disk_ioctl+0x256>
    
    SELECT();
 8002f1c:	f7ff fc0e 	bl	800273c <SELECT>
    
    switch (ctrl) 
 8002f20:	79bb      	ldrb	r3, [r7, #6]
 8002f22:	2b0d      	cmp	r3, #13
 8002f24:	f200 80cc 	bhi.w	80030c0 <SD_disk_ioctl+0x234>
 8002f28:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <SD_disk_ioctl+0xa4>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	0800302b 	.word	0x0800302b
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	0800301b 	.word	0x0800301b
 8002f3c:	080030c1 	.word	0x080030c1
 8002f40:	080030c1 	.word	0x080030c1
 8002f44:	080030c1 	.word	0x080030c1
 8002f48:	080030c1 	.word	0x080030c1
 8002f4c:	080030c1 	.word	0x080030c1
 8002f50:	080030c1 	.word	0x080030c1
 8002f54:	080030c1 	.word	0x080030c1
 8002f58:	080030c1 	.word	0x080030c1
 8002f5c:	0800303d 	.word	0x0800303d
 8002f60:	08003061 	.word	0x08003061
 8002f64:	08003085 	.word	0x08003085
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2049      	movs	r0, #73	; 0x49
 8002f6c:	f7ff fd4e 	bl	8002a0c <SD_SendCmd>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 80a8 	bne.w	80030c8 <SD_disk_ioctl+0x23c>
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fcba 	bl	80028f8 <SD_RxDataBlock>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 809e 	beq.w	80030c8 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8002f8c:	7b3b      	ldrb	r3, [r7, #12]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10e      	bne.n	8002fb4 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002f96:	7d7b      	ldrb	r3, [r7, #21]
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	7d3b      	ldrb	r3, [r7, #20]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002faa:	8bfb      	ldrh	r3, [r7, #30]
 8002fac:	029a      	lsls	r2, r3, #10
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e02e      	b.n	8003012 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002fb4:	7c7b      	ldrb	r3, [r7, #17]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	7dbb      	ldrb	r3, [r7, #22]
 8002fbe:	09db      	lsrs	r3, r3, #7
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	7d7b      	ldrb	r3, [r7, #21]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 0306 	and.w	r3, r3, #6
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002fdc:	7d3b      	ldrb	r3, [r7, #20]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	7cbb      	ldrb	r3, [r7, #18]
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3301      	adds	r3, #1
 8003002:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003004:	8bfa      	ldrh	r2, [r7, #30]
 8003006:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800300a:	3b09      	subs	r3, #9
 800300c:	409a      	lsls	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8003018:	e056      	b.n	80030c8 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003020:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003028:	e055      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800302a:	f7ff fbe5 	bl	80027f8 <SD_ReadyWait>
 800302e:	4603      	mov	r3, r0
 8003030:	2bff      	cmp	r3, #255	; 0xff
 8003032:	d14b      	bne.n	80030cc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800303a:	e047      	b.n	80030cc <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800303c:	2100      	movs	r1, #0
 800303e:	2049      	movs	r0, #73	; 0x49
 8003040:	f7ff fce4 	bl	8002a0c <SD_SendCmd>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d142      	bne.n	80030d0 <SD_disk_ioctl+0x244>
 800304a:	2110      	movs	r1, #16
 800304c:	6a38      	ldr	r0, [r7, #32]
 800304e:	f7ff fc53 	bl	80028f8 <SD_RxDataBlock>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d03b      	beq.n	80030d0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800305e:	e037      	b.n	80030d0 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003060:	2100      	movs	r1, #0
 8003062:	204a      	movs	r0, #74	; 0x4a
 8003064:	f7ff fcd2 	bl	8002a0c <SD_SendCmd>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d132      	bne.n	80030d4 <SD_disk_ioctl+0x248>
 800306e:	2110      	movs	r1, #16
 8003070:	6a38      	ldr	r0, [r7, #32]
 8003072:	f7ff fc41 	bl	80028f8 <SD_RxDataBlock>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02b      	beq.n	80030d4 <SD_disk_ioctl+0x248>
        res = RES_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003082:	e027      	b.n	80030d4 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8003084:	2100      	movs	r1, #0
 8003086:	207a      	movs	r0, #122	; 0x7a
 8003088:	f7ff fcc0 	bl	8002a0c <SD_SendCmd>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003098:	e00b      	b.n	80030b2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800309a:	6a3c      	ldr	r4, [r7, #32]
 800309c:	1c63      	adds	r3, r4, #1
 800309e:	623b      	str	r3, [r7, #32]
 80030a0:	f7ff fb7e 	bl	80027a0 <SPI_RxByte>
 80030a4:	4603      	mov	r3, r0
 80030a6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80030a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030ac:	3301      	adds	r3, #1
 80030ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d9ef      	bls.n	800309a <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80030c0:	2304      	movs	r3, #4
 80030c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030c6:	e006      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030c8:	bf00      	nop
 80030ca:	e004      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030d4:	bf00      	nop
    }
    
    DESELECT();
 80030d6:	f7ff fb3d 	bl	8002754 <DESELECT>
    SPI_RxByte();
 80030da:	f7ff fb61 	bl	80027a0 <SPI_RxByte>
  }
  
  return res;
 80030de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	372c      	adds	r7, #44	; 0x2c
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000000 	.word	0x20000000

080030f0 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	603a      	str	r2, [r7, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	460b      	mov	r3, r1
 8003100:	71bb      	strb	r3, [r7, #6]
 8003102:	4613      	mov	r3, r2
 8003104:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	b29b      	uxth	r3, r3
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	b299      	uxth	r1, r3
 800310e:	1dba      	adds	r2, r7, #6
 8003110:	230a      	movs	r3, #10
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2301      	movs	r3, #1
 8003116:	4811      	ldr	r0, [pc, #68]	; (800315c <user_i2c_read+0x6c>)
 8003118:	f002 fb60 	bl	80057dc <HAL_I2C_Master_Transmit>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <user_i2c_read+0x38>
 8003122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003126:	e014      	b.n	8003152 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	b21b      	sxth	r3, r3
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	b21b      	sxth	r3, r3
 8003134:	b299      	uxth	r1, r3
 8003136:	88bb      	ldrh	r3, [r7, #4]
 8003138:	220a      	movs	r2, #10
 800313a:	9200      	str	r2, [sp, #0]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4807      	ldr	r0, [pc, #28]	; (800315c <user_i2c_read+0x6c>)
 8003140:	f002 fc4a 	bl	80059d8 <HAL_I2C_Master_Receive>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <user_i2c_read+0x60>
 800314a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800314e:	e000      	b.n	8003152 <user_i2c_read+0x62>

  return 0;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200080bc 	.word	0x200080bc

08003160 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f001 ff1d 	bl	8004fa8 <HAL_Delay>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af02      	add	r7, sp, #8
 800317e:	603a      	str	r2, [r7, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
 8003186:	460b      	mov	r3, r1
 8003188:	71bb      	strb	r3, [r7, #6]
 800318a:	4613      	mov	r3, r2
 800318c:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 800318e:	88bb      	ldrh	r3, [r7, #4]
 8003190:	3301      	adds	r3, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f012 f91c 	bl	80153d0 <malloc>
 8003198:	4603      	mov	r3, r0
 800319a:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 800319c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	88ba      	ldrh	r2, [r7, #4]
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f012 f91f 	bl	80153f0 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	b299      	uxth	r1, r3
 80031ba:	88bb      	ldrh	r3, [r7, #4]
 80031bc:	3301      	adds	r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c4:	9200      	str	r2, [sp, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4808      	ldr	r0, [pc, #32]	; (80031ec <user_i2c_write+0x74>)
 80031ca:	f002 fb07 	bl	80057dc <HAL_I2C_Master_Transmit>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <user_i2c_write+0x62>
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d8:	e003      	b.n	80031e2 <user_i2c_write+0x6a>

  free(buf);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f012 f900 	bl	80153e0 <free>
  return 0;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	200080bc 	.word	0x200080bc

080031f0 <delay_us>:
//
//}


bool delay_us(uint16_t us)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <delay_us+0x50>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
	tim_val = us/10;
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <delay_us+0x54>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <delay_us+0x58>)
 8003212:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8003214:	480a      	ldr	r0, [pc, #40]	; (8003240 <delay_us+0x50>)
 8003216:	f006 faad 	bl	8009774 <HAL_TIM_Base_Start_IT>
	while(tim_val != 0)
 800321a:	bf00      	nop
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <delay_us+0x58>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1fb      	bne.n	800321c <delay_us+0x2c>
	{

	}
	HAL_TIM_Base_Stop_IT(&htim10);
 8003224:	4806      	ldr	r0, [pc, #24]	; (8003240 <delay_us+0x50>)
 8003226:	f006 fb15 	bl	8009854 <HAL_TIM_Base_Stop_IT>
	tim_val = 0;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <delay_us+0x58>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
	int s = 99;
 8003230:	2363      	movs	r3, #99	; 0x63
 8003232:	60fb      	str	r3, [r7, #12]
	return true;
 8003234:	2301      	movs	r3, #1
//	{
//
//	}
//	//HAL_TIM_Base_Stop_IT(&htim10);
//	return true;
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20009180 	.word	0x20009180
 8003244:	cccccccd 	.word	0xcccccccd
 8003248:	2000077c 	.word	0x2000077c

0800324c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003250:	f001 fe68 	bl	8004f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003254:	f000 f890 	bl	8003378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003258:	f000 fae2 	bl	8003820 <MX_GPIO_Init>
  MX_TIM3_Init();
 800325c:	f000 fa70 	bl	8003740 <MX_TIM3_Init>
  MX_I2C3_Init();
 8003260:	f000 f8f6 	bl	8003450 <MX_I2C3_Init>
  MX_TIM2_Init();
 8003264:	f000 fa20 	bl	80036a8 <MX_TIM2_Init>
  MX_TIM10_Init();
 8003268:	f000 fab8 	bl	80037dc <MX_TIM10_Init>
  MX_SPI1_Init();
 800326c:	f000 f994 	bl	8003598 <MX_SPI1_Init>
  MX_FATFS_Init();
 8003270:	f008 fa5a 	bl	800b728 <MX_FATFS_Init>
  MX_TIM1_Init();
 8003274:	f000 f9c6 	bl	8003604 <MX_TIM1_Init>
  MX_RTC_Init();
 8003278:	f000 f918 	bl	80034ac <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 800327c:	4825      	ldr	r0, [pc, #148]	; (8003314 <main+0xc8>)
 800327e:	f006 fa79 	bl	8009774 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim10);			// Using for generate us delays
  HAL_TIM_Base_Start_IT(&htim1);			// Blink Green LED
 8003282:	4825      	ldr	r0, [pc, #148]	; (8003318 <main+0xcc>)
 8003284:	f006 fa76 	bl	8009774 <HAL_TIM_Base_Start_IT>
//  /////////////////////////////////////////////////////////////////////

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003288:	f00d faee 	bl	8010868 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 800328c:	4a23      	ldr	r2, [pc, #140]	; (800331c <main+0xd0>)
 800328e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003292:	200a      	movs	r0, #10
 8003294:	f00d fd22 	bl	8010cdc <osMessageQueueNew>
 8003298:	4603      	mov	r3, r0
 800329a:	4a21      	ldr	r2, [pc, #132]	; (8003320 <main+0xd4>)
 800329c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800329e:	4a21      	ldr	r2, [pc, #132]	; (8003324 <main+0xd8>)
 80032a0:	2100      	movs	r1, #0
 80032a2:	4821      	ldr	r0, [pc, #132]	; (8003328 <main+0xdc>)
 80032a4:	f00d fb2a 	bl	80108fc <osThreadNew>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4a20      	ldr	r2, [pc, #128]	; (800332c <main+0xe0>)
 80032ac:	6013      	str	r3, [r2, #0]

  /* creation of Blue_LED_Blink */
  Blue_LED_BlinkHandle = osThreadNew(Start_Blue_LED_Blink, NULL, &Blue_LED_Blink_attributes);
 80032ae:	4a20      	ldr	r2, [pc, #128]	; (8003330 <main+0xe4>)
 80032b0:	2100      	movs	r1, #0
 80032b2:	4820      	ldr	r0, [pc, #128]	; (8003334 <main+0xe8>)
 80032b4:	f00d fb22 	bl	80108fc <osThreadNew>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <main+0xec>)
 80032bc:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <main+0xf0>)
 80032c0:	2100      	movs	r1, #0
 80032c2:	481f      	ldr	r0, [pc, #124]	; (8003340 <main+0xf4>)
 80032c4:	f00d fb1a 	bl	80108fc <osThreadNew>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <main+0xf8>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 80032ce:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <main+0xfc>)
 80032d0:	2100      	movs	r1, #0
 80032d2:	481e      	ldr	r0, [pc, #120]	; (800334c <main+0x100>)
 80032d4:	f00d fb12 	bl	80108fc <osThreadNew>
 80032d8:	4603      	mov	r3, r0
 80032da:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <main+0x104>)
 80032dc:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 80032de:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <main+0x108>)
 80032e0:	2100      	movs	r1, #0
 80032e2:	481d      	ldr	r0, [pc, #116]	; (8003358 <main+0x10c>)
 80032e4:	f00d fb0a 	bl	80108fc <osThreadNew>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a1c      	ldr	r2, [pc, #112]	; (800335c <main+0x110>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* creation of AM2302 */
  AM2302Handle = osThreadNew(Start_AM2302, NULL, &AM2302_attributes);
 80032ee:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <main+0x114>)
 80032f0:	2100      	movs	r1, #0
 80032f2:	481c      	ldr	r0, [pc, #112]	; (8003364 <main+0x118>)
 80032f4:	f00d fb02 	bl	80108fc <osThreadNew>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <main+0x11c>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* creation of SD_CARD */
  SD_CARDHandle = osThreadNew(Start_SD_CARD, NULL, &SD_CARD_attributes);
 80032fe:	4a1b      	ldr	r2, [pc, #108]	; (800336c <main+0x120>)
 8003300:	2100      	movs	r1, #0
 8003302:	481b      	ldr	r0, [pc, #108]	; (8003370 <main+0x124>)
 8003304:	f00d fafa 	bl	80108fc <osThreadNew>
 8003308:	4603      	mov	r3, r0
 800330a:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <main+0x128>)
 800330c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800330e:	f00d facf 	bl	80108b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003312:	e7fe      	b.n	8003312 <main+0xc6>
 8003314:	2000db50 	.word	0x2000db50
 8003318:	2000ed3c 	.word	0x2000ed3c
 800331c:	080188dc 	.word	0x080188dc
 8003320:	2000a34c 	.word	0x2000a34c
 8003324:	080187e0 	.word	0x080187e0
 8003328:	08003aa5 	.word	0x08003aa5
 800332c:	20008078 	.word	0x20008078
 8003330:	08018804 	.word	0x08018804
 8003334:	08003ab9 	.word	0x08003ab9
 8003338:	20009160 	.word	0x20009160
 800333c:	08018828 	.word	0x08018828
 8003340:	08003d35 	.word	0x08003d35
 8003344:	2000ef90 	.word	0x2000ef90
 8003348:	0801884c 	.word	0x0801884c
 800334c:	08003fa5 	.word	0x08003fa5
 8003350:	2000db98 	.word	0x2000db98
 8003354:	08018870 	.word	0x08018870
 8003358:	08004001 	.word	0x08004001
 800335c:	200111b8 	.word	0x200111b8
 8003360:	08018894 	.word	0x08018894
 8003364:	08004379 	.word	0x08004379
 8003368:	2000ef88 	.word	0x2000ef88
 800336c:	080188b8 	.word	0x080188b8
 8003370:	08004735 	.word	0x08004735
 8003374:	2000a1c8 	.word	0x2000a1c8

08003378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b094      	sub	sp, #80	; 0x50
 800337c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800337e:	f107 0320 	add.w	r3, r7, #32
 8003382:	2230      	movs	r2, #48	; 0x30
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f012 f840 	bl	801540c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800338c:	f107 030c 	add.w	r3, r7, #12
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	4b29      	ldr	r3, [pc, #164]	; (8003448 <SystemClock_Config+0xd0>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	4a28      	ldr	r2, [pc, #160]	; (8003448 <SystemClock_Config+0xd0>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6413      	str	r3, [r2, #64]	; 0x40
 80033ac:	4b26      	ldr	r3, [pc, #152]	; (8003448 <SystemClock_Config+0xd0>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b8:	2300      	movs	r3, #0
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <SystemClock_Config+0xd4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a22      	ldr	r2, [pc, #136]	; (800344c <SystemClock_Config+0xd4>)
 80033c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b20      	ldr	r3, [pc, #128]	; (800344c <SystemClock_Config+0xd4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80033d4:	2305      	movs	r3, #5
 80033d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80033de:	2301      	movs	r3, #1
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e2:	2302      	movs	r3, #2
 80033e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033ec:	2308      	movs	r3, #8
 80033ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80033f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80033f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033f6:	2302      	movs	r3, #2
 80033f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80033fa:	2307      	movs	r3, #7
 80033fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033fe:	f107 0320 	add.w	r3, r7, #32
 8003402:	4618      	mov	r0, r3
 8003404:	f004 fccc 	bl	8007da0 <HAL_RCC_OscConfig>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800340e:	f001 fa53 	bl	80048b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003412:	230f      	movs	r3, #15
 8003414:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003416:	2302      	movs	r3, #2
 8003418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800341e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003422:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003428:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	2105      	movs	r1, #5
 8003430:	4618      	mov	r0, r3
 8003432:	f004 ff2d 	bl	8008290 <HAL_RCC_ClockConfig>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800343c:	f001 fa3c 	bl	80048b8 <Error_Handler>
  }
}
 8003440:	bf00      	nop
 8003442:	3750      	adds	r7, #80	; 0x50
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40023800 	.word	0x40023800
 800344c:	40007000 	.word	0x40007000

08003450 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <MX_I2C3_Init+0x50>)
 8003456:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <MX_I2C3_Init+0x54>)
 8003458:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <MX_I2C3_Init+0x50>)
 800345c:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <MX_I2C3_Init+0x58>)
 800345e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <MX_I2C3_Init+0x50>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <MX_I2C3_Init+0x50>)
 8003468:	2200      	movs	r2, #0
 800346a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <MX_I2C3_Init+0x50>)
 800346e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003472:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <MX_I2C3_Init+0x50>)
 8003476:	2200      	movs	r2, #0
 8003478:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <MX_I2C3_Init+0x50>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <MX_I2C3_Init+0x50>)
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <MX_I2C3_Init+0x50>)
 8003488:	2200      	movs	r2, #0
 800348a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800348c:	4804      	ldr	r0, [pc, #16]	; (80034a0 <MX_I2C3_Init+0x50>)
 800348e:	f002 f861 	bl	8005554 <HAL_I2C_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003498:	f001 fa0e 	bl	80048b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	200080bc 	.word	0x200080bc
 80034a4:	40005c00 	.word	0x40005c00
 80034a8:	000186a0 	.word	0x000186a0

080034ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b090      	sub	sp, #64	; 0x40
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80034b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80034c2:	2300      	movs	r3, #0
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80034c6:	463b      	mov	r3, r7
 80034c8:	2228      	movs	r2, #40	; 0x28
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f011 ff9d 	bl	801540c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <MX_RTC_Init+0xe4>)
 80034d4:	4a2f      	ldr	r2, [pc, #188]	; (8003594 <MX_RTC_Init+0xe8>)
 80034d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034d8:	4b2d      	ldr	r3, [pc, #180]	; (8003590 <MX_RTC_Init+0xe4>)
 80034da:	2200      	movs	r2, #0
 80034dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80034de:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <MX_RTC_Init+0xe4>)
 80034e0:	227f      	movs	r2, #127	; 0x7f
 80034e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80034e4:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <MX_RTC_Init+0xe4>)
 80034e6:	22ff      	movs	r2, #255	; 0xff
 80034e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034ea:	4b29      	ldr	r3, [pc, #164]	; (8003590 <MX_RTC_Init+0xe4>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80034f0:	4b27      	ldr	r3, [pc, #156]	; (8003590 <MX_RTC_Init+0xe4>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <MX_RTC_Init+0xe4>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80034fc:	4824      	ldr	r0, [pc, #144]	; (8003590 <MX_RTC_Init+0xe4>)
 80034fe:	f005 f9c3 	bl	8008888 <HAL_RTC_Init>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003508:	f001 f9d6 	bl	80048b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 800350c:	2323      	movs	r3, #35	; 0x23
 800350e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 8003512:	2359      	movs	r3, #89	; 0x59
 8003514:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 8003518:	2345      	movs	r3, #69	; 0x45
 800351a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800351e:	2300      	movs	r3, #0
 8003520:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	63fb      	str	r3, [r7, #60]	; 0x3c
//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8003526:	2302      	movs	r3, #2
 8003528:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 800352c:	2312      	movs	r3, #18
 800352e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x28;
 8003532:	2328      	movs	r3, #40	; 0x28
 8003534:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
//  {
//    Error_Handler();
//  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800353e:	2300      	movs	r3, #0
 8003540:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003542:	2300      	movs	r3, #0
 8003544:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 8003546:	2310      	movs	r3, #16
 8003548:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800355e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003562:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800356a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003570:	463b      	mov	r3, r7
 8003572:	2201      	movs	r2, #1
 8003574:	4619      	mov	r1, r3
 8003576:	4806      	ldr	r0, [pc, #24]	; (8003590 <MX_RTC_Init+0xe4>)
 8003578:	f005 fac4 	bl	8008b04 <HAL_RTC_SetAlarm>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_RTC_Init+0xda>
  {
    Error_Handler();
 8003582:	f001 f999 	bl	80048b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	3740      	adds	r7, #64	; 0x40
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000db9c 	.word	0x2000db9c
 8003594:	40002800 	.word	0x40002800

08003598 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <MX_SPI1_Init+0x64>)
 800359e:	4a18      	ldr	r2, [pc, #96]	; (8003600 <MX_SPI1_Init+0x68>)
 80035a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035a2:	4b16      	ldr	r3, [pc, #88]	; (80035fc <MX_SPI1_Init+0x64>)
 80035a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <MX_SPI1_Init+0x64>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <MX_SPI1_Init+0x64>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035b6:	4b11      	ldr	r3, [pc, #68]	; (80035fc <MX_SPI1_Init+0x64>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <MX_SPI1_Init+0x64>)
 80035be:	2200      	movs	r2, #0
 80035c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <MX_SPI1_Init+0x64>)
 80035c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <MX_SPI1_Init+0x64>)
 80035cc:	2220      	movs	r2, #32
 80035ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <MX_SPI1_Init+0x64>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <MX_SPI1_Init+0x64>)
 80035d8:	2200      	movs	r2, #0
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <MX_SPI1_Init+0x64>)
 80035de:	2200      	movs	r2, #0
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <MX_SPI1_Init+0x64>)
 80035e4:	220a      	movs	r2, #10
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035e8:	4804      	ldr	r0, [pc, #16]	; (80035fc <MX_SPI1_Init+0x64>)
 80035ea:	f005 fc33 	bl	8008e54 <HAL_SPI_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80035f4:	f001 f960 	bl	80048b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	2000ef94 	.word	0x2000ef94
 8003600:	40013000 	.word	0x40013000

08003604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800360a:	f107 0308 	add.w	r3, r7, #8
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003618:	463b      	mov	r3, r7
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003620:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <MX_TIM1_Init+0x9c>)
 8003622:	4a20      	ldr	r2, [pc, #128]	; (80036a4 <MX_TIM1_Init+0xa0>)
 8003624:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 8003626:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <MX_TIM1_Init+0x9c>)
 8003628:	f244 129f 	movw	r2, #16799	; 0x419f
 800362c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <MX_TIM1_Init+0x9c>)
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8003634:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <MX_TIM1_Init+0x9c>)
 8003636:	f242 7210 	movw	r2, #10000	; 0x2710
 800363a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <MX_TIM1_Init+0x9c>)
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <MX_TIM1_Init+0x9c>)
 8003644:	2200      	movs	r2, #0
 8003646:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <MX_TIM1_Init+0x9c>)
 800364a:	2200      	movs	r2, #0
 800364c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800364e:	4814      	ldr	r0, [pc, #80]	; (80036a0 <MX_TIM1_Init+0x9c>)
 8003650:	f006 f840 	bl	80096d4 <HAL_TIM_Base_Init>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800365a:	f001 f92d 	bl	80048b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800365e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003662:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003664:	f107 0308 	add.w	r3, r7, #8
 8003668:	4619      	mov	r1, r3
 800366a:	480d      	ldr	r0, [pc, #52]	; (80036a0 <MX_TIM1_Init+0x9c>)
 800366c:	f006 fa29 	bl	8009ac2 <HAL_TIM_ConfigClockSource>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003676:	f001 f91f 	bl	80048b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800367a:	2320      	movs	r3, #32
 800367c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003682:	463b      	mov	r3, r7
 8003684:	4619      	mov	r1, r3
 8003686:	4806      	ldr	r0, [pc, #24]	; (80036a0 <MX_TIM1_Init+0x9c>)
 8003688:	f006 fc44 	bl	8009f14 <HAL_TIMEx_MasterConfigSynchronization>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003692:	f001 f911 	bl	80048b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	2000ed3c 	.word	0x2000ed3c
 80036a4:	40010000 	.word	0x40010000

080036a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ae:	f107 0308 	add.w	r3, r7, #8
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036bc:	463b      	mov	r3, r7
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <MX_TIM2_Init+0x94>)
 80036c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <MX_TIM2_Init+0x94>)
 80036ce:	220a      	movs	r2, #10
 80036d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <MX_TIM2_Init+0x94>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80036d8:	4b18      	ldr	r3, [pc, #96]	; (800373c <MX_TIM2_Init+0x94>)
 80036da:	220a      	movs	r2, #10
 80036dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <MX_TIM2_Init+0x94>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e4:	4b15      	ldr	r3, [pc, #84]	; (800373c <MX_TIM2_Init+0x94>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036ea:	4814      	ldr	r0, [pc, #80]	; (800373c <MX_TIM2_Init+0x94>)
 80036ec:	f005 fff2 	bl	80096d4 <HAL_TIM_Base_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80036f6:	f001 f8df 	bl	80048b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003700:	f107 0308 	add.w	r3, r7, #8
 8003704:	4619      	mov	r1, r3
 8003706:	480d      	ldr	r0, [pc, #52]	; (800373c <MX_TIM2_Init+0x94>)
 8003708:	f006 f9db 	bl	8009ac2 <HAL_TIM_ConfigClockSource>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003712:	f001 f8d1 	bl	80048b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003716:	2300      	movs	r3, #0
 8003718:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800371a:	2300      	movs	r3, #0
 800371c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800371e:	463b      	mov	r3, r7
 8003720:	4619      	mov	r1, r3
 8003722:	4806      	ldr	r0, [pc, #24]	; (800373c <MX_TIM2_Init+0x94>)
 8003724:	f006 fbf6 	bl	8009f14 <HAL_TIMEx_MasterConfigSynchronization>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800372e:	f001 f8c3 	bl	80048b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003732:	bf00      	nop
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	2000f0ac 	.word	0x2000f0ac

08003740 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003746:	f107 0308 	add.w	r3, r7, #8
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	605a      	str	r2, [r3, #4]
 8003750:	609a      	str	r2, [r3, #8]
 8003752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003754:	463b      	mov	r3, r7
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <MX_TIM3_Init+0x94>)
 800375e:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <MX_TIM3_Init+0x98>)
 8003760:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8003762:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <MX_TIM3_Init+0x94>)
 8003764:	f240 3247 	movw	r2, #839	; 0x347
 8003768:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <MX_TIM3_Init+0x94>)
 800376c:	2200      	movs	r2, #0
 800376e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <MX_TIM3_Init+0x94>)
 8003772:	220a      	movs	r2, #10
 8003774:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <MX_TIM3_Init+0x94>)
 8003778:	2200      	movs	r2, #0
 800377a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800377c:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <MX_TIM3_Init+0x94>)
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003782:	4814      	ldr	r0, [pc, #80]	; (80037d4 <MX_TIM3_Init+0x94>)
 8003784:	f005 ffa6 	bl	80096d4 <HAL_TIM_Base_Init>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800378e:	f001 f893 	bl	80048b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003796:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003798:	f107 0308 	add.w	r3, r7, #8
 800379c:	4619      	mov	r1, r3
 800379e:	480d      	ldr	r0, [pc, #52]	; (80037d4 <MX_TIM3_Init+0x94>)
 80037a0:	f006 f98f 	bl	8009ac2 <HAL_TIM_ConfigClockSource>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80037aa:	f001 f885 	bl	80048b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037b6:	463b      	mov	r3, r7
 80037b8:	4619      	mov	r1, r3
 80037ba:	4806      	ldr	r0, [pc, #24]	; (80037d4 <MX_TIM3_Init+0x94>)
 80037bc:	f006 fbaa 	bl	8009f14 <HAL_TIMEx_MasterConfigSynchronization>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80037c6:	f001 f877 	bl	80048b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	2000db50 	.word	0x2000db50
 80037d8:	40000400 	.word	0x40000400

080037dc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80037e0:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <MX_TIM10_Init+0x3c>)
 80037e2:	4a0e      	ldr	r2, [pc, #56]	; (800381c <MX_TIM10_Init+0x40>)
 80037e4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80037e6:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <MX_TIM10_Init+0x3c>)
 80037e8:	22a7      	movs	r2, #167	; 0xa7
 80037ea:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <MX_TIM10_Init+0x3c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <MX_TIM10_Init+0x3c>)
 80037f4:	2209      	movs	r2, #9
 80037f6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f8:	4b07      	ldr	r3, [pc, #28]	; (8003818 <MX_TIM10_Init+0x3c>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <MX_TIM10_Init+0x3c>)
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003804:	4804      	ldr	r0, [pc, #16]	; (8003818 <MX_TIM10_Init+0x3c>)
 8003806:	f005 ff65 	bl	80096d4 <HAL_TIM_Base_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8003810:	f001 f852 	bl	80048b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20009180 	.word	0x20009180
 800381c:	40014400 	.word	0x40014400

08003820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003826:	f107 031c 	add.w	r3, r7, #28
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	60da      	str	r2, [r3, #12]
 8003834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	4b94      	ldr	r3, [pc, #592]	; (8003a8c <MX_GPIO_Init+0x26c>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	4a93      	ldr	r2, [pc, #588]	; (8003a8c <MX_GPIO_Init+0x26c>)
 8003840:	f043 0310 	orr.w	r3, r3, #16
 8003844:	6313      	str	r3, [r2, #48]	; 0x30
 8003846:	4b91      	ldr	r3, [pc, #580]	; (8003a8c <MX_GPIO_Init+0x26c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	4b8d      	ldr	r3, [pc, #564]	; (8003a8c <MX_GPIO_Init+0x26c>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a8c      	ldr	r2, [pc, #560]	; (8003a8c <MX_GPIO_Init+0x26c>)
 800385c:	f043 0304 	orr.w	r3, r3, #4
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b8a      	ldr	r3, [pc, #552]	; (8003a8c <MX_GPIO_Init+0x26c>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	4b86      	ldr	r3, [pc, #536]	; (8003a8c <MX_GPIO_Init+0x26c>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	4a85      	ldr	r2, [pc, #532]	; (8003a8c <MX_GPIO_Init+0x26c>)
 8003878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387c:	6313      	str	r3, [r2, #48]	; 0x30
 800387e:	4b83      	ldr	r3, [pc, #524]	; (8003a8c <MX_GPIO_Init+0x26c>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b7f      	ldr	r3, [pc, #508]	; (8003a8c <MX_GPIO_Init+0x26c>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a7e      	ldr	r2, [pc, #504]	; (8003a8c <MX_GPIO_Init+0x26c>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b7c      	ldr	r3, [pc, #496]	; (8003a8c <MX_GPIO_Init+0x26c>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	4b78      	ldr	r3, [pc, #480]	; (8003a8c <MX_GPIO_Init+0x26c>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4a77      	ldr	r2, [pc, #476]	; (8003a8c <MX_GPIO_Init+0x26c>)
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	6313      	str	r3, [r2, #48]	; 0x30
 80038b6:	4b75      	ldr	r3, [pc, #468]	; (8003a8c <MX_GPIO_Init+0x26c>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	4b71      	ldr	r3, [pc, #452]	; (8003a8c <MX_GPIO_Init+0x26c>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4a70      	ldr	r2, [pc, #448]	; (8003a8c <MX_GPIO_Init+0x26c>)
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	6313      	str	r3, [r2, #48]	; 0x30
 80038d2:	4b6e      	ldr	r3, [pc, #440]	; (8003a8c <MX_GPIO_Init+0x26c>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80038de:	2200      	movs	r2, #0
 80038e0:	2108      	movs	r1, #8
 80038e2:	486b      	ldr	r0, [pc, #428]	; (8003a90 <MX_GPIO_Init+0x270>)
 80038e4:	f001 fe02 	bl	80054ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80038e8:	2201      	movs	r2, #1
 80038ea:	2101      	movs	r1, #1
 80038ec:	4869      	ldr	r0, [pc, #420]	; (8003a94 <MX_GPIO_Init+0x274>)
 80038ee:	f001 fdfd 	bl	80054ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 80038f2:	2200      	movs	r2, #0
 80038f4:	2142      	movs	r1, #66	; 0x42
 80038f6:	4867      	ldr	r0, [pc, #412]	; (8003a94 <MX_GPIO_Init+0x274>)
 80038f8:	f001 fdf8 	bl	80054ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80038fc:	2200      	movs	r2, #0
 80038fe:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003902:	4865      	ldr	r0, [pc, #404]	; (8003a98 <MX_GPIO_Init+0x278>)
 8003904:	f001 fdf2 	bl	80054ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003908:	2308      	movs	r3, #8
 800390a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800390c:	2301      	movs	r3, #1
 800390e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	2300      	movs	r3, #0
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003914:	2300      	movs	r3, #0
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003918:	f107 031c 	add.w	r3, r7, #28
 800391c:	4619      	mov	r1, r3
 800391e:	485c      	ldr	r0, [pc, #368]	; (8003a90 <MX_GPIO_Init+0x270>)
 8003920:	f001 fc48 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 8003924:	2303      	movs	r3, #3
 8003926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003928:	2301      	movs	r3, #1
 800392a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003930:	2300      	movs	r3, #0
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003934:	f107 031c 	add.w	r3, r7, #28
 8003938:	4619      	mov	r1, r3
 800393a:	4856      	ldr	r0, [pc, #344]	; (8003a94 <MX_GPIO_Init+0x274>)
 800393c:	f001 fc3a 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003940:	2308      	movs	r3, #8
 8003942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	2300      	movs	r3, #0
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003950:	2305      	movs	r3, #5
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003954:	f107 031c 	add.w	r3, r7, #28
 8003958:	4619      	mov	r1, r3
 800395a:	484e      	ldr	r0, [pc, #312]	; (8003a94 <MX_GPIO_Init+0x274>)
 800395c:	f001 fc2a 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003960:	2301      	movs	r3, #1
 8003962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003964:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800396e:	f107 031c 	add.w	r3, r7, #28
 8003972:	4619      	mov	r1, r3
 8003974:	4849      	ldr	r0, [pc, #292]	; (8003a9c <MX_GPIO_Init+0x27c>)
 8003976:	f001 fc1d 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800397a:	2310      	movs	r3, #16
 800397c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397e:	2302      	movs	r3, #2
 8003980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003986:	2300      	movs	r3, #0
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800398a:	2306      	movs	r3, #6
 800398c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800398e:	f107 031c 	add.w	r3, r7, #28
 8003992:	4619      	mov	r1, r3
 8003994:	4841      	ldr	r0, [pc, #260]	; (8003a9c <MX_GPIO_Init+0x27c>)
 8003996:	f001 fc0d 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800399a:	2304      	movs	r3, #4
 800399c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800399e:	2300      	movs	r3, #0
 80039a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80039a6:	f107 031c 	add.w	r3, r7, #28
 80039aa:	4619      	mov	r1, r3
 80039ac:	483c      	ldr	r0, [pc, #240]	; (8003aa0 <MX_GPIO_Init+0x280>)
 80039ae:	f001 fc01 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80039b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039c4:	2305      	movs	r3, #5
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80039c8:	f107 031c 	add.w	r3, r7, #28
 80039cc:	4619      	mov	r1, r3
 80039ce:	4834      	ldr	r0, [pc, #208]	; (8003aa0 <MX_GPIO_Init+0x280>)
 80039d0:	f001 fbf0 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80039d4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80039d8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039da:	2301      	movs	r3, #1
 80039dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039e6:	f107 031c 	add.w	r3, r7, #28
 80039ea:	4619      	mov	r1, r3
 80039ec:	482a      	ldr	r0, [pc, #168]	; (8003a98 <MX_GPIO_Init+0x278>)
 80039ee:	f001 fbe1 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 80039f2:	2340      	movs	r3, #64	; 0x40
 80039f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f6:	2301      	movs	r3, #1
 80039f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039fe:	2302      	movs	r3, #2
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 8003a02:	f107 031c 	add.w	r3, r7, #28
 8003a06:	4619      	mov	r1, r3
 8003a08:	4822      	ldr	r0, [pc, #136]	; (8003a94 <MX_GPIO_Init+0x274>)
 8003a0a:	f001 fbd3 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003a0e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a14:	2302      	movs	r3, #2
 8003a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a20:	2306      	movs	r3, #6
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a24:	f107 031c 	add.w	r3, r7, #28
 8003a28:	4619      	mov	r1, r3
 8003a2a:	481a      	ldr	r0, [pc, #104]	; (8003a94 <MX_GPIO_Init+0x274>)
 8003a2c:	f001 fbc2 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003a30:	2320      	movs	r3, #32
 8003a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a34:	2300      	movs	r3, #0
 8003a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003a3c:	f107 031c 	add.w	r3, r7, #28
 8003a40:	4619      	mov	r1, r3
 8003a42:	4815      	ldr	r0, [pc, #84]	; (8003a98 <MX_GPIO_Init+0x278>)
 8003a44:	f001 fbb6 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003a48:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a4e:	2312      	movs	r3, #18
 8003a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a52:	2301      	movs	r3, #1
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a56:	2300      	movs	r3, #0
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5e:	f107 031c 	add.w	r3, r7, #28
 8003a62:	4619      	mov	r1, r3
 8003a64:	480e      	ldr	r0, [pc, #56]	; (8003aa0 <MX_GPIO_Init+0x280>)
 8003a66:	f001 fba5 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003a6e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003a78:	f107 031c 	add.w	r3, r7, #28
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4804      	ldr	r0, [pc, #16]	; (8003a90 <MX_GPIO_Init+0x270>)
 8003a80:	f001 fb98 	bl	80051b4 <HAL_GPIO_Init>

}
 8003a84:	bf00      	nop
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40020800 	.word	0x40020800
 8003a98:	40020c00 	.word	0x40020c00
 8003a9c:	40020000 	.word	0x40020000
 8003aa0:	40020400 	.word	0x40020400

08003aa4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003aac:	f010 fe2a 	bl	8014704 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	f00c ffb5 	bl	8010a20 <osDelay>
 8003ab6:	e7fb      	b.n	8003ab0 <StartDefaultTask+0xc>

08003ab8 <Start_Blue_LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Blue_LED_Blink */
void Start_Blue_LED_Blink(void *argument)
{
 8003ab8:	b5b0      	push	{r4, r5, r7, lr}
 8003aba:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	1d3b      	adds	r3, r7, #4
 8003ac2:	6018      	str	r0, [r3, #0]
	 * For STM32F407 discovery dev board needs remove R26, and connect battery to VBAT (near R26).
	 * Also, need solder the LF Crystal and two capacitors.
	 */

	// 1. Set time
	  RTC_TimeTypeDef sTime = {0};
 8003ac4:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	611a      	str	r2, [r3, #16]
//	  sTime.Minutes = 33;
//	  sTime.Seconds = 00;
//	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
	  // Set date

	  RTC_DateTypeDef sDate = {0};
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
//	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
	  /////////////////////////////////////////////////////////////////////

	QUEUE_t msg;												// Make a queue

	char buff[50] = {0};
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	222e      	movs	r2, #46	; 0x2e
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f011 fc8f 	bl	801540c <memset>
	char buf[5] = {0};
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	711a      	strb	r2, [r3, #4]
	char str_end_of_line[4] = {'\r','\n','\0'};
 8003afa:	f107 0308 	add.w	r3, r7, #8
 8003afe:	f640 220d 	movw	r2, #2573	; 0xa0d
 8003b02:	601a      	str	r2, [r3, #0]

	static uint8_t i = 1;
	for(;;)
	{
		// Blue LED blink
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003b04:	2201      	movs	r2, #1
 8003b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b0a:	4883      	ldr	r0, [pc, #524]	; (8003d18 <Start_Blue_LED_Blink+0x260>)
 8003b0c:	f001 fcee 	bl	80054ec <HAL_GPIO_WritePin>
		osDelay(100);
 8003b10:	2064      	movs	r0, #100	; 0x64
 8003b12:	f00c ff85 	bl	8010a20 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8003b16:	2200      	movs	r2, #0
 8003b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b1c:	487e      	ldr	r0, [pc, #504]	; (8003d18 <Start_Blue_LED_Blink+0x260>)
 8003b1e:	f001 fce5 	bl	80054ec <HAL_GPIO_WritePin>
		osDelay(900);
 8003b22:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003b26:	f00c ff7b 	bl	8010a20 <osDelay>

		// RTC part
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);						// Get time (write in sDime struct)
 8003b2a:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4619      	mov	r1, r3
 8003b32:	487a      	ldr	r0, [pc, #488]	; (8003d1c <Start_Blue_LED_Blink+0x264>)
 8003b34:	f004 ff39 	bl	80089aa <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);						// Get data (write in sDime struct)
 8003b38:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4876      	ldr	r0, [pc, #472]	; (8003d1c <Start_Blue_LED_Blink+0x264>)
 8003b42:	f004 ff90 	bl	8008a66 <HAL_RTC_GetDate>

		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8003b46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f011 fc5b 	bl	801540c <memset>
		memset(buff, 0, sizeof(buff));
 8003b56:	f107 0314 	add.w	r3, r7, #20
 8003b5a:	2232      	movs	r2, #50	; 0x32
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f011 fc54 	bl	801540c <memset>

		strcat(msg.Buf, "RTC DATA AND TIME >>>>>>>    " );
 8003b64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fc fb31 	bl	80001d0 <strlen>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b76:	4413      	add	r3, r2
 8003b78:	4a69      	ldr	r2, [pc, #420]	; (8003d20 <Start_Blue_LED_Blink+0x268>)
 8003b7a:	461d      	mov	r5, r3
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b80:	6028      	str	r0, [r5, #0]
 8003b82:	6069      	str	r1, [r5, #4]
 8003b84:	60aa      	str	r2, [r5, #8]
 8003b86:	60eb      	str	r3, [r5, #12]
 8003b88:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003b8a:	6128      	str	r0, [r5, #16]
 8003b8c:	6169      	str	r1, [r5, #20]
 8003b8e:	61aa      	str	r2, [r5, #24]
 8003b90:	8823      	ldrh	r3, [r4, #0]
 8003b92:	83ab      	strh	r3, [r5, #28]

		// Date
		itoa(sDate.Year, buf, 10);
 8003b94:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	220a      	movs	r2, #10
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f011 fc0f 	bl	80153c4 <itoa>
		strcat(msg.Buf, buf);
 8003ba6:	f107 020c 	add.w	r2, r7, #12
 8003baa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f012 fa24 	bl	8015ffe <strcat>

		itoa(sDate.Month, buf, 10);
 8003bb6:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f107 030c 	add.w	r3, r7, #12
 8003bc0:	220a      	movs	r2, #10
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f011 fbfe 	bl	80153c4 <itoa>
		strcat(msg.Buf, "-");
 8003bc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fc faff 	bl	80001d0 <strlen>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bda:	4413      	add	r3, r2
 8003bdc:	4951      	ldr	r1, [pc, #324]	; (8003d24 <Start_Blue_LED_Blink+0x26c>)
 8003bde:	461a      	mov	r2, r3
 8003be0:	460b      	mov	r3, r1
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003be6:	f107 020c 	add.w	r2, r7, #12
 8003bea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f012 fa04 	bl	8015ffe <strcat>

		itoa(sDate.Date, buf, 10);
 8003bf6:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f107 030c 	add.w	r3, r7, #12
 8003c00:	220a      	movs	r2, #10
 8003c02:	4619      	mov	r1, r3
 8003c04:	f011 fbde 	bl	80153c4 <itoa>
		strcat(msg.Buf, "-");
 8003c08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fc fadf 	bl	80001d0 <strlen>
 8003c12:	4603      	mov	r3, r0
 8003c14:	461a      	mov	r2, r3
 8003c16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c1a:	4413      	add	r3, r2
 8003c1c:	4941      	ldr	r1, [pc, #260]	; (8003d24 <Start_Blue_LED_Blink+0x26c>)
 8003c1e:	461a      	mov	r2, r3
 8003c20:	460b      	mov	r3, r1
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003c26:	f107 020c 	add.w	r2, r7, #12
 8003c2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f012 f9e4 	bl	8015ffe <strcat>

		strcat(msg.Buf, " | ");
 8003c36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fc fac8 	bl	80001d0 <strlen>
 8003c40:	4603      	mov	r3, r0
 8003c42:	461a      	mov	r2, r3
 8003c44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c48:	4413      	add	r3, r2
 8003c4a:	4a37      	ldr	r2, [pc, #220]	; (8003d28 <Start_Blue_LED_Blink+0x270>)
 8003c4c:	6810      	ldr	r0, [r2, #0]
 8003c4e:	6018      	str	r0, [r3, #0]

		// Time
		itoa(sTime.Hours, buf, 10);
 8003c50:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 8003c54:	4618      	mov	r0, r3
 8003c56:	f107 030c 	add.w	r3, r7, #12
 8003c5a:	220a      	movs	r2, #10
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f011 fbb1 	bl	80153c4 <itoa>
		strcat(msg.Buf, buf);
 8003c62:	f107 020c 	add.w	r2, r7, #12
 8003c66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f012 f9c6 	bl	8015ffe <strcat>

		itoa(sTime.Minutes, buf, 10);
 8003c72:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 8003c76:	4618      	mov	r0, r3
 8003c78:	f107 030c 	add.w	r3, r7, #12
 8003c7c:	220a      	movs	r2, #10
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f011 fba0 	bl	80153c4 <itoa>
		strcat(msg.Buf, ":");
 8003c84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc faa1 	bl	80001d0 <strlen>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	461a      	mov	r2, r3
 8003c92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c96:	4413      	add	r3, r2
 8003c98:	4924      	ldr	r1, [pc, #144]	; (8003d2c <Start_Blue_LED_Blink+0x274>)
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003ca2:	f107 020c 	add.w	r2, r7, #12
 8003ca6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003caa:	4611      	mov	r1, r2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f012 f9a6 	bl	8015ffe <strcat>

		itoa(sTime.Seconds, buf, 10);
 8003cb2:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	220a      	movs	r2, #10
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f011 fb80 	bl	80153c4 <itoa>
		strcat(msg.Buf, ":");
 8003cc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc fa81 	bl	80001d0 <strlen>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cd6:	4413      	add	r3, r2
 8003cd8:	4914      	ldr	r1, [pc, #80]	; (8003d2c <Start_Blue_LED_Blink+0x274>)
 8003cda:	461a      	mov	r2, r3
 8003cdc:	460b      	mov	r3, r1
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003ce2:	f107 020c 	add.w	r2, r7, #12
 8003ce6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f012 f986 	bl	8015ffe <strcat>

		strcat(msg.Buf, str_end_of_line);
 8003cf2:	f107 0208 	add.w	r2, r7, #8
 8003cf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f012 f97e 	bl	8015ffe <strcat>
		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <Start_Blue_LED_Blink+0x278>)
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f00d f858 	bl	8010dc4 <osMessageQueuePut>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003d14:	e6f6      	b.n	8003b04 <Start_Blue_LED_Blink+0x4c>
 8003d16:	bf00      	nop
 8003d18:	40020c00 	.word	0x40020c00
 8003d1c:	2000db9c 	.word	0x2000db9c
 8003d20:	0801853c 	.word	0x0801853c
 8003d24:	0801855c 	.word	0x0801855c
 8003d28:	08018560 	.word	0x08018560
 8003d2c:	08018564 	.word	0x08018564
 8003d30:	2000a34c 	.word	0x2000a34c

08003d34 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8003d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d36:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8003d40:	f241 3088 	movw	r0, #5000	; 0x1388
 8003d44:	f00c fe6c 	bl	8010a20 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8003d48:	4a8d      	ldr	r2, [pc, #564]	; (8003f80 <Start_Show_Resources+0x24c>)
 8003d4a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	4611      	mov	r1, r2
 8003d52:	8019      	strh	r1, [r3, #0]
 8003d54:	3302      	adds	r3, #2
 8003d56:	0c12      	lsrs	r2, r2, #16
 8003d58:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8003d5a:	232d      	movs	r3, #45	; 0x2d
 8003d5c:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	  char buff[10] = {0};
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8003d66:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8003d70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f011 fb46 	bl	801540c <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8003d80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fc fa23 	bl	80001d0 <strlen>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d92:	4413      	add	r3, r2
 8003d94:	4a7b      	ldr	r2, [pc, #492]	; (8003f84 <Start_Show_Resources+0x250>)
 8003d96:	461d      	mov	r5, r3
 8003d98:	4614      	mov	r4, r2
 8003d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d9c:	6028      	str	r0, [r5, #0]
 8003d9e:	6069      	str	r1, [r5, #4]
 8003da0:	60aa      	str	r2, [r5, #8]
 8003da2:	60eb      	str	r3, [r5, #12]
 8003da4:	cc03      	ldmia	r4!, {r0, r1}
 8003da6:	6128      	str	r0, [r5, #16]
 8003da8:	6169      	str	r1, [r5, #20]
 8003daa:	7823      	ldrb	r3, [r4, #0]
 8003dac:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8003dae:	f010 fbe1 	bl	8014574 <xPortGetFreeHeapSize>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b74      	ldr	r3, [pc, #464]	; (8003f88 <Start_Show_Resources+0x254>)
 8003db8:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8003dba:	4b73      	ldr	r3, [pc, #460]	; (8003f88 <Start_Show_Resources+0x254>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8003dc2:	220a      	movs	r2, #10
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f011 fafd 	bl	80153c4 <itoa>
	  strcat(msg.Buf, buff);
 8003dca:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8003dce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f012 f912 	bl	8015ffe <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8003dda:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8003dde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f012 f90a 	bl	8015ffe <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME           | STATUS |   PRIOR	|  STACK  |    NUM  |\n\r\0");
 8003dea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fc f9ee 	bl	80001d0 <strlen>
 8003df4:	4603      	mov	r3, r0
 8003df6:	461a      	mov	r2, r3
 8003df8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dfc:	4413      	add	r3, r2
 8003dfe:	4a63      	ldr	r2, [pc, #396]	; (8003f8c <Start_Show_Resources+0x258>)
 8003e00:	4618      	mov	r0, r3
 8003e02:	4611      	mov	r1, r2
 8003e04:	2341      	movs	r3, #65	; 0x41
 8003e06:	461a      	mov	r2, r3
 8003e08:	f011 faf2 	bl	80153f0 <memcpy>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8003e0c:	4860      	ldr	r0, [pc, #384]	; (8003f90 <Start_Show_Resources+0x25c>)
 8003e0e:	f00f fb61 	bl	80134d4 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8003e18:	e004      	b.n	8003e24 <Start_Show_Resources+0xf0>
	  {
	  	buffer_size ++;
 8003e1a:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8003e24:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8003e28:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003e2c:	5cd3      	ldrb	r3, [r2, r3]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f3      	bne.n	8003e1a <Start_Show_Resources+0xe6>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003e3e:	e011      	b.n	8003e64 <Start_Show_Resources+0x130>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003e40:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8003e44:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003e48:	4413      	add	r3, r2
 8003e4a:	4951      	ldr	r1, [pc, #324]	; (8003f90 <Start_Show_Resources+0x25c>)
 8003e4c:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8003e50:	440a      	add	r2, r1
 8003e52:	7811      	ldrb	r1, [r2, #0]
 8003e54:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003e58:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003e5a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003e64:	4a4a      	ldr	r2, [pc, #296]	; (8003f90 <Start_Show_Resources+0x25c>)
 8003e66:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003e6a:	4413      	add	r3, r2
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e6      	bne.n	8003e40 <Start_Show_Resources+0x10c>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8003e72:	4b48      	ldr	r3, [pc, #288]	; (8003f94 <Start_Show_Resources+0x260>)
 8003e74:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 8003e78:	461d      	mov	r5, r3
 8003e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e82:	c403      	stmia	r4!, {r0, r1}
 8003e84:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME           | ABS TIME |              TASK TIME% |\n\r"};
 8003e86:	f107 030c 	add.w	r3, r7, #12
 8003e8a:	4a43      	ldr	r2, [pc, #268]	; (8003f98 <Start_Show_Resources+0x264>)
 8003e8c:	461c      	mov	r4, r3
 8003e8e:	4615      	mov	r5, r2
 8003e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003ea0:	c407      	stmia	r4!, {r0, r1, r2}
 8003ea2:	8023      	strh	r3, [r4, #0]
 8003ea4:	3402      	adds	r4, #2
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	7023      	strb	r3, [r4, #0]
	  strcat(msg.Buf, str_line);
 8003eaa:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8003eae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f012 f8a2 	bl	8015ffe <strcat>
	  strcat(msg.Buf, str_head_2);
 8003eba:	f107 020c 	add.w	r2, r7, #12
 8003ebe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f012 f89a 	bl	8015ffe <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8003eca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ece:	2100      	movs	r1, #0
 8003ed0:	482f      	ldr	r0, [pc, #188]	; (8003f90 <Start_Show_Resources+0x25c>)
 8003ed2:	f011 fa9b 	bl	801540c <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8003ed6:	482e      	ldr	r0, [pc, #184]	; (8003f90 <Start_Show_Resources+0x25c>)
 8003ed8:	f00f fb92 	bl	8013600 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);           // НЕ ВИВОДИТЬ СТРОКУ !!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<
 8003edc:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8003ee6:	4413      	add	r3, r2
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3357      	adds	r3, #87	; 0x57
 8003eec:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003ef6:	e011      	b.n	8003f1c <Start_Show_Resources+0x1e8>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003ef8:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8003efc:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003f00:	4413      	add	r3, r2
 8003f02:	4923      	ldr	r1, [pc, #140]	; (8003f90 <Start_Show_Resources+0x25c>)
 8003f04:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8003f08:	440a      	add	r2, r1
 8003f0a:	7811      	ldrb	r1, [r2, #0]
 8003f0c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003f10:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003f12:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003f16:	3301      	adds	r3, #1
 8003f18:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <Start_Show_Resources+0x25c>)
 8003f1e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003f22:	4413      	add	r3, r2
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e6      	bne.n	8003ef8 <Start_Show_Resources+0x1c4>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8003f2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc f94e 	bl	80001d0 <strlen>
 8003f34:	4603      	mov	r3, r0
 8003f36:	461a      	mov	r2, r3
 8003f38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <Start_Show_Resources+0x268>)
 8003f40:	4614      	mov	r4, r2
 8003f42:	469c      	mov	ip, r3
 8003f44:	f104 0e20 	add.w	lr, r4, #32
 8003f48:	4665      	mov	r5, ip
 8003f4a:	4626      	mov	r6, r4
 8003f4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003f4e:	6028      	str	r0, [r5, #0]
 8003f50:	6069      	str	r1, [r5, #4]
 8003f52:	60aa      	str	r2, [r5, #8]
 8003f54:	60eb      	str	r3, [r5, #12]
 8003f56:	3410      	adds	r4, #16
 8003f58:	f10c 0c10 	add.w	ip, ip, #16
 8003f5c:	4574      	cmp	r4, lr
 8003f5e:	d1f3      	bne.n	8003f48 <Start_Show_Resources+0x214>
 8003f60:	4665      	mov	r5, ip
 8003f62:	4623      	mov	r3, r4
 8003f64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f66:	6028      	str	r0, [r5, #0]
 8003f68:	6069      	str	r1, [r5, #4]
 8003f6a:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <Start_Show_Resources+0x26c>)
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f00c ff23 	bl	8010dc4 <osMessageQueuePut>
  {
 8003f7e:	e6df      	b.n	8003d40 <Start_Show_Resources+0xc>
 8003f80:	080185f4 	.word	0x080185f4
 8003f84:	08018568 	.word	0x08018568
 8003f88:	20000778 	.word	0x20000778
 8003f8c:	08018584 	.word	0x08018584
 8003f90:	20000390 	.word	0x20000390
 8003f94:	080185f8 	.word	0x080185f8
 8003f98:	08018614 	.word	0x08018614
 8003f9c:	080185c8 	.word	0x080185c8
 8003fa0:	2000a34c 	.word	0x2000a34c

08003fa4 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <Start_UART_Task+0x58>)
 8003fb2:	6818      	ldr	r0, [r3, #0]
 8003fb4:	f107 010c 	add.w	r1, r7, #12
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f00c ff61 	bl	8010e84 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8003fc8:	e004      	b.n	8003fd4 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8003fca:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8003fd4:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8003fd8:	f107 020c 	add.w	r2, r7, #12
 8003fdc:	5cd3      	ldrb	r3, [r2, r3]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f3      	bne.n	8003fca <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8003fe2:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8003fe6:	f107 030c 	add.w	r3, r7, #12
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f010 fc47 	bl	8014880 <CDC_Transmit_FS>
    osDelay(1);
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f00c fd14 	bl	8010a20 <osDelay>
  {
 8003ff8:	e7da      	b.n	8003fb0 <Start_UART_Task+0xc>
 8003ffa:	bf00      	nop
 8003ffc:	2000a34c 	.word	0x2000a34c

08004000 <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 8004000:	b5b0      	push	{r4, r5, r7, lr}
 8004002:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8004006:	af04      	add	r7, sp, #16
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	6018      	str	r0, [r3, #0]
  /* Infinite loop */

	QUEUE_t msg;												// Make a queue
	//memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'

	uint16_t STATUS=0;
 800400c:	2300      	movs	r3, #0
 800400e:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
	uint16_t addres_device = 0x76;  		 	// BME280
 8004012:	2376      	movs	r3, #118	; 0x76
 8004014:	f8a7 345c 	strh.w	r3, [r7, #1116]	; 0x45c
	uint16_t id_addr = 0xD0;
 8004018:	23d0      	movs	r3, #208	; 0xd0
 800401a:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
	uint8_t id = 96;							// in hex form
 800401e:	2360      	movs	r3, #96	; 0x60
 8004020:	f887 3459 	strb.w	r3, [r7, #1113]	; 0x459
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8004024:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800402c:	f8b7 345c 	ldrh.w	r3, [r7, #1116]	; 0x45c
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	b299      	uxth	r1, r3
 8004034:	f8b7 245a 	ldrh.w	r2, [r7, #1114]	; 0x45a
 8004038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800403c:	9302      	str	r3, [sp, #8]
 800403e:	2301      	movs	r3, #1
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2301      	movs	r3, #1
 800404a:	48bb      	ldr	r0, [pc, #748]	; (8004338 <Start_bme280+0x338>)
 800404c:	f001 feea 	bl	8005e24 <HAL_I2C_Mem_Read>
 8004050:	4603      	mov	r3, r0
 8004052:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
		// Error !!! BME280 didn't found
	}


	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8004056:	4bb9      	ldr	r3, [pc, #740]	; (800433c <Start_bme280+0x33c>)
 8004058:	2276      	movs	r2, #118	; 0x76
 800405a:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 800405c:	4bb7      	ldr	r3, [pc, #732]	; (800433c <Start_bme280+0x33c>)
 800405e:	2201      	movs	r2, #1
 8004060:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8004062:	4bb6      	ldr	r3, [pc, #728]	; (800433c <Start_bme280+0x33c>)
 8004064:	4ab6      	ldr	r2, [pc, #728]	; (8004340 <Start_bme280+0x340>)
 8004066:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8004068:	4bb4      	ldr	r3, [pc, #720]	; (800433c <Start_bme280+0x33c>)
 800406a:	4ab6      	ldr	r2, [pc, #728]	; (8004344 <Start_bme280+0x344>)
 800406c:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 800406e:	4bb3      	ldr	r3, [pc, #716]	; (800433c <Start_bme280+0x33c>)
 8004070:	4ab5      	ldr	r2, [pc, #724]	; (8004348 <Start_bme280+0x348>)
 8004072:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8004074:	48b1      	ldr	r0, [pc, #708]	; (800433c <Start_bme280+0x33c>)
 8004076:	f7fc ff63 	bl	8000f40 <bme280_init>
 800407a:	4603      	mov	r3, r0
 800407c:	461a      	mov	r2, r3
 800407e:	4bb3      	ldr	r3, [pc, #716]	; (800434c <Start_bme280+0x34c>)
 8004080:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8004082:	4bae      	ldr	r3, [pc, #696]	; (800433c <Start_bme280+0x33c>)
 8004084:	2201      	movs	r2, #1
 8004086:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 800408a:	4bac      	ldr	r3, [pc, #688]	; (800433c <Start_bme280+0x33c>)
 800408c:	2205      	movs	r2, #5
 800408e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8004092:	4baa      	ldr	r3, [pc, #680]	; (800433c <Start_bme280+0x33c>)
 8004094:	2202      	movs	r2, #2
 8004096:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 800409a:	4ba8      	ldr	r3, [pc, #672]	; (800433c <Start_bme280+0x33c>)
 800409c:	2204      	movs	r2, #4
 800409e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80040a2:	49a6      	ldr	r1, [pc, #664]	; (800433c <Start_bme280+0x33c>)
 80040a4:	200f      	movs	r0, #15
 80040a6:	f7fd f83d 	bl	8001124 <bme280_set_sensor_settings>
 80040aa:	4603      	mov	r3, r0
 80040ac:	461a      	mov	r2, r3
 80040ae:	4ba7      	ldr	r3, [pc, #668]	; (800434c <Start_bme280+0x34c>)
 80040b0:	701a      	strb	r2, [r3, #0]

	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80040b2:	49a2      	ldr	r1, [pc, #648]	; (800433c <Start_bme280+0x33c>)
 80040b4:	2003      	movs	r0, #3
 80040b6:	f7fd f88a 	bl	80011ce <bme280_set_sensor_mode>
 80040ba:	4603      	mov	r3, r0
 80040bc:	461a      	mov	r2, r3
 80040be:	4ba3      	ldr	r3, [pc, #652]	; (800434c <Start_bme280+0x34c>)
 80040c0:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 80040c2:	4b9e      	ldr	r3, [pc, #632]	; (800433c <Start_bme280+0x33c>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2028      	movs	r0, #40	; 0x28
 80040c8:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 80040ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040ce:	f00c fca7 	bl	8010a20 <osDelay>

	  char str_t_h_and_p[50] = {0};
 80040d2:	f107 0308 	add.w	r3, r7, #8
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	3304      	adds	r3, #4
 80040dc:	222e      	movs	r2, #46	; 0x2e
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f011 f993 	bl	801540c <memset>
	  char str_thp_buffer[12] = {0};
 80040e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	3304      	adds	r3, #4
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]

	  memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 80040f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f011 f983 	bl	801540c <memset>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);		// Get data from sensor
 8004106:	4a8d      	ldr	r2, [pc, #564]	; (800433c <Start_bme280+0x33c>)
 8004108:	4991      	ldr	r1, [pc, #580]	; (8004350 <Start_bme280+0x350>)
 800410a:	2007      	movs	r0, #7
 800410c:	f7fd f8db 	bl	80012c6 <bme280_get_sensor_data>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	4b8d      	ldr	r3, [pc, #564]	; (800434c <Start_bme280+0x34c>)
 8004116:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 8004118:	4b8c      	ldr	r3, [pc, #560]	; (800434c <Start_bme280+0x34c>)
 800411a:	f993 3000 	ldrsb.w	r3, [r3]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 80e5 	bne.w	80042ee <Start_bme280+0x2ee>
	  {
	  		// Save data variables
	  		float BME280_temperature = comp_data.temperature;
 8004124:	4b8a      	ldr	r3, [pc, #552]	; (8004350 <Start_bme280+0x350>)
 8004126:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f7fc fd3b 	bl	8000ba8 <__aeabi_d2f>
 8004132:	4603      	mov	r3, r0
 8004134:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8004138:	6013      	str	r3, [r2, #0]
	  		float BME280_humidity = comp_data.humidity;
 800413a:	4b85      	ldr	r3, [pc, #532]	; (8004350 <Start_bme280+0x350>)
 800413c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004140:	4610      	mov	r0, r2
 8004142:	4619      	mov	r1, r3
 8004144:	f7fc fd30 	bl	8000ba8 <__aeabi_d2f>
 8004148:	4603      	mov	r3, r0
 800414a:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800414e:	6013      	str	r3, [r2, #0]
	  		float BME280_preasure = comp_data.pressure;
 8004150:	4b7f      	ldr	r3, [pc, #508]	; (8004350 <Start_bme280+0x350>)
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	f7fc fd25 	bl	8000ba8 <__aeabi_d2f>
 800415e:	4603      	mov	r3, r0
 8004160:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8004164:	6013      	str	r3, [r2, #0]

	  		// Write T, H and P in str_t_h_and_p buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_h_and_p, "BEE280: \n\r");
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	4618      	mov	r0, r3
 800416c:	f7fc f830 	bl	80001d0 <strlen>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	f107 0308 	add.w	r3, r7, #8
 8004178:	4413      	add	r3, r2
 800417a:	4976      	ldr	r1, [pc, #472]	; (8004354 <Start_bme280+0x354>)
 800417c:	461a      	mov	r2, r3
 800417e:	460b      	mov	r3, r1
 8004180:	cb03      	ldmia	r3!, {r0, r1}
 8004182:	6010      	str	r0, [r2, #0]
 8004184:	6051      	str	r1, [r2, #4]
 8004186:	8819      	ldrh	r1, [r3, #0]
 8004188:	789b      	ldrb	r3, [r3, #2]
 800418a:	8111      	strh	r1, [r2, #8]
 800418c:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_h_and_p, "T: ");
 800418e:	f107 0308 	add.w	r3, r7, #8
 8004192:	4618      	mov	r0, r3
 8004194:	f7fc f81c 	bl	80001d0 <strlen>
 8004198:	4603      	mov	r3, r0
 800419a:	461a      	mov	r2, r3
 800419c:	f107 0308 	add.w	r3, r7, #8
 80041a0:	4413      	add	r3, r2
 80041a2:	4a6d      	ldr	r2, [pc, #436]	; (8004358 <Start_bme280+0x358>)
 80041a4:	6810      	ldr	r0, [r2, #0]
 80041a6:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_temperature);
 80041a8:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	f7fc f9cb 	bl	8000548 <__aeabi_f2d>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80041ba:	4968      	ldr	r1, [pc, #416]	; (800435c <Start_bme280+0x35c>)
 80041bc:	f011 febc 	bl	8015f38 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 80041c0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80041c4:	f107 0308 	add.w	r3, r7, #8
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f011 ff17 	bl	8015ffe <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fb fffb 	bl	80001d0 <strlen>
 80041da:	4603      	mov	r3, r0
 80041dc:	461a      	mov	r2, r3
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	4413      	add	r3, r2
 80041e4:	4a5e      	ldr	r2, [pc, #376]	; (8004360 <Start_bme280+0x360>)
 80041e6:	6810      	ldr	r0, [r2, #0]
 80041e8:	6018      	str	r0, [r3, #0]
 80041ea:	7912      	ldrb	r2, [r2, #4]
 80041ec:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 80041ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041f2:	220c      	movs	r2, #12
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f011 f908 	bl	801540c <memset>
	  		strcat(str_t_h_and_p, "H: ");
 80041fc:	f107 0308 	add.w	r3, r7, #8
 8004200:	4618      	mov	r0, r3
 8004202:	f7fb ffe5 	bl	80001d0 <strlen>
 8004206:	4603      	mov	r3, r0
 8004208:	461a      	mov	r2, r3
 800420a:	f107 0308 	add.w	r3, r7, #8
 800420e:	4413      	add	r3, r2
 8004210:	4a54      	ldr	r2, [pc, #336]	; (8004364 <Start_bme280+0x364>)
 8004212:	6810      	ldr	r0, [r2, #0]
 8004214:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_humidity);
 8004216:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	f7fc f994 	bl	8000548 <__aeabi_f2d>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004228:	494c      	ldr	r1, [pc, #304]	; (800435c <Start_bme280+0x35c>)
 800422a:	f011 fe85 	bl	8015f38 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 800422e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004232:	f107 0308 	add.w	r3, r7, #8
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f011 fee0 	bl	8015ffe <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 800423e:	f107 0308 	add.w	r3, r7, #8
 8004242:	4618      	mov	r0, r3
 8004244:	f7fb ffc4 	bl	80001d0 <strlen>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	f107 0308 	add.w	r3, r7, #8
 8004250:	4413      	add	r3, r2
 8004252:	4a43      	ldr	r2, [pc, #268]	; (8004360 <Start_bme280+0x360>)
 8004254:	6810      	ldr	r0, [r2, #0]
 8004256:	6018      	str	r0, [r3, #0]
 8004258:	7912      	ldrb	r2, [r2, #4]
 800425a:	711a      	strb	r2, [r3, #4]

	  		// Write PRERASURE
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 800425c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004260:	220c      	movs	r2, #12
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f011 f8d1 	bl	801540c <memset>
	  		strcat(str_t_h_and_p, "P: ");
 800426a:	f107 0308 	add.w	r3, r7, #8
 800426e:	4618      	mov	r0, r3
 8004270:	f7fb ffae 	bl	80001d0 <strlen>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	f107 0308 	add.w	r3, r7, #8
 800427c:	4413      	add	r3, r2
 800427e:	4a3a      	ldr	r2, [pc, #232]	; (8004368 <Start_bme280+0x368>)
 8004280:	6810      	ldr	r0, [r2, #0]
 8004282:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_preasure);
 8004284:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	f7fc f95d 	bl	8000548 <__aeabi_f2d>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004296:	4931      	ldr	r1, [pc, #196]	; (800435c <Start_bme280+0x35c>)
 8004298:	f011 fe4e 	bl	8015f38 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 800429c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	4611      	mov	r1, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f011 fea9 	bl	8015ffe <strcat>
	  		strcat(str_t_h_and_p, " mm\n\r\0");
 80042ac:	f107 0308 	add.w	r3, r7, #8
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fb ff8d 	bl	80001d0 <strlen>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	f107 0308 	add.w	r3, r7, #8
 80042be:	4413      	add	r3, r2
 80042c0:	4a2a      	ldr	r2, [pc, #168]	; (800436c <Start_bme280+0x36c>)
 80042c2:	6810      	ldr	r0, [r2, #0]
 80042c4:	6018      	str	r0, [r3, #0]
 80042c6:	8892      	ldrh	r2, [r2, #4]
 80042c8:	809a      	strh	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_h_and_p);										//	Write main buffer with data in queue
 80042ca:	f107 0208 	add.w	r2, r7, #8
 80042ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042d2:	4611      	mov	r1, r2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f011 fe92 	bl	8015ffe <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 80042da:	4b25      	ldr	r3, [pc, #148]	; (8004370 <Start_bme280+0x370>)
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042e6:	2200      	movs	r2, #0
 80042e8:	f00c fd6c 	bl	8010dc4 <osMessageQueuePut>
 80042ec:	e6ed      	b.n	80040ca <Start_bme280+0xca>

	  }
	  else
	  {
		  strcat(str_t_h_and_p, "ERROR!!! BME280 didn't found\n\r");
 80042ee:	f107 0308 	add.w	r3, r7, #8
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fb ff6c 	bl	80001d0 <strlen>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	f107 0308 	add.w	r3, r7, #8
 8004300:	4413      	add	r3, r2
 8004302:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <Start_bme280+0x374>)
 8004304:	461d      	mov	r5, r3
 8004306:	4614      	mov	r4, r2
 8004308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800430a:	6028      	str	r0, [r5, #0]
 800430c:	6069      	str	r1, [r5, #4]
 800430e:	60aa      	str	r2, [r5, #8]
 8004310:	60eb      	str	r3, [r5, #12]
 8004312:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004314:	6128      	str	r0, [r5, #16]
 8004316:	6169      	str	r1, [r5, #20]
 8004318:	61aa      	str	r2, [r5, #24]
 800431a:	8823      	ldrh	r3, [r4, #0]
 800431c:	78a2      	ldrb	r2, [r4, #2]
 800431e:	83ab      	strh	r3, [r5, #28]
 8004320:	4613      	mov	r3, r2
 8004322:	77ab      	strb	r3, [r5, #30]
		  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <Start_bme280+0x370>)
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800432c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004330:	2200      	movs	r2, #0
 8004332:	f00c fd47 	bl	8010dc4 <osMessageQueuePut>
  {
 8004336:	e6c8      	b.n	80040ca <Start_bme280+0xca>
 8004338:	200080bc 	.word	0x200080bc
 800433c:	2000807c 	.word	0x2000807c
 8004340:	080030f1 	.word	0x080030f1
 8004344:	08003179 	.word	0x08003179
 8004348:	08003161 	.word	0x08003161
 800434c:	20009164 	.word	0x20009164
 8004350:	20009168 	.word	0x20009168
 8004354:	08018654 	.word	0x08018654
 8004358:	08018660 	.word	0x08018660
 800435c:	08018664 	.word	0x08018664
 8004360:	08018668 	.word	0x08018668
 8004364:	08018670 	.word	0x08018670
 8004368:	08018674 	.word	0x08018674
 800436c:	08018678 	.word	0x08018678
 8004370:	2000a34c 	.word	0x2000a34c
 8004374:	08018680 	.word	0x08018680

08004378 <Start_AM2302>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AM2302 */
void Start_AM2302(void *argument)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 800437e:	af00      	add	r7, sp, #0
 8004380:	1d3b      	adds	r3, r7, #4
 8004382:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_AM2302 */
  /* Infinite loop */
	QUEUE_t msg;												// Make a queue
	memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8004384:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f011 f83c 	bl	801540c <memset>

	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8004394:	4b48      	ldr	r3, [pc, #288]	; (80044b8 <Start_AM2302+0x140>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a47      	ldr	r2, [pc, #284]	; (80044b8 <Start_AM2302+0x140>)
 800439a:	f043 0304 	orr.w	r3, r3, #4
 800439e:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 80043a0:	4b45      	ldr	r3, [pc, #276]	; (80044b8 <Start_AM2302+0x140>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4a44      	ldr	r2, [pc, #272]	; (80044b8 <Start_AM2302+0x140>)
 80043a6:	f023 0302 	bic.w	r3, r3, #2
 80043aa:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 80043ac:	4b42      	ldr	r3, [pc, #264]	; (80044b8 <Start_AM2302+0x140>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a41      	ldr	r2, [pc, #260]	; (80044b8 <Start_AM2302+0x140>)
 80043b2:	f043 0302 	orr.w	r3, r3, #2
 80043b6:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 80043b8:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <Start_AM2302+0x140>)
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	4a3e      	ldr	r2, [pc, #248]	; (80044b8 <Start_AM2302+0x140>)
 80043be:	f083 0302 	eor.w	r3, r3, #2
 80043c2:	6153      	str	r3, [r2, #20]
	osDelay(2000);									// First init must be 2 seconds delay
 80043c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80043c8:	f00c fb2a 	bl	8010a20 <osDelay>

  for(;;)
  {
	  osDelay(3000);			// Measure every 3 seconds
 80043cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80043d0:	f00c fb26 	bl	8010a20 <osDelay>
	   * __                ________________________
	   * 	 \			    /				         \
	   * 	  \____________/			              \_
	   */

	  	bool get_data_status = false;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	int j = 0;   							// Counter bytes
 80043da:	2300      	movs	r3, #0
 80043dc:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	  	int i = 0;								// Counter bits
 80043e0:	2300      	movs	r3, #0
 80043e2:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	  	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 80043e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
	  	float temper, hum;						// Buffer variables

	  	// Init GPIO like output
	  	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 80043ee:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <Start_AM2302+0x140>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a31      	ldr	r2, [pc, #196]	; (80044b8 <Start_AM2302+0x140>)
 80043f4:	f043 0304 	orr.w	r3, r3, #4
 80043f8:	6013      	str	r3, [r2, #0]
	  	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 80043fa:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <Start_AM2302+0x140>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4a2e      	ldr	r2, [pc, #184]	; (80044b8 <Start_AM2302+0x140>)
 8004400:	f023 0302 	bic.w	r3, r3, #2
 8004404:	6053      	str	r3, [r2, #4]
	  	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8004406:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <Start_AM2302+0x140>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	4a2b      	ldr	r2, [pc, #172]	; (80044b8 <Start_AM2302+0x140>)
 800440c:	f043 0302 	orr.w	r3, r3, #2
 8004410:	6093      	str	r3, [r2, #8]

	  	GPIOC->ODR &= ~0x02;		// Low level
 8004412:	4b29      	ldr	r3, [pc, #164]	; (80044b8 <Start_AM2302+0x140>)
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	4a28      	ldr	r2, [pc, #160]	; (80044b8 <Start_AM2302+0x140>)
 8004418:	f023 0302 	bic.w	r3, r3, #2
 800441c:	6153      	str	r3, [r2, #20]
	  	osDelay(18);
 800441e:	2012      	movs	r0, #18
 8004420:	f00c fafe 	bl	8010a20 <osDelay>
	  	GPIOC->ODR ^= 0x02;			// High level
 8004424:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <Start_AM2302+0x140>)
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	4a23      	ldr	r2, [pc, #140]	; (80044b8 <Start_AM2302+0x140>)
 800442a:	f083 0302 	eor.w	r3, r3, #2
 800442e:	6153      	str	r3, [r2, #20]
	  	delay_us(40);
 8004430:	2028      	movs	r0, #40	; 0x28
 8004432:	f7fe fedd 	bl	80031f0 <delay_us>

	  	// Make input pin C1
	  	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 8004436:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <Start_AM2302+0x140>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <Start_AM2302+0x140>)
 800443c:	f023 0304 	bic.w	r3, r3, #4
 8004440:	6013      	str	r3, [r2, #0]
	  	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 8004442:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <Start_AM2302+0x140>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <Start_AM2302+0x140>)
 8004448:	f023 0304 	bic.w	r3, r3, #4
 800444c:	60d3      	str	r3, [r2, #12]

	  	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 800444e:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <Start_AM2302+0x140>)
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <Start_AM2302+0xea>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 800445a:	2300      	movs	r3, #0
 800445c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8004460:	e002      	b.n	8004468 <Start_AM2302+0xf0>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}

	  	delay_us(80);
 8004468:	2050      	movs	r0, #80	; 0x50
 800446a:	f7fe fec1 	bl	80031f0 <delay_us>

	  	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <Start_AM2302+0x140>)
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <Start_AM2302+0x10a>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 800447a:	2300      	movs	r3, #0
 800447c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8004480:	e002      	b.n	8004488 <Start_AM2302+0x110>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}
	  	delay_us(80);
 8004488:	2050      	movs	r0, #80	; 0x50
 800448a:	f7fe feb1 	bl	80031f0 <delay_us>

	  	if(get_data_status == true)
 800448e:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8004492:	2b00      	cmp	r3, #0
 8004494:	d09a      	beq.n	80043cc <Start_AM2302+0x54>
	  	{
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 8004496:	2300      	movs	r3, #0
 8004498:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800449c:	e050      	b.n	8004540 <Start_AM2302+0x1c8>
	  		{
	  			data[4-j] = 0;
 800449e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80044a2:	f1c3 0304 	rsb	r3, r3, #4
 80044a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044aa:	2100      	movs	r1, #0
 80044ac:	54d1      	strb	r1, [r2, r3]
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 80044ae:	2300      	movs	r3, #0
 80044b0:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80044b4:	e038      	b.n	8004528 <Start_AM2302+0x1b0>
 80044b6:	bf00      	nop
 80044b8:	40020800 	.word	0x40020800
	  			{
	  				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 80044bc:	bf00      	nop
 80044be:	4b95      	ldr	r3, [pc, #596]	; (8004714 <Start_AM2302+0x39c>)
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f9      	beq.n	80044be <Start_AM2302+0x146>
	  				delay_us(30);
 80044ca:	201e      	movs	r0, #30
 80044cc:	f7fe fe90 	bl	80031f0 <delay_us>
	  				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 80044d0:	4b90      	ldr	r3, [pc, #576]	; (8004714 <Start_AM2302+0x39c>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d019      	beq.n	8004510 <Start_AM2302+0x198>
	  				{
	  					data[4-j] |= (1 << (7 - i));        // Shift received bite
 80044dc:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80044e0:	f1c3 0304 	rsb	r3, r3, #4
 80044e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044e8:	5cd3      	ldrb	r3, [r2, r3]
 80044ea:	b25a      	sxtb	r2, r3
 80044ec:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80044f0:	f1c3 0307 	rsb	r3, r3, #7
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	b25b      	sxtb	r3, r3
 80044fc:	4313      	orrs	r3, r2
 80044fe:	b25a      	sxtb	r2, r3
 8004500:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8004504:	f1c3 0304 	rsb	r3, r3, #4
 8004508:	b2d1      	uxtb	r1, r2
 800450a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800450e:	54d1      	strb	r1, [r2, r3]
	  				}
	  				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 8004510:	bf00      	nop
 8004512:	4b80      	ldr	r3, [pc, #512]	; (8004714 <Start_AM2302+0x39c>)
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f9      	bne.n	8004512 <Start_AM2302+0x19a>
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 800451e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8004522:	3301      	adds	r3, #1
 8004524:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8004528:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800452c:	2b07      	cmp	r3, #7
 800452e:	ddc5      	ble.n	80044bc <Start_AM2302+0x144>
	  			}
	  			get_data_status = true;										// Data was been written okay
 8004530:	2301      	movs	r3, #1
 8004532:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 8004536:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800453a:	3301      	adds	r3, #1
 800453c:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8004540:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8004544:	2b04      	cmp	r3, #4
 8004546:	ddaa      	ble.n	800449e <Start_AM2302+0x126>
	  		}

	  		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 8004548:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800454c:	3301      	adds	r3, #1
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004554:	ee07 3a90 	vmov	s15, r3
 8004558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800455c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004564:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004568:	edc3 7a00 	vstr	s15, [r3]
	  		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 800456c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004570:	3301      	adds	r3, #1
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b21b      	sxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	da13      	bge.n	80045a2 <Start_AM2302+0x22a>
 800457a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	f7fb ffe2 	bl	8000548 <__aeabi_f2d>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	f7fc fb0c 	bl	8000ba8 <__aeabi_d2f>
 8004590:	4603      	mov	r3, r0
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef1 7a67 	vneg.f32	s15, s15
 800459a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800459e:	edc3 7a00 	vstr	s15, [r3]
	  		hum = (float)(*(int16_t*)(data+3)) / 10;
 80045a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045a6:	3303      	adds	r3, #3
 80045a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045b4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80045b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045bc:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80045c0:	edc3 7a00 	vstr	s15, [r3]

	  		// Write data in queue
	  		char str_t_and_h[50] = {0};
 80045c4:	f107 0308 	add.w	r3, r7, #8
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	3304      	adds	r3, #4
 80045ce:	222e      	movs	r2, #46	; 0x2e
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f010 ff1a 	bl	801540c <memset>
	  		char str_t_and_h_buffer[12] = {0};
 80045d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	605a      	str	r2, [r3, #4]

	  		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 80045e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045f0:	2100      	movs	r1, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f010 ff0a 	bl	801540c <memset>

	  		// Write T and  H P in str_t_h buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_and_h, "AM2302: \n\r");
 80045f8:	f107 0308 	add.w	r3, r7, #8
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fb fde7 	bl	80001d0 <strlen>
 8004602:	4603      	mov	r3, r0
 8004604:	461a      	mov	r2, r3
 8004606:	f107 0308 	add.w	r3, r7, #8
 800460a:	4413      	add	r3, r2
 800460c:	4942      	ldr	r1, [pc, #264]	; (8004718 <Start_AM2302+0x3a0>)
 800460e:	461a      	mov	r2, r3
 8004610:	460b      	mov	r3, r1
 8004612:	cb03      	ldmia	r3!, {r0, r1}
 8004614:	6010      	str	r0, [r2, #0]
 8004616:	6051      	str	r1, [r2, #4]
 8004618:	8819      	ldrh	r1, [r3, #0]
 800461a:	789b      	ldrb	r3, [r3, #2]
 800461c:	8111      	strh	r1, [r2, #8]
 800461e:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_and_h, "T: ");
 8004620:	f107 0308 	add.w	r3, r7, #8
 8004624:	4618      	mov	r0, r3
 8004626:	f7fb fdd3 	bl	80001d0 <strlen>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	4413      	add	r3, r2
 8004634:	4a39      	ldr	r2, [pc, #228]	; (800471c <Start_AM2302+0x3a4>)
 8004636:	6810      	ldr	r0, [r2, #0]
 8004638:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", temper);
 800463a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	f7fb ff82 	bl	8000548 <__aeabi_f2d>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800464c:	4934      	ldr	r1, [pc, #208]	; (8004720 <Start_AM2302+0x3a8>)
 800464e:	f011 fc73 	bl	8015f38 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 8004652:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004656:	f107 0308 	add.w	r3, r7, #8
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f011 fcce 	bl	8015ffe <strcat>
	  		strcat(str_t_and_h, " C\n\r");
 8004662:	f107 0308 	add.w	r3, r7, #8
 8004666:	4618      	mov	r0, r3
 8004668:	f7fb fdb2 	bl	80001d0 <strlen>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	f107 0308 	add.w	r3, r7, #8
 8004674:	4413      	add	r3, r2
 8004676:	4a2b      	ldr	r2, [pc, #172]	; (8004724 <Start_AM2302+0x3ac>)
 8004678:	6810      	ldr	r0, [r2, #0]
 800467a:	6018      	str	r0, [r3, #0]
 800467c:	7912      	ldrb	r2, [r2, #4]
 800467e:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_t_and_h_buffer, 0, sizeof(str_t_and_h_buffer));
 8004680:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004684:	220c      	movs	r2, #12
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f010 febf 	bl	801540c <memset>

	  		strcat(str_t_and_h, "H: ");
 800468e:	f107 0308 	add.w	r3, r7, #8
 8004692:	4618      	mov	r0, r3
 8004694:	f7fb fd9c 	bl	80001d0 <strlen>
 8004698:	4603      	mov	r3, r0
 800469a:	461a      	mov	r2, r3
 800469c:	f107 0308 	add.w	r3, r7, #8
 80046a0:	4413      	add	r3, r2
 80046a2:	4a21      	ldr	r2, [pc, #132]	; (8004728 <Start_AM2302+0x3b0>)
 80046a4:	6810      	ldr	r0, [r2, #0]
 80046a6:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", hum);
 80046a8:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	f7fb ff4b 	bl	8000548 <__aeabi_f2d>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80046ba:	4919      	ldr	r1, [pc, #100]	; (8004720 <Start_AM2302+0x3a8>)
 80046bc:	f011 fc3c 	bl	8015f38 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 80046c0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80046c4:	f107 0308 	add.w	r3, r7, #8
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f011 fc97 	bl	8015ffe <strcat>
	  		strcat(str_t_and_h, " C\n\r\0");
 80046d0:	f107 0308 	add.w	r3, r7, #8
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fb fd7b 	bl	80001d0 <strlen>
 80046da:	4603      	mov	r3, r0
 80046dc:	461a      	mov	r2, r3
 80046de:	f107 0308 	add.w	r3, r7, #8
 80046e2:	4413      	add	r3, r2
 80046e4:	4a11      	ldr	r2, [pc, #68]	; (800472c <Start_AM2302+0x3b4>)
 80046e6:	6810      	ldr	r0, [r2, #0]
 80046e8:	6018      	str	r0, [r3, #0]
 80046ea:	7912      	ldrb	r2, [r2, #4]
 80046ec:	711a      	strb	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_and_h);										//	Write main buffer with data in queue
 80046ee:	f107 0208 	add.w	r2, r7, #8
 80046f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046f6:	4611      	mov	r1, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f011 fc80 	bl	8015ffe <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <Start_AM2302+0x3b8>)
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800470a:	2200      	movs	r2, #0
 800470c:	f00c fb5a 	bl	8010dc4 <osMessageQueuePut>
  {
 8004710:	e65c      	b.n	80043cc <Start_AM2302+0x54>
 8004712:	bf00      	nop
 8004714:	40020800 	.word	0x40020800
 8004718:	080186a0 	.word	0x080186a0
 800471c:	08018660 	.word	0x08018660
 8004720:	08018664 	.word	0x08018664
 8004724:	08018668 	.word	0x08018668
 8004728:	08018670 	.word	0x08018670
 800472c:	080186ac 	.word	0x080186ac
 8004730:	2000a34c 	.word	0x2000a34c

08004734 <Start_SD_CARD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_CARD */
void Start_SD_CARD(void *argument)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_CARD */
  /* Infinite loop */

	Mount_SD("/");
 800473c:	4823      	ldr	r0, [pc, #140]	; (80047cc <Start_SD_CARD+0x98>)
 800473e:	f7fd fe23 	bl	8002388 <Mount_SD>

	Create_File("test_data_1.txt");
 8004742:	4823      	ldr	r0, [pc, #140]	; (80047d0 <Start_SD_CARD+0x9c>)
 8004744:	f7fd fe66 	bl	8002414 <Create_File>
	Update_File("test_data_1.txt","\n\rStart recording\r\n");	// Add data to the end of file
 8004748:	4922      	ldr	r1, [pc, #136]	; (80047d4 <Start_SD_CARD+0xa0>)
 800474a:	4821      	ldr	r0, [pc, #132]	; (80047d0 <Start_SD_CARD+0x9c>)
 800474c:	f7fd fef8 	bl	8002540 <Update_File>

	// Create folders
	Create_Dir("test_folder_1");
 8004750:	4821      	ldr	r0, [pc, #132]	; (80047d8 <Start_SD_CARD+0xa4>)
 8004752:	f7fd ffb5 	bl	80026c0 <Create_Dir>
	Create_Dir("test_folder_2");
 8004756:	4821      	ldr	r0, [pc, #132]	; (80047dc <Start_SD_CARD+0xa8>)
 8004758:	f7fd ffb2 	bl	80026c0 <Create_Dir>
	Create_Dir("test_folder_3");
 800475c:	4820      	ldr	r0, [pc, #128]	; (80047e0 <Start_SD_CARD+0xac>)
 800475e:	f7fd ffaf 	bl	80026c0 <Create_Dir>

	Unmount_SD("/");
 8004762:	481a      	ldr	r0, [pc, #104]	; (80047cc <Start_SD_CARD+0x98>)
 8004764:	f7fd fe34 	bl	80023d0 <Unmount_SD>
	static int i = 0;											// Test data for write

  for(;;)
  {
	  // Log data ewery one second
	  osDelay(1000);
 8004768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800476c:	f00c f958 	bl	8010a20 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);			// LED ON
 8004770:	2201      	movs	r2, #1
 8004772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004776:	481b      	ldr	r0, [pc, #108]	; (80047e4 <Start_SD_CARD+0xb0>)
 8004778:	f000 feb8 	bl	80054ec <HAL_GPIO_WritePin>

	  Mount_SD("/");
 800477c:	4813      	ldr	r0, [pc, #76]	; (80047cc <Start_SD_CARD+0x98>)
 800477e:	f7fd fe03 	bl	8002388 <Mount_SD>

	  char data[10] = {0};
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	f107 0310 	add.w	r3, r7, #16
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	809a      	strh	r2, [r3, #4]
	  sprintf(data, "%d\n", i);
 8004790:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <Start_SD_CARD+0xb4>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	f107 030c 	add.w	r3, r7, #12
 8004798:	4914      	ldr	r1, [pc, #80]	; (80047ec <Start_SD_CARD+0xb8>)
 800479a:	4618      	mov	r0, r3
 800479c:	f011 fbcc 	bl	8015f38 <siprintf>
	  Update_File("test_data_1.txt", data);						// Add data to the end of file
 80047a0:	f107 030c 	add.w	r3, r7, #12
 80047a4:	4619      	mov	r1, r3
 80047a6:	480a      	ldr	r0, [pc, #40]	; (80047d0 <Start_SD_CARD+0x9c>)
 80047a8:	f7fd feca 	bl	8002540 <Update_File>
	  i++;
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <Start_SD_CARD+0xb4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3301      	adds	r3, #1
 80047b2:	4a0d      	ldr	r2, [pc, #52]	; (80047e8 <Start_SD_CARD+0xb4>)
 80047b4:	6013      	str	r3, [r2, #0]

	  Unmount_SD("/");
 80047b6:	4805      	ldr	r0, [pc, #20]	; (80047cc <Start_SD_CARD+0x98>)
 80047b8:	f7fd fe0a 	bl	80023d0 <Unmount_SD>

	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);		// LED OFF
 80047bc:	2200      	movs	r2, #0
 80047be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047c2:	4808      	ldr	r0, [pc, #32]	; (80047e4 <Start_SD_CARD+0xb0>)
 80047c4:	f000 fe92 	bl	80054ec <HAL_GPIO_WritePin>
  {
 80047c8:	e7ce      	b.n	8004768 <Start_SD_CARD+0x34>
 80047ca:	bf00      	nop
 80047cc:	080186b4 	.word	0x080186b4
 80047d0:	080186b8 	.word	0x080186b8
 80047d4:	080186c8 	.word	0x080186c8
 80047d8:	080186dc 	.word	0x080186dc
 80047dc:	080186ec 	.word	0x080186ec
 80047e0:	080186fc 	.word	0x080186fc
 80047e4:	40020c00 	.word	0x40020c00
 80047e8:	20000780 	.word	0x20000780
 80047ec:	0801870c 	.word	0x0801870c

080047f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// Handler for generate us dalay 			( FOR AM2302 )
	if(htim->Instance == TIM10) 				//check if the interrupt comes from TIM10
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a25      	ldr	r2, [pc, #148]	; (8004894 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10c      	bne.n	800481c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(tim_val > 0)
 8004802:	4b25      	ldr	r3, [pc, #148]	; (8004898 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			tim_val = tim_val - 1;
 800480a:	4b23      	ldr	r3, [pc, #140]	; (8004898 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3b01      	subs	r3, #1
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	e002      	b.n	800481c <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		else									// For avoid overflow variable
		{
			tim_val = 0;
 8004816:	4b20      	ldr	r3, [pc, #128]	; (8004898 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
		}
	}

	// Handler for SD
	if(htim->Instance == TIM1) 					//check if the interrupt comes from TIM1 (Blink LED)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1e      	ldr	r2, [pc, #120]	; (800489c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d104      	bne.n	8004830 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);		// Green LED
 8004826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800482a:	481d      	ldr	r0, [pc, #116]	; (80048a0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800482c:	f000 fe77 	bl	800551e <HAL_GPIO_TogglePin>
	}

	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d104      	bne.n	8004844 <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 800483a:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3301      	adds	r3, #1
 8004840:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004842:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a18      	ldr	r2, [pc, #96]	; (80048ac <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d101      	bne.n	8004852 <HAL_TIM_PeriodElapsedCallback+0x62>
    HAL_IncTick();
 800484e:	f000 fb8b 	bl	8004f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM14)		// For SD works (use in fatfs_sd.c file)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a15      	ldr	r2, [pc, #84]	; (80048ac <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d117      	bne.n	800488c <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		if(Timer1 > 0)
 800485c:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d006      	beq.n	8004874 <HAL_TIM_PeriodElapsedCallback+0x84>
		    Timer1--;
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b2da      	uxtb	r2, r3
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004872:	701a      	strb	r2, [r3, #0]

		  if(Timer2 > 0)
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d006      	beq.n	800488c <HAL_TIM_PeriodElapsedCallback+0x9c>
		    Timer2--;
 800487e:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b2da      	uxtb	r2, r3
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800488a:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 1 */
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40014400 	.word	0x40014400
 8004898:	2000077c 	.word	0x2000077c
 800489c:	40010000 	.word	0x40010000
 80048a0:	40020c00 	.word	0x40020c00
 80048a4:	40000400 	.word	0x40000400
 80048a8:	2000ef84 	.word	0x2000ef84
 80048ac:	40002000 	.word	0x40002000
 80048b0:	200100f4 	.word	0x200100f4
 80048b4:	2000ef8c 	.word	0x2000ef8c

080048b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048bc:	b672      	cpsid	i
}
 80048be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048c0:	e7fe      	b.n	80048c0 <Error_Handler+0x8>
	...

080048c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ca:	2300      	movs	r3, #0
 80048cc:	607b      	str	r3, [r7, #4]
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <HAL_MspInit+0x54>)
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	4a11      	ldr	r2, [pc, #68]	; (8004918 <HAL_MspInit+0x54>)
 80048d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048d8:	6453      	str	r3, [r2, #68]	; 0x44
 80048da:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <HAL_MspInit+0x54>)
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_MspInit+0x54>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <HAL_MspInit+0x54>)
 80048f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6413      	str	r3, [r2, #64]	; 0x40
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <HAL_MspInit+0x54>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004902:	2200      	movs	r2, #0
 8004904:	210f      	movs	r1, #15
 8004906:	f06f 0001 	mvn.w	r0, #1
 800490a:	f000 fc29 	bl	8005160 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800

0800491c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004924:	f107 0314 	add.w	r3, r7, #20
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	609a      	str	r2, [r3, #8]
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <HAL_I2C_MspInit+0xc4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d14b      	bne.n	80049d6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <HAL_I2C_MspInit+0xc8>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	4a27      	ldr	r2, [pc, #156]	; (80049e4 <HAL_I2C_MspInit+0xc8>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	6313      	str	r3, [r2, #48]	; 0x30
 800494e:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <HAL_I2C_MspInit+0xc8>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <HAL_I2C_MspInit+0xc8>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_I2C_MspInit+0xc8>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	6313      	str	r3, [r2, #48]	; 0x30
 800496a:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <HAL_I2C_MspInit+0xc8>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800497a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800497c:	2312      	movs	r3, #18
 800497e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004984:	2303      	movs	r3, #3
 8004986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004988:	2304      	movs	r3, #4
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	4619      	mov	r1, r3
 8004992:	4815      	ldr	r0, [pc, #84]	; (80049e8 <HAL_I2C_MspInit+0xcc>)
 8004994:	f000 fc0e 	bl	80051b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800499c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800499e:	2312      	movs	r3, #18
 80049a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a6:	2303      	movs	r3, #3
 80049a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80049aa:	2304      	movs	r3, #4
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ae:	f107 0314 	add.w	r3, r7, #20
 80049b2:	4619      	mov	r1, r3
 80049b4:	480d      	ldr	r0, [pc, #52]	; (80049ec <HAL_I2C_MspInit+0xd0>)
 80049b6:	f000 fbfd 	bl	80051b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <HAL_I2C_MspInit+0xc8>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <HAL_I2C_MspInit+0xc8>)
 80049c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049c8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <HAL_I2C_MspInit+0xc8>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049d2:	60bb      	str	r3, [r7, #8]
 80049d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80049d6:	bf00      	nop
 80049d8:	3728      	adds	r7, #40	; 0x28
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40005c00 	.word	0x40005c00
 80049e4:	40023800 	.word	0x40023800
 80049e8:	40020800 	.word	0x40020800
 80049ec:	40020000 	.word	0x40020000

080049f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049f8:	f107 0308 	add.w	r3, r7, #8
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a0c      	ldr	r2, [pc, #48]	; (8004a3c <HAL_RTC_MspInit+0x4c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d111      	bne.n	8004a34 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004a10:	2302      	movs	r3, #2
 8004a12:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a18:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a1a:	f107 0308 	add.w	r3, r7, #8
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f003 fe50 	bl	80086c4 <HAL_RCCEx_PeriphCLKConfig>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004a2a:	f7ff ff45 	bl	80048b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a2e:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <HAL_RTC_MspInit+0x50>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004a34:	bf00      	nop
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40002800 	.word	0x40002800
 8004a40:	42470e3c 	.word	0x42470e3c

08004a44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a4c:	f107 0314 	add.w	r3, r7, #20
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <HAL_SPI_MspInit+0x84>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d12b      	bne.n	8004abe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	4b18      	ldr	r3, [pc, #96]	; (8004acc <HAL_SPI_MspInit+0x88>)
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <HAL_SPI_MspInit+0x88>)
 8004a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a74:	6453      	str	r3, [r2, #68]	; 0x44
 8004a76:	4b15      	ldr	r3, [pc, #84]	; (8004acc <HAL_SPI_MspInit+0x88>)
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_SPI_MspInit+0x88>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	4a10      	ldr	r2, [pc, #64]	; (8004acc <HAL_SPI_MspInit+0x88>)
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	6313      	str	r3, [r2, #48]	; 0x30
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <HAL_SPI_MspInit+0x88>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004a9e:	23e0      	movs	r3, #224	; 0xe0
 8004aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004aae:	2305      	movs	r3, #5
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab2:	f107 0314 	add.w	r3, r7, #20
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4805      	ldr	r0, [pc, #20]	; (8004ad0 <HAL_SPI_MspInit+0x8c>)
 8004aba:	f000 fb7b 	bl	80051b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004abe:	bf00      	nop
 8004ac0:	3728      	adds	r7, #40	; 0x28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40013000 	.word	0x40013000
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40020000 	.word	0x40020000

08004ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a38      	ldr	r2, [pc, #224]	; (8004bc4 <HAL_TIM_Base_MspInit+0xf0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d116      	bne.n	8004b14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	4a36      	ldr	r2, [pc, #216]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	6453      	str	r3, [r2, #68]	; 0x44
 8004af6:	4b34      	ldr	r3, [pc, #208]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004b02:	2200      	movs	r2, #0
 8004b04:	2105      	movs	r1, #5
 8004b06:	2019      	movs	r0, #25
 8004b08:	f000 fb2a 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004b0c:	2019      	movs	r0, #25
 8004b0e:	f000 fb43 	bl	8005198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004b12:	e052      	b.n	8004bba <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1c:	d116      	bne.n	8004b4c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	4b29      	ldr	r3, [pc, #164]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	4a28      	ldr	r2, [pc, #160]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004b28:	f043 0301 	orr.w	r3, r3, #1
 8004b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2e:	4b26      	ldr	r3, [pc, #152]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2105      	movs	r1, #5
 8004b3e:	201c      	movs	r0, #28
 8004b40:	f000 fb0e 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b44:	201c      	movs	r0, #28
 8004b46:	f000 fb27 	bl	8005198 <HAL_NVIC_EnableIRQ>
}
 8004b4a:	e036      	b.n	8004bba <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1e      	ldr	r2, [pc, #120]	; (8004bcc <HAL_TIM_Base_MspInit+0xf8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d116      	bne.n	8004b84 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	4a1a      	ldr	r2, [pc, #104]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004b60:	f043 0302 	orr.w	r3, r3, #2
 8004b64:	6413      	str	r3, [r2, #64]	; 0x40
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004b72:	2200      	movs	r2, #0
 8004b74:	2105      	movs	r1, #5
 8004b76:	201d      	movs	r0, #29
 8004b78:	f000 faf2 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b7c:	201d      	movs	r0, #29
 8004b7e:	f000 fb0b 	bl	8005198 <HAL_NVIC_EnableIRQ>
}
 8004b82:	e01a      	b.n	8004bba <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <HAL_TIM_Base_MspInit+0xfc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d115      	bne.n	8004bba <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <HAL_TIM_Base_MspInit+0xf4>)
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004baa:	2200      	movs	r2, #0
 8004bac:	2105      	movs	r1, #5
 8004bae:	2019      	movs	r0, #25
 8004bb0:	f000 fad6 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004bb4:	2019      	movs	r0, #25
 8004bb6:	f000 faef 	bl	8005198 <HAL_NVIC_EnableIRQ>
}
 8004bba:	bf00      	nop
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40010000 	.word	0x40010000
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40014400 	.word	0x40014400

08004bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	; 0x30
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8004be4:	2200      	movs	r2, #0
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	202d      	movs	r0, #45	; 0x2d
 8004bea:	f000 fab9 	bl	8005160 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004bee:	202d      	movs	r0, #45	; 0x2d
 8004bf0:	f000 fad2 	bl	8005198 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	4b1f      	ldr	r3, [pc, #124]	; (8004c78 <HAL_InitTick+0xa4>)
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	4a1e      	ldr	r2, [pc, #120]	; (8004c78 <HAL_InitTick+0xa4>)
 8004bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c02:	6413      	str	r3, [r2, #64]	; 0x40
 8004c04:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <HAL_InitTick+0xa4>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c10:	f107 0210 	add.w	r2, r7, #16
 8004c14:	f107 0314 	add.w	r3, r7, #20
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f003 fd20 	bl	8008660 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004c20:	f003 fd0a 	bl	8008638 <HAL_RCC_GetPCLK1Freq>
 8004c24:	4603      	mov	r3, r0
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <HAL_InitTick+0xa8>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	0c9b      	lsrs	r3, r3, #18
 8004c34:	3b01      	subs	r3, #1
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <HAL_InitTick+0xac>)
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <HAL_InitTick+0xb0>)
 8004c3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <HAL_InitTick+0xac>)
 8004c40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c44:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004c46:	4a0e      	ldr	r2, [pc, #56]	; (8004c80 <HAL_InitTick+0xac>)
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <HAL_InitTick+0xac>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c52:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <HAL_InitTick+0xac>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004c58:	4809      	ldr	r0, [pc, #36]	; (8004c80 <HAL_InitTick+0xac>)
 8004c5a:	f004 fd3b 	bl	80096d4 <HAL_TIM_Base_Init>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004c64:	4806      	ldr	r0, [pc, #24]	; (8004c80 <HAL_InitTick+0xac>)
 8004c66:	f004 fd85 	bl	8009774 <HAL_TIM_Base_Start_IT>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	e000      	b.n	8004c70 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3730      	adds	r7, #48	; 0x30
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	431bde83 	.word	0x431bde83
 8004c80:	200111bc 	.word	0x200111bc
 8004c84:	40002000 	.word	0x40002000

08004c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c8c:	e7fe      	b.n	8004c8c <NMI_Handler+0x4>

08004c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c92:	e7fe      	b.n	8004c92 <HardFault_Handler+0x4>

08004c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c98:	e7fe      	b.n	8004c98 <MemManage_Handler+0x4>

08004c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c9e:	e7fe      	b.n	8004c9e <BusFault_Handler+0x4>

08004ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ca4:	e7fe      	b.n	8004ca4 <UsageFault_Handler+0x4>

08004ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004cb8:	4803      	ldr	r0, [pc, #12]	; (8004cc8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004cba:	f004 fdfa 	bl	80098b2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004cbe:	4803      	ldr	r0, [pc, #12]	; (8004ccc <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004cc0:	f004 fdf7 	bl	80098b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004cc4:	bf00      	nop
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	2000ed3c 	.word	0x2000ed3c
 8004ccc:	20009180 	.word	0x20009180

08004cd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004cd4:	4802      	ldr	r0, [pc, #8]	; (8004ce0 <TIM2_IRQHandler+0x10>)
 8004cd6:	f004 fdec 	bl	80098b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004cda:	bf00      	nop
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	2000f0ac 	.word	0x2000f0ac

08004ce4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004ce8:	4802      	ldr	r0, [pc, #8]	; (8004cf4 <TIM3_IRQHandler+0x10>)
 8004cea:	f004 fde2 	bl	80098b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004cee:	bf00      	nop
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	2000db50 	.word	0x2000db50

08004cf8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004cfc:	4802      	ldr	r0, [pc, #8]	; (8004d08 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004cfe:	f004 fdd8 	bl	80098b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	200111bc 	.word	0x200111bc

08004d0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004d10:	4802      	ldr	r0, [pc, #8]	; (8004d1c <OTG_FS_IRQHandler+0x10>)
 8004d12:	f002 f812 	bl	8006d3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	2001478c 	.word	0x2001478c

08004d20 <_getpid>:
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	2301      	movs	r3, #1
 8004d26:	4618      	mov	r0, r3
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <_kill>:
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
 8004d3a:	f010 fa0b 	bl	8015154 <__errno>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2216      	movs	r2, #22
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <_exit>:
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ffe7 	bl	8004d30 <_kill>
 8004d62:	e7fe      	b.n	8004d62 <_exit+0x12>

08004d64 <_read>:
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	e00a      	b.n	8004d8c <_read+0x28>
 8004d76:	f3af 8000 	nop.w
 8004d7a:	4601      	mov	r1, r0
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	60ba      	str	r2, [r7, #8]
 8004d82:	b2ca      	uxtb	r2, r1
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	dbf0      	blt.n	8004d76 <_read+0x12>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <_write>:
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b086      	sub	sp, #24
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e009      	b.n	8004dc4 <_write+0x26>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	60ba      	str	r2, [r7, #8]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f3af 8000 	nop.w
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	dbf1      	blt.n	8004db0 <_write+0x12>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <_close>:
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <_fstat>:
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dfe:	605a      	str	r2, [r3, #4]
 8004e00:	2300      	movs	r3, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <_isatty>:
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	2301      	movs	r3, #1
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <_lseek>:
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	2300      	movs	r3, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <_sbrk>:
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <_sbrk+0x5c>)
 8004e4a:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <_sbrk+0x60>)
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <_sbrk+0x64>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <_sbrk+0x22>
 8004e5c:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <_sbrk+0x64>)
 8004e5e:	4a12      	ldr	r2, [pc, #72]	; (8004ea8 <_sbrk+0x68>)
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <_sbrk+0x64>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4413      	add	r3, r2
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d207      	bcs.n	8004e80 <_sbrk+0x40>
 8004e70:	f010 f970 	bl	8015154 <__errno>
 8004e74:	4603      	mov	r3, r0
 8004e76:	220c      	movs	r2, #12
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e7e:	e009      	b.n	8004e94 <_sbrk+0x54>
 8004e80:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <_sbrk+0x64>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <_sbrk+0x64>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	4a05      	ldr	r2, [pc, #20]	; (8004ea4 <_sbrk+0x64>)
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20020000 	.word	0x20020000
 8004ea0:	00000400 	.word	0x00000400
 8004ea4:	20000784 	.word	0x20000784
 8004ea8:	20014ba8 	.word	0x20014ba8

08004eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004eb0:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <SystemInit+0x20>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	4a05      	ldr	r2, [pc, #20]	; (8004ecc <SystemInit+0x20>)
 8004eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ec0:	bf00      	nop
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	e000ed00 	.word	0xe000ed00

08004ed0 <Reset_Handler>:
 8004ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f08 <LoopFillZerobss+0x12>
 8004ed4:	480d      	ldr	r0, [pc, #52]	; (8004f0c <LoopFillZerobss+0x16>)
 8004ed6:	490e      	ldr	r1, [pc, #56]	; (8004f10 <LoopFillZerobss+0x1a>)
 8004ed8:	4a0e      	ldr	r2, [pc, #56]	; (8004f14 <LoopFillZerobss+0x1e>)
 8004eda:	2300      	movs	r3, #0
 8004edc:	e002      	b.n	8004ee4 <LoopCopyDataInit>

08004ede <CopyDataInit>:
 8004ede:	58d4      	ldr	r4, [r2, r3]
 8004ee0:	50c4      	str	r4, [r0, r3]
 8004ee2:	3304      	adds	r3, #4

08004ee4 <LoopCopyDataInit>:
 8004ee4:	18c4      	adds	r4, r0, r3
 8004ee6:	428c      	cmp	r4, r1
 8004ee8:	d3f9      	bcc.n	8004ede <CopyDataInit>
 8004eea:	4a0b      	ldr	r2, [pc, #44]	; (8004f18 <LoopFillZerobss+0x22>)
 8004eec:	4c0b      	ldr	r4, [pc, #44]	; (8004f1c <LoopFillZerobss+0x26>)
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e001      	b.n	8004ef6 <LoopFillZerobss>

08004ef2 <FillZerobss>:
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	3204      	adds	r2, #4

08004ef6 <LoopFillZerobss>:
 8004ef6:	42a2      	cmp	r2, r4
 8004ef8:	d3fb      	bcc.n	8004ef2 <FillZerobss>
 8004efa:	f7ff ffd7 	bl	8004eac <SystemInit>
 8004efe:	f010 fa25 	bl	801534c <__libc_init_array>
 8004f02:	f7fe f9a3 	bl	800324c <main>
 8004f06:	4770      	bx	lr
 8004f08:	20020000 	.word	0x20020000
 8004f0c:	20000000 	.word	0x20000000
 8004f10:	2000036c 	.word	0x2000036c
 8004f14:	08019164 	.word	0x08019164
 8004f18:	20000370 	.word	0x20000370
 8004f1c:	20014ba4 	.word	0x20014ba4

08004f20 <ADC_IRQHandler>:
 8004f20:	e7fe      	b.n	8004f20 <ADC_IRQHandler>
	...

08004f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f28:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <HAL_Init+0x40>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a0d      	ldr	r2, [pc, #52]	; (8004f64 <HAL_Init+0x40>)
 8004f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <HAL_Init+0x40>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <HAL_Init+0x40>)
 8004f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f40:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_Init+0x40>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <HAL_Init+0x40>)
 8004f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	f000 f8fc 	bl	800514a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f52:	200f      	movs	r0, #15
 8004f54:	f7ff fe3e 	bl	8004bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f58:	f7ff fcb4 	bl	80048c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40023c00 	.word	0x40023c00

08004f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <HAL_IncTick+0x20>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <HAL_IncTick+0x24>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4413      	add	r3, r2
 8004f78:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <HAL_IncTick+0x24>)
 8004f7a:	6013      	str	r3, [r2, #0]
}
 8004f7c:	bf00      	nop
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	2000000c 	.word	0x2000000c
 8004f8c:	20011204 	.word	0x20011204

08004f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return uwTick;
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <HAL_GetTick+0x14>)
 8004f96:	681b      	ldr	r3, [r3, #0]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20011204 	.word	0x20011204

08004fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fb0:	f7ff ffee 	bl	8004f90 <HAL_GetTick>
 8004fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fc0:	d005      	beq.n	8004fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <HAL_Delay+0x44>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004fce:	bf00      	nop
 8004fd0:	f7ff ffde 	bl	8004f90 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d8f7      	bhi.n	8004fd0 <HAL_Delay+0x28>
  {
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	2000000c 	.word	0x2000000c

08004ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005000:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <__NVIC_SetPriorityGrouping+0x44>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800500c:	4013      	ands	r3, r2
 800500e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800501c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005022:	4a04      	ldr	r2, [pc, #16]	; (8005034 <__NVIC_SetPriorityGrouping+0x44>)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	60d3      	str	r3, [r2, #12]
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <__NVIC_GetPriorityGrouping+0x18>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	0a1b      	lsrs	r3, r3, #8
 8005042:	f003 0307 	and.w	r3, r3, #7
}
 8005046:	4618      	mov	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800505e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005062:	2b00      	cmp	r3, #0
 8005064:	db0b      	blt.n	800507e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	f003 021f 	and.w	r2, r3, #31
 800506c:	4907      	ldr	r1, [pc, #28]	; (800508c <__NVIC_EnableIRQ+0x38>)
 800506e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	2001      	movs	r0, #1
 8005076:	fa00 f202 	lsl.w	r2, r0, r2
 800507a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	e000e100 	.word	0xe000e100

08005090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	6039      	str	r1, [r7, #0]
 800509a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800509c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	db0a      	blt.n	80050ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	490c      	ldr	r1, [pc, #48]	; (80050dc <__NVIC_SetPriority+0x4c>)
 80050aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ae:	0112      	lsls	r2, r2, #4
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	440b      	add	r3, r1
 80050b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050b8:	e00a      	b.n	80050d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	4908      	ldr	r1, [pc, #32]	; (80050e0 <__NVIC_SetPriority+0x50>)
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	3b04      	subs	r3, #4
 80050c8:	0112      	lsls	r2, r2, #4
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	440b      	add	r3, r1
 80050ce:	761a      	strb	r2, [r3, #24]
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	e000e100 	.word	0xe000e100
 80050e0:	e000ed00 	.word	0xe000ed00

080050e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b089      	sub	sp, #36	; 0x24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f1c3 0307 	rsb	r3, r3, #7
 80050fe:	2b04      	cmp	r3, #4
 8005100:	bf28      	it	cs
 8005102:	2304      	movcs	r3, #4
 8005104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3304      	adds	r3, #4
 800510a:	2b06      	cmp	r3, #6
 800510c:	d902      	bls.n	8005114 <NVIC_EncodePriority+0x30>
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3b03      	subs	r3, #3
 8005112:	e000      	b.n	8005116 <NVIC_EncodePriority+0x32>
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43da      	mvns	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	401a      	ands	r2, r3
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800512c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	43d9      	mvns	r1, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800513c:	4313      	orrs	r3, r2
         );
}
 800513e:	4618      	mov	r0, r3
 8005140:	3724      	adds	r7, #36	; 0x24
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff ff4c 	bl	8004ff0 <__NVIC_SetPriorityGrouping>
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005172:	f7ff ff61 	bl	8005038 <__NVIC_GetPriorityGrouping>
 8005176:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	6978      	ldr	r0, [r7, #20]
 800517e:	f7ff ffb1 	bl	80050e4 <NVIC_EncodePriority>
 8005182:	4602      	mov	r2, r0
 8005184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff ff80 	bl	8005090 <__NVIC_SetPriority>
}
 8005190:	bf00      	nop
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff ff54 	bl	8005054 <__NVIC_EnableIRQ>
}
 80051ac:	bf00      	nop
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b089      	sub	sp, #36	; 0x24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	e16b      	b.n	80054a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051d0:	2201      	movs	r2, #1
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4013      	ands	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	f040 815a 	bne.w	80054a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d005      	beq.n	8005206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005202:	2b02      	cmp	r3, #2
 8005204:	d130      	bne.n	8005268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	2203      	movs	r2, #3
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4313      	orrs	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800523c:	2201      	movs	r2, #1
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	f003 0201 	and.w	r2, r3, #1
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	2b03      	cmp	r3, #3
 8005272:	d017      	beq.n	80052a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	2203      	movs	r2, #3
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4013      	ands	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d123      	bne.n	80052f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	08da      	lsrs	r2, r3, #3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3208      	adds	r2, #8
 80052b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	220f      	movs	r2, #15
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	43db      	mvns	r3, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4013      	ands	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	08da      	lsrs	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3208      	adds	r2, #8
 80052f2:	69b9      	ldr	r1, [r7, #24]
 80052f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	2203      	movs	r2, #3
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4013      	ands	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f003 0203 	and.w	r2, r3, #3
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4313      	orrs	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80b4 	beq.w	80054a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	4b60      	ldr	r3, [pc, #384]	; (80054c0 <HAL_GPIO_Init+0x30c>)
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	4a5f      	ldr	r2, [pc, #380]	; (80054c0 <HAL_GPIO_Init+0x30c>)
 8005344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005348:	6453      	str	r3, [r2, #68]	; 0x44
 800534a:	4b5d      	ldr	r3, [pc, #372]	; (80054c0 <HAL_GPIO_Init+0x30c>)
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005356:	4a5b      	ldr	r2, [pc, #364]	; (80054c4 <HAL_GPIO_Init+0x310>)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	089b      	lsrs	r3, r3, #2
 800535c:	3302      	adds	r3, #2
 800535e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	220f      	movs	r2, #15
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	43db      	mvns	r3, r3
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	4013      	ands	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a52      	ldr	r2, [pc, #328]	; (80054c8 <HAL_GPIO_Init+0x314>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02b      	beq.n	80053da <HAL_GPIO_Init+0x226>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a51      	ldr	r2, [pc, #324]	; (80054cc <HAL_GPIO_Init+0x318>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d025      	beq.n	80053d6 <HAL_GPIO_Init+0x222>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a50      	ldr	r2, [pc, #320]	; (80054d0 <HAL_GPIO_Init+0x31c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01f      	beq.n	80053d2 <HAL_GPIO_Init+0x21e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a4f      	ldr	r2, [pc, #316]	; (80054d4 <HAL_GPIO_Init+0x320>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d019      	beq.n	80053ce <HAL_GPIO_Init+0x21a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a4e      	ldr	r2, [pc, #312]	; (80054d8 <HAL_GPIO_Init+0x324>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <HAL_GPIO_Init+0x216>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a4d      	ldr	r2, [pc, #308]	; (80054dc <HAL_GPIO_Init+0x328>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00d      	beq.n	80053c6 <HAL_GPIO_Init+0x212>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a4c      	ldr	r2, [pc, #304]	; (80054e0 <HAL_GPIO_Init+0x32c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d007      	beq.n	80053c2 <HAL_GPIO_Init+0x20e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a4b      	ldr	r2, [pc, #300]	; (80054e4 <HAL_GPIO_Init+0x330>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d101      	bne.n	80053be <HAL_GPIO_Init+0x20a>
 80053ba:	2307      	movs	r3, #7
 80053bc:	e00e      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053be:	2308      	movs	r3, #8
 80053c0:	e00c      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053c2:	2306      	movs	r3, #6
 80053c4:	e00a      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053c6:	2305      	movs	r3, #5
 80053c8:	e008      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053ca:	2304      	movs	r3, #4
 80053cc:	e006      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053ce:	2303      	movs	r3, #3
 80053d0:	e004      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e002      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <HAL_GPIO_Init+0x228>
 80053da:	2300      	movs	r3, #0
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	f002 0203 	and.w	r2, r2, #3
 80053e2:	0092      	lsls	r2, r2, #2
 80053e4:	4093      	lsls	r3, r2
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053ec:	4935      	ldr	r1, [pc, #212]	; (80054c4 <HAL_GPIO_Init+0x310>)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	089b      	lsrs	r3, r3, #2
 80053f2:	3302      	adds	r3, #2
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053fa:	4b3b      	ldr	r3, [pc, #236]	; (80054e8 <HAL_GPIO_Init+0x334>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	43db      	mvns	r3, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4013      	ands	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800541e:	4a32      	ldr	r2, [pc, #200]	; (80054e8 <HAL_GPIO_Init+0x334>)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005424:	4b30      	ldr	r3, [pc, #192]	; (80054e8 <HAL_GPIO_Init+0x334>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	43db      	mvns	r3, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4013      	ands	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005448:	4a27      	ldr	r2, [pc, #156]	; (80054e8 <HAL_GPIO_Init+0x334>)
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800544e:	4b26      	ldr	r3, [pc, #152]	; (80054e8 <HAL_GPIO_Init+0x334>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	43db      	mvns	r3, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	4013      	ands	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005472:	4a1d      	ldr	r2, [pc, #116]	; (80054e8 <HAL_GPIO_Init+0x334>)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005478:	4b1b      	ldr	r3, [pc, #108]	; (80054e8 <HAL_GPIO_Init+0x334>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	43db      	mvns	r3, r3
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	4013      	ands	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800549c:	4a12      	ldr	r2, [pc, #72]	; (80054e8 <HAL_GPIO_Init+0x334>)
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3301      	adds	r3, #1
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b0f      	cmp	r3, #15
 80054ac:	f67f ae90 	bls.w	80051d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	3724      	adds	r7, #36	; 0x24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800
 80054c4:	40013800 	.word	0x40013800
 80054c8:	40020000 	.word	0x40020000
 80054cc:	40020400 	.word	0x40020400
 80054d0:	40020800 	.word	0x40020800
 80054d4:	40020c00 	.word	0x40020c00
 80054d8:	40021000 	.word	0x40021000
 80054dc:	40021400 	.word	0x40021400
 80054e0:	40021800 	.word	0x40021800
 80054e4:	40021c00 	.word	0x40021c00
 80054e8:	40013c00 	.word	0x40013c00

080054ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	807b      	strh	r3, [r7, #2]
 80054f8:	4613      	mov	r3, r2
 80054fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054fc:	787b      	ldrb	r3, [r7, #1]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005502:	887a      	ldrh	r2, [r7, #2]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005508:	e003      	b.n	8005512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800550a:	887b      	ldrh	r3, [r7, #2]
 800550c:	041a      	lsls	r2, r3, #16
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	619a      	str	r2, [r3, #24]
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800551e:	b480      	push	{r7}
 8005520:	b085      	sub	sp, #20
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005530:	887a      	ldrh	r2, [r7, #2]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4013      	ands	r3, r2
 8005536:	041a      	lsls	r2, r3, #16
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	43d9      	mvns	r1, r3
 800553c:	887b      	ldrh	r3, [r7, #2]
 800553e:	400b      	ands	r3, r1
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	619a      	str	r2, [r3, #24]
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e12b      	b.n	80057be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff f9ce 	bl	800491c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2224      	movs	r2, #36	; 0x24
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055b8:	f003 f83e 	bl	8008638 <HAL_RCC_GetPCLK1Freq>
 80055bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	4a81      	ldr	r2, [pc, #516]	; (80057c8 <HAL_I2C_Init+0x274>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d807      	bhi.n	80055d8 <HAL_I2C_Init+0x84>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4a80      	ldr	r2, [pc, #512]	; (80057cc <HAL_I2C_Init+0x278>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	bf94      	ite	ls
 80055d0:	2301      	movls	r3, #1
 80055d2:	2300      	movhi	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	e006      	b.n	80055e6 <HAL_I2C_Init+0x92>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4a7d      	ldr	r2, [pc, #500]	; (80057d0 <HAL_I2C_Init+0x27c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	bf94      	ite	ls
 80055e0:	2301      	movls	r3, #1
 80055e2:	2300      	movhi	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0e7      	b.n	80057be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4a78      	ldr	r2, [pc, #480]	; (80057d4 <HAL_I2C_Init+0x280>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	0c9b      	lsrs	r3, r3, #18
 80055f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4a6a      	ldr	r2, [pc, #424]	; (80057c8 <HAL_I2C_Init+0x274>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d802      	bhi.n	8005628 <HAL_I2C_Init+0xd4>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	3301      	adds	r3, #1
 8005626:	e009      	b.n	800563c <HAL_I2C_Init+0xe8>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	4a69      	ldr	r2, [pc, #420]	; (80057d8 <HAL_I2C_Init+0x284>)
 8005634:	fba2 2303 	umull	r2, r3, r2, r3
 8005638:	099b      	lsrs	r3, r3, #6
 800563a:	3301      	adds	r3, #1
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	430b      	orrs	r3, r1
 8005642:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800564e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	495c      	ldr	r1, [pc, #368]	; (80057c8 <HAL_I2C_Init+0x274>)
 8005658:	428b      	cmp	r3, r1
 800565a:	d819      	bhi.n	8005690 <HAL_I2C_Init+0x13c>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	1e59      	subs	r1, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	fbb1 f3f3 	udiv	r3, r1, r3
 800566a:	1c59      	adds	r1, r3, #1
 800566c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005670:	400b      	ands	r3, r1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_I2C_Init+0x138>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1e59      	subs	r1, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	fbb1 f3f3 	udiv	r3, r1, r3
 8005684:	3301      	adds	r3, #1
 8005686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800568a:	e051      	b.n	8005730 <HAL_I2C_Init+0x1dc>
 800568c:	2304      	movs	r3, #4
 800568e:	e04f      	b.n	8005730 <HAL_I2C_Init+0x1dc>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d111      	bne.n	80056bc <HAL_I2C_Init+0x168>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	1e58      	subs	r0, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6859      	ldr	r1, [r3, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	440b      	add	r3, r1
 80056a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056aa:	3301      	adds	r3, #1
 80056ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	e012      	b.n	80056e2 <HAL_I2C_Init+0x18e>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1e58      	subs	r0, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6859      	ldr	r1, [r3, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	0099      	lsls	r1, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80056d2:	3301      	adds	r3, #1
 80056d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bf0c      	ite	eq
 80056dc:	2301      	moveq	r3, #1
 80056de:	2300      	movne	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_I2C_Init+0x196>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e022      	b.n	8005730 <HAL_I2C_Init+0x1dc>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10e      	bne.n	8005710 <HAL_I2C_Init+0x1bc>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1e58      	subs	r0, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6859      	ldr	r1, [r3, #4]
 80056fa:	460b      	mov	r3, r1
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	440b      	add	r3, r1
 8005700:	fbb0 f3f3 	udiv	r3, r0, r3
 8005704:	3301      	adds	r3, #1
 8005706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800570a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570e:	e00f      	b.n	8005730 <HAL_I2C_Init+0x1dc>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1e58      	subs	r0, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	0099      	lsls	r1, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	fbb0 f3f3 	udiv	r3, r0, r3
 8005726:	3301      	adds	r3, #1
 8005728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	6809      	ldr	r1, [r1, #0]
 8005734:	4313      	orrs	r3, r2
 8005736:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800575e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6911      	ldr	r1, [r2, #16]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68d2      	ldr	r2, [r2, #12]
 800576a:	4311      	orrs	r1, r2
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	430b      	orrs	r3, r1
 8005772:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	000186a0 	.word	0x000186a0
 80057cc:	001e847f 	.word	0x001e847f
 80057d0:	003d08ff 	.word	0x003d08ff
 80057d4:	431bde83 	.word	0x431bde83
 80057d8:	10624dd3 	.word	0x10624dd3

080057dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	461a      	mov	r2, r3
 80057e8:	460b      	mov	r3, r1
 80057ea:	817b      	strh	r3, [r7, #10]
 80057ec:	4613      	mov	r3, r2
 80057ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057f0:	f7ff fbce 	bl	8004f90 <HAL_GetTick>
 80057f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b20      	cmp	r3, #32
 8005800:	f040 80e0 	bne.w	80059c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	2319      	movs	r3, #25
 800580a:	2201      	movs	r2, #1
 800580c:	4970      	ldr	r1, [pc, #448]	; (80059d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 ff66 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800581a:	2302      	movs	r3, #2
 800581c:	e0d3      	b.n	80059c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_I2C_Master_Transmit+0x50>
 8005828:	2302      	movs	r3, #2
 800582a:	e0cc      	b.n	80059c6 <HAL_I2C_Master_Transmit+0x1ea>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b01      	cmp	r3, #1
 8005840:	d007      	beq.n	8005852 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0201 	orr.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005860:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2221      	movs	r2, #33	; 0x21
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2210      	movs	r2, #16
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	893a      	ldrh	r2, [r7, #8]
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4a50      	ldr	r2, [pc, #320]	; (80059d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005892:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005894:	8979      	ldrh	r1, [r7, #10]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fce8 	bl	8006270 <I2C_MasterRequestWrite>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e08d      	b.n	80059c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80058c0:	e066      	b.n	8005990 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	6a39      	ldr	r1, [r7, #32]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 ffe0 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00d      	beq.n	80058ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d107      	bne.n	80058ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e06b      	b.n	80059c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d11b      	bne.n	8005964 <HAL_I2C_Master_Transmit+0x188>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005930:	2b00      	cmp	r3, #0
 8005932:	d017      	beq.n	8005964 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	6a39      	ldr	r1, [r7, #32]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 ffd0 	bl	800690e <I2C_WaitOnBTFFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00d      	beq.n	8005990 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	2b04      	cmp	r3, #4
 800597a:	d107      	bne.n	800598c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800598a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e01a      	b.n	80059c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005994:	2b00      	cmp	r3, #0
 8005996:	d194      	bne.n	80058c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	e000      	b.n	80059c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80059c4:	2302      	movs	r3, #2
  }
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	00100002 	.word	0x00100002
 80059d4:	ffff0000 	.word	0xffff0000

080059d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08c      	sub	sp, #48	; 0x30
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	461a      	mov	r2, r3
 80059e4:	460b      	mov	r3, r1
 80059e6:	817b      	strh	r3, [r7, #10]
 80059e8:	4613      	mov	r3, r2
 80059ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059ec:	f7ff fad0 	bl	8004f90 <HAL_GetTick>
 80059f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	f040 820b 	bne.w	8005e16 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2319      	movs	r3, #25
 8005a06:	2201      	movs	r2, #1
 8005a08:	497c      	ldr	r1, [pc, #496]	; (8005bfc <HAL_I2C_Master_Receive+0x224>)
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fe68 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005a16:	2302      	movs	r3, #2
 8005a18:	e1fe      	b.n	8005e18 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_I2C_Master_Receive+0x50>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e1f7      	b.n	8005e18 <HAL_I2C_Master_Receive+0x440>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d007      	beq.n	8005a4e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2222      	movs	r2, #34	; 0x22
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2210      	movs	r2, #16
 8005a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	893a      	ldrh	r2, [r7, #8]
 8005a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a5c      	ldr	r2, [pc, #368]	; (8005c00 <HAL_I2C_Master_Receive+0x228>)
 8005a8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a90:	8979      	ldrh	r1, [r7, #10]
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fc6c 	bl	8006374 <I2C_MasterRequestRead>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e1b8      	b.n	8005e18 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d113      	bne.n	8005ad6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	623b      	str	r3, [r7, #32]
 8005ac2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e18c      	b.n	8005df0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d11b      	bne.n	8005b16 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	e16c      	b.n	8005df0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d11b      	bne.n	8005b56 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	e14c      	b.n	8005df0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b7c:	e138      	b.n	8005df0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	f200 80f1 	bhi.w	8005d6a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d123      	bne.n	8005bd8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 fefb 	bl	8006990 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e139      	b.n	8005e18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bd6:	e10b      	b.n	8005df0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d14e      	bne.n	8005c7e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	2200      	movs	r2, #0
 8005be8:	4906      	ldr	r1, [pc, #24]	; (8005c04 <HAL_I2C_Master_Receive+0x22c>)
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fd78 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d008      	beq.n	8005c08 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e10e      	b.n	8005e18 <HAL_I2C_Master_Receive+0x440>
 8005bfa:	bf00      	nop
 8005bfc:	00100002 	.word	0x00100002
 8005c00:	ffff0000 	.word	0xffff0000
 8005c04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c7c:	e0b8      	b.n	8005df0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	2200      	movs	r2, #0
 8005c86:	4966      	ldr	r1, [pc, #408]	; (8005e20 <HAL_I2C_Master_Receive+0x448>)
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fd29 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0bf      	b.n	8005e18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	494f      	ldr	r1, [pc, #316]	; (8005e20 <HAL_I2C_Master_Receive+0x448>)
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fcfb 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e091      	b.n	8005e18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d68:	e042      	b.n	8005df0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fe0e 	bl	8006990 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e04c      	b.n	8005e18 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d118      	bne.n	8005df0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f47f aec2 	bne.w	8005b7e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	e000      	b.n	8005e18 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e16:	2302      	movs	r3, #2
  }
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3728      	adds	r7, #40	; 0x28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	00010004 	.word	0x00010004

08005e24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	; 0x30
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	817b      	strh	r3, [r7, #10]
 8005e36:	460b      	mov	r3, r1
 8005e38:	813b      	strh	r3, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e3e:	f7ff f8a7 	bl	8004f90 <HAL_GetTick>
 8005e42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	f040 8208 	bne.w	8006262 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2319      	movs	r3, #25
 8005e58:	2201      	movs	r2, #1
 8005e5a:	497b      	ldr	r1, [pc, #492]	; (8006048 <HAL_I2C_Mem_Read+0x224>)
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fc3f 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e1fb      	b.n	8006264 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_I2C_Mem_Read+0x56>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e1f4      	b.n	8006264 <HAL_I2C_Mem_Read+0x440>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d007      	beq.n	8005ea0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2222      	movs	r2, #34	; 0x22
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2240      	movs	r2, #64	; 0x40
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a5b      	ldr	r2, [pc, #364]	; (800604c <HAL_I2C_Mem_Read+0x228>)
 8005ee0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ee2:	88f8      	ldrh	r0, [r7, #6]
 8005ee4:	893a      	ldrh	r2, [r7, #8]
 8005ee6:	8979      	ldrh	r1, [r7, #10]
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fb0c 	bl	8006510 <I2C_RequestMemoryRead>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e1b0      	b.n	8006264 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d113      	bne.n	8005f32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	623b      	str	r3, [r7, #32]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	623b      	str	r3, [r7, #32]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	623b      	str	r3, [r7, #32]
 8005f1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	e184      	b.n	800623c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d11b      	bne.n	8005f72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61fb      	str	r3, [r7, #28]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	e164      	b.n	800623c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d11b      	bne.n	8005fb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	e144      	b.n	800623c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fc8:	e138      	b.n	800623c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	f200 80f1 	bhi.w	80061b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d123      	bne.n	8006024 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fcd5 	bl	8006990 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e139      	b.n	8006264 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006022:	e10b      	b.n	800623c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006028:	2b02      	cmp	r3, #2
 800602a:	d14e      	bne.n	80060ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	2200      	movs	r2, #0
 8006034:	4906      	ldr	r1, [pc, #24]	; (8006050 <HAL_I2C_Mem_Read+0x22c>)
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 fb52 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e10e      	b.n	8006264 <HAL_I2C_Mem_Read+0x440>
 8006046:	bf00      	nop
 8006048:	00100002 	.word	0x00100002
 800604c:	ffff0000 	.word	0xffff0000
 8006050:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060c8:	e0b8      	b.n	800623c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d0:	2200      	movs	r2, #0
 80060d2:	4966      	ldr	r1, [pc, #408]	; (800626c <HAL_I2C_Mem_Read+0x448>)
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 fb03 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0bf      	b.n	8006264 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	2200      	movs	r2, #0
 800612e:	494f      	ldr	r1, [pc, #316]	; (800626c <HAL_I2C_Mem_Read+0x448>)
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fad5 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e091      	b.n	8006264 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800614e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061b4:	e042      	b.n	800623c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fbe8 	bl	8006990 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e04c      	b.n	8006264 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b04      	cmp	r3, #4
 8006208:	d118      	bne.n	800623c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	2b00      	cmp	r3, #0
 8006242:	f47f aec2 	bne.w	8005fca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2220      	movs	r2, #32
 800624a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	e000      	b.n	8006264 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	3728      	adds	r7, #40	; 0x28
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	00010004 	.word	0x00010004

08006270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af02      	add	r7, sp, #8
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	607a      	str	r2, [r7, #4]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	460b      	mov	r3, r1
 800627e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d006      	beq.n	800629a <I2C_MasterRequestWrite+0x2a>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d003      	beq.n	800629a <I2C_MasterRequestWrite+0x2a>
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006298:	d108      	bne.n	80062ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	e00b      	b.n	80062c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b0:	2b12      	cmp	r3, #18
 80062b2:	d107      	bne.n	80062c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 fa05 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00d      	beq.n	80062f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ea:	d103      	bne.n	80062f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e035      	b.n	8006364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006300:	d108      	bne.n	8006314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006302:	897b      	ldrh	r3, [r7, #10]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	461a      	mov	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006310:	611a      	str	r2, [r3, #16]
 8006312:	e01b      	b.n	800634c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006314:	897b      	ldrh	r3, [r7, #10]
 8006316:	11db      	asrs	r3, r3, #7
 8006318:	b2db      	uxtb	r3, r3
 800631a:	f003 0306 	and.w	r3, r3, #6
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f063 030f 	orn	r3, r3, #15
 8006324:	b2da      	uxtb	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	490e      	ldr	r1, [pc, #56]	; (800636c <I2C_MasterRequestWrite+0xfc>)
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fa2b 	bl	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e010      	b.n	8006364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006342:	897b      	ldrh	r3, [r7, #10]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	4907      	ldr	r1, [pc, #28]	; (8006370 <I2C_MasterRequestWrite+0x100>)
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 fa1b 	bl	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	00010008 	.word	0x00010008
 8006370:	00010002 	.word	0x00010002

08006374 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af02      	add	r7, sp, #8
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	607a      	str	r2, [r7, #4]
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	460b      	mov	r3, r1
 8006382:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006398:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b08      	cmp	r3, #8
 800639e:	d006      	beq.n	80063ae <I2C_MasterRequestRead+0x3a>
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d003      	beq.n	80063ae <I2C_MasterRequestRead+0x3a>
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063ac:	d108      	bne.n	80063c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e00b      	b.n	80063d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	2b11      	cmp	r3, #17
 80063c6:	d107      	bne.n	80063d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f97b 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fe:	d103      	bne.n	8006408 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e079      	b.n	8006500 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006414:	d108      	bne.n	8006428 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006416:	897b      	ldrh	r3, [r7, #10]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	b2da      	uxtb	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	611a      	str	r2, [r3, #16]
 8006426:	e05f      	b.n	80064e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006428:	897b      	ldrh	r3, [r7, #10]
 800642a:	11db      	asrs	r3, r3, #7
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 0306 	and.w	r3, r3, #6
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f063 030f 	orn	r3, r3, #15
 8006438:	b2da      	uxtb	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	4930      	ldr	r1, [pc, #192]	; (8006508 <I2C_MasterRequestRead+0x194>)
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f9a1 	bl	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e054      	b.n	8006500 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006456:	897b      	ldrh	r3, [r7, #10]
 8006458:	b2da      	uxtb	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	4929      	ldr	r1, [pc, #164]	; (800650c <I2C_MasterRequestRead+0x198>)
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f991 	bl	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e044      	b.n	8006500 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800649a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f919 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00d      	beq.n	80064d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c2:	d103      	bne.n	80064cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e017      	b.n	8006500 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80064d0:	897b      	ldrh	r3, [r7, #10]
 80064d2:	11db      	asrs	r3, r3, #7
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	f003 0306 	and.w	r3, r3, #6
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	f063 030e 	orn	r3, r3, #14
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	4907      	ldr	r1, [pc, #28]	; (800650c <I2C_MasterRequestRead+0x198>)
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f94d 	bl	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	00010008 	.word	0x00010008
 800650c:	00010002 	.word	0x00010002

08006510 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	4608      	mov	r0, r1
 800651a:	4611      	mov	r1, r2
 800651c:	461a      	mov	r2, r3
 800651e:	4603      	mov	r3, r0
 8006520:	817b      	strh	r3, [r7, #10]
 8006522:	460b      	mov	r3, r1
 8006524:	813b      	strh	r3, [r7, #8]
 8006526:	4613      	mov	r3, r2
 8006528:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006538:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006548:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	2200      	movs	r2, #0
 8006552:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f8c2 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00d      	beq.n	800657e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006570:	d103      	bne.n	800657a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006578:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e0aa      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800657e:	897b      	ldrh	r3, [r7, #10]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800658c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	6a3a      	ldr	r2, [r7, #32]
 8006592:	4952      	ldr	r1, [pc, #328]	; (80066dc <I2C_RequestMemoryRead+0x1cc>)
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 f8fa 	bl	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e097      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065bc:	6a39      	ldr	r1, [r7, #32]
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 f964 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00d      	beq.n	80065e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d107      	bne.n	80065e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e076      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d105      	bne.n	80065f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065ec:	893b      	ldrh	r3, [r7, #8]
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	611a      	str	r2, [r3, #16]
 80065f6:	e021      	b.n	800663c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065f8:	893b      	ldrh	r3, [r7, #8]
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006608:	6a39      	ldr	r1, [r7, #32]
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f93e 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00d      	beq.n	8006632 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	2b04      	cmp	r3, #4
 800661c:	d107      	bne.n	800662e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800662c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e050      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006632:	893b      	ldrh	r3, [r7, #8]
 8006634:	b2da      	uxtb	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800663c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663e:	6a39      	ldr	r1, [r7, #32]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f923 	bl	800688c <I2C_WaitOnTXEFlagUntilTimeout>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00d      	beq.n	8006668 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	2b04      	cmp	r3, #4
 8006652:	d107      	bne.n	8006664 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006662:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e035      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006676:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	2200      	movs	r2, #0
 8006680:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f82b 	bl	80066e0 <I2C_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00d      	beq.n	80066ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669e:	d103      	bne.n	80066a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e013      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066ac:	897b      	ldrh	r3, [r7, #10]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f043 0301 	orr.w	r3, r3, #1
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	6a3a      	ldr	r2, [r7, #32]
 80066c0:	4906      	ldr	r1, [pc, #24]	; (80066dc <I2C_RequestMemoryRead+0x1cc>)
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 f863 	bl	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	00010002 	.word	0x00010002

080066e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	4613      	mov	r3, r2
 80066ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066f0:	e025      	b.n	800673e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066f8:	d021      	beq.n	800673e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fa:	f7fe fc49 	bl	8004f90 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d302      	bcc.n	8006710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d116      	bne.n	800673e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	f043 0220 	orr.w	r2, r3, #32
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e023      	b.n	8006786 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	d10d      	bne.n	8006764 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	43da      	mvns	r2, r3
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4013      	ands	r3, r2
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	bf0c      	ite	eq
 800675a:	2301      	moveq	r3, #1
 800675c:	2300      	movne	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	e00c      	b.n	800677e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	43da      	mvns	r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4013      	ands	r3, r2
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	bf0c      	ite	eq
 8006776:	2301      	moveq	r3, #1
 8006778:	2300      	movne	r3, #0
 800677a:	b2db      	uxtb	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	429a      	cmp	r2, r3
 8006782:	d0b6      	beq.n	80066f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800679c:	e051      	b.n	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ac:	d123      	bne.n	80067f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f043 0204 	orr.w	r2, r3, #4
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e046      	b.n	8006884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067fc:	d021      	beq.n	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fe:	f7fe fbc7 	bl	8004f90 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d302      	bcc.n	8006814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d116      	bne.n	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	f043 0220 	orr.w	r2, r3, #32
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e020      	b.n	8006884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	d10c      	bne.n	8006866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	43da      	mvns	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4013      	ands	r3, r2
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	bf14      	ite	ne
 800685e:	2301      	movne	r3, #1
 8006860:	2300      	moveq	r3, #0
 8006862:	b2db      	uxtb	r3, r3
 8006864:	e00b      	b.n	800687e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	43da      	mvns	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4013      	ands	r3, r2
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d18d      	bne.n	800679e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006898:	e02d      	b.n	80068f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f8ce 	bl	8006a3c <I2C_IsAcknowledgeFailed>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e02d      	b.n	8006906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068b0:	d021      	beq.n	80068f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b2:	f7fe fb6d 	bl	8004f90 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d116      	bne.n	80068f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f043 0220 	orr.w	r2, r3, #32
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e007      	b.n	8006906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006900:	2b80      	cmp	r3, #128	; 0x80
 8006902:	d1ca      	bne.n	800689a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800691a:	e02d      	b.n	8006978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 f88d 	bl	8006a3c <I2C_IsAcknowledgeFailed>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e02d      	b.n	8006988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006932:	d021      	beq.n	8006978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006934:	f7fe fb2c 	bl	8004f90 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	d302      	bcc.n	800694a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d116      	bne.n	8006978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	f043 0220 	orr.w	r2, r3, #32
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e007      	b.n	8006988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b04      	cmp	r3, #4
 8006984:	d1ca      	bne.n	800691c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800699c:	e042      	b.n	8006a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	d119      	bne.n	80069e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0210 	mvn.w	r2, #16
 80069b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e029      	b.n	8006a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e0:	f7fe fad6 	bl	8004f90 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d302      	bcc.n	80069f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d116      	bne.n	8006a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	f043 0220 	orr.w	r2, r3, #32
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e007      	b.n	8006a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d1b5      	bne.n	800699e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a52:	d11b      	bne.n	8006a8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	f043 0204 	orr.w	r2, r3, #4
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a9c:	b08f      	sub	sp, #60	; 0x3c
 8006a9e:	af0a      	add	r7, sp, #40	; 0x28
 8006aa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e10f      	b.n	8006ccc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f00e f822 	bl	8014b10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2203      	movs	r2, #3
 8006ad0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f003 fbb7 	bl	800a25e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	603b      	str	r3, [r7, #0]
 8006af6:	687e      	ldr	r6, [r7, #4]
 8006af8:	466d      	mov	r5, sp
 8006afa:	f106 0410 	add.w	r4, r6, #16
 8006afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b0e:	1d33      	adds	r3, r6, #4
 8006b10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b12:	6838      	ldr	r0, [r7, #0]
 8006b14:	f003 fa8e 	bl	800a034 <USB_CoreInit>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e0d0      	b.n	8006ccc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f003 fba5 	bl	800a280 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]
 8006b3a:	e04a      	b.n	8006bd2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006b3c:	7bfa      	ldrb	r2, [r7, #15]
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	4613      	mov	r3, r2
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	1a9b      	subs	r3, r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	333d      	adds	r3, #61	; 0x3d
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b50:	7bfa      	ldrb	r2, [r7, #15]
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4613      	mov	r3, r2
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	1a9b      	subs	r3, r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	333c      	adds	r3, #60	; 0x3c
 8006b60:	7bfa      	ldrb	r2, [r7, #15]
 8006b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006b64:	7bfa      	ldrb	r2, [r7, #15]
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	b298      	uxth	r0, r3
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	1a9b      	subs	r3, r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	3342      	adds	r3, #66	; 0x42
 8006b78:	4602      	mov	r2, r0
 8006b7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006b7c:	7bfa      	ldrb	r2, [r7, #15]
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	4613      	mov	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	440b      	add	r3, r1
 8006b8a:	333f      	adds	r3, #63	; 0x3f
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006b90:	7bfa      	ldrb	r2, [r7, #15]
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	4613      	mov	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	3344      	adds	r3, #68	; 0x44
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006ba4:	7bfa      	ldrb	r2, [r7, #15]
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	1a9b      	subs	r3, r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	3348      	adds	r3, #72	; 0x48
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006bb8:	7bfa      	ldrb	r2, [r7, #15]
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	3350      	adds	r3, #80	; 0x50
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	73fb      	strb	r3, [r7, #15]
 8006bd2:	7bfa      	ldrb	r2, [r7, #15]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d3af      	bcc.n	8006b3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]
 8006be0:	e044      	b.n	8006c6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006be2:	7bfa      	ldrb	r2, [r7, #15]
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006bf8:	7bfa      	ldrb	r2, [r7, #15]
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	1a9b      	subs	r3, r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	440b      	add	r3, r1
 8006c06:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006c0a:	7bfa      	ldrb	r2, [r7, #15]
 8006c0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c0e:	7bfa      	ldrb	r2, [r7, #15]
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c24:	7bfa      	ldrb	r2, [r7, #15]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c3a:	7bfa      	ldrb	r2, [r7, #15]
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006c50:	7bfa      	ldrb	r2, [r7, #15]
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	73fb      	strb	r3, [r7, #15]
 8006c6c:	7bfa      	ldrb	r2, [r7, #15]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d3b5      	bcc.n	8006be2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	687e      	ldr	r6, [r7, #4]
 8006c7e:	466d      	mov	r5, sp
 8006c80:	f106 0410 	add.w	r4, r6, #16
 8006c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c90:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c94:	1d33      	adds	r3, r6, #4
 8006c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c98:	6838      	ldr	r0, [r7, #0]
 8006c9a:	f003 fb3d 	bl	800a318 <USB_DevInit>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d005      	beq.n	8006cb0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e00d      	b.n	8006ccc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f004 fbb9 	bl	800b43c <USB_DevDisconnect>

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cd4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_PCD_Start+0x1c>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e020      	b.n	8006d32 <HAL_PCD_Start+0x5e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d109      	bne.n	8006d14 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d005      	beq.n	8006d14 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f003 fa8f 	bl	800a23c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f004 fb69 	bl	800b3fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006d3a:	b590      	push	{r4, r7, lr}
 8006d3c:	b08d      	sub	sp, #52	; 0x34
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f004 fc27 	bl	800b5a4 <USB_GetMode>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f040 839d 	bne.w	8007498 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f004 fb8b 	bl	800b47e <USB_ReadInterrupts>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 8393 	beq.w	8007496 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f004 fb82 	bl	800b47e <USB_ReadInterrupts>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d107      	bne.n	8006d94 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695a      	ldr	r2, [r3, #20]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f002 0202 	and.w	r2, r2, #2
 8006d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f004 fb70 	bl	800b47e <USB_ReadInterrupts>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f003 0310 	and.w	r3, r3, #16
 8006da4:	2b10      	cmp	r3, #16
 8006da6:	d161      	bne.n	8006e6c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699a      	ldr	r2, [r3, #24]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0210 	bic.w	r2, r2, #16
 8006db6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	f003 020f 	and.w	r2, r3, #15
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	1a9b      	subs	r3, r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	0c5b      	lsrs	r3, r3, #17
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d124      	bne.n	8006e2e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d035      	beq.n	8006e5c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	091b      	lsrs	r3, r3, #4
 8006df8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	6a38      	ldr	r0, [r7, #32]
 8006e04:	f004 f9a7 	bl	800b156 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	091b      	lsrs	r3, r3, #4
 8006e10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e14:	441a      	add	r2, r3
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	091b      	lsrs	r3, r3, #4
 8006e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e26:	441a      	add	r2, r3
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	619a      	str	r2, [r3, #24]
 8006e2c:	e016      	b.n	8006e5c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	0c5b      	lsrs	r3, r3, #17
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	2b06      	cmp	r3, #6
 8006e38:	d110      	bne.n	8006e5c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e40:	2208      	movs	r2, #8
 8006e42:	4619      	mov	r1, r3
 8006e44:	6a38      	ldr	r0, [r7, #32]
 8006e46:	f004 f986 	bl	800b156 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	091b      	lsrs	r3, r3, #4
 8006e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e56:	441a      	add	r2, r3
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0210 	orr.w	r2, r2, #16
 8006e6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f004 fb04 	bl	800b47e <USB_ReadInterrupts>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e80:	d16e      	bne.n	8006f60 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f004 fb0a 	bl	800b4a4 <USB_ReadDevAllOutEpInterrupt>
 8006e90:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006e92:	e062      	b.n	8006f5a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d057      	beq.n	8006f4e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f004 fb2f 	bl	800b50c <USB_ReadDevOutEPInterrupt>
 8006eae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00c      	beq.n	8006ed4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	2301      	movs	r3, #1
 8006eca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fdb0 	bl	8007a34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	461a      	mov	r2, r3
 8006eec:	2308      	movs	r3, #8
 8006eee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 feaa 	bl	8007c4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f003 0310 	and.w	r3, r3, #16
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d008      	beq.n	8006f14 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2310      	movs	r3, #16
 8006f12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d008      	beq.n	8006f30 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	2320      	movs	r3, #32
 8006f2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f46:	461a      	mov	r2, r3
 8006f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	3301      	adds	r3, #1
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	085b      	lsrs	r3, r3, #1
 8006f58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d199      	bne.n	8006e94 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f004 fa8a 	bl	800b47e <USB_ReadInterrupts>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f74:	f040 80c0 	bne.w	80070f8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f004 faab 	bl	800b4d8 <USB_ReadDevAllInEpInterrupt>
 8006f82:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006f88:	e0b2      	b.n	80070f0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 80a7 	beq.w	80070e4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f004 fad1 	bl	800b548 <USB_ReadDevInEPInterrupt>
 8006fa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d057      	beq.n	8007062 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	f003 030f 	and.w	r3, r3, #15
 8006fb8:	2201      	movs	r2, #1
 8006fba:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	43db      	mvns	r3, r3
 8006fcc:	69f9      	ldr	r1, [r7, #28]
 8006fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d132      	bne.n	8007056 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	3348      	adds	r3, #72	; 0x48
 8007000:	6819      	ldr	r1, [r3, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007006:	4613      	mov	r3, r2
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	1a9b      	subs	r3, r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4403      	add	r3, r0
 8007010:	3344      	adds	r3, #68	; 0x44
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4419      	add	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701a:	4613      	mov	r3, r2
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	1a9b      	subs	r3, r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4403      	add	r3, r0
 8007024:	3348      	adds	r3, #72	; 0x48
 8007026:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	d113      	bne.n	8007056 <HAL_PCD_IRQHandler+0x31c>
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007032:	4613      	mov	r3, r2
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	1a9b      	subs	r3, r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	440b      	add	r3, r1
 800703c:	3350      	adds	r3, #80	; 0x50
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d108      	bne.n	8007056 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800704e:	461a      	mov	r2, r3
 8007050:	2101      	movs	r1, #1
 8007052:	f004 fad9 	bl	800b608 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	b2db      	uxtb	r3, r3
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f00d fde6 	bl	8014c2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007078:	461a      	mov	r2, r3
 800707a:	2308      	movs	r3, #8
 800707c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f003 0310 	and.w	r3, r3, #16
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007094:	461a      	mov	r2, r3
 8007096:	2310      	movs	r3, #16
 8007098:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d008      	beq.n	80070b6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	461a      	mov	r2, r3
 80070b2:	2340      	movs	r3, #64	; 0x40
 80070b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d008      	beq.n	80070d2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070cc:	461a      	mov	r2, r3
 80070ce:	2302      	movs	r3, #2
 80070d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80070dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fc1b 	bl	800791a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	3301      	adds	r3, #1
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f47f af49 	bne.w	8006f8a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f004 f9be 	bl	800b47e <USB_ReadInterrupts>
 8007102:	4603      	mov	r3, r0
 8007104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800710c:	d122      	bne.n	8007154 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800711c:	f023 0301 	bic.w	r3, r3, #1
 8007120:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007128:	2b01      	cmp	r3, #1
 800712a:	d108      	bne.n	800713e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007134:	2100      	movs	r1, #0
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fe26 	bl	8007d88 <HAL_PCDEx_LPM_Callback>
 800713c:	e002      	b.n	8007144 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f00d fdec 	bl	8014d1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695a      	ldr	r2, [r3, #20]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007152:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4618      	mov	r0, r3
 800715a:	f004 f990 	bl	800b47e <USB_ReadInterrupts>
 800715e:	4603      	mov	r3, r0
 8007160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007168:	d112      	bne.n	8007190 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b01      	cmp	r3, #1
 8007178:	d102      	bne.n	8007180 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f00d fda8 	bl	8014cd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695a      	ldr	r2, [r3, #20]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800718e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4618      	mov	r0, r3
 8007196:	f004 f972 	bl	800b47e <USB_ReadInterrupts>
 800719a:	4603      	mov	r3, r0
 800719c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a4:	f040 80c7 	bne.w	8007336 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	69fa      	ldr	r2, [r7, #28]
 80071b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2110      	movs	r1, #16
 80071c2:	4618      	mov	r0, r3
 80071c4:	f003 fa0c 	bl	800a5e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071c8:	2300      	movs	r3, #0
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071cc:	e056      	b.n	800727c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071da:	461a      	mov	r2, r3
 80071dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007200:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007220:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722e:	461a      	mov	r2, r3
 8007230:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007234:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	440a      	add	r2, r1
 800724c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007250:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007254:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007266:	0151      	lsls	r1, r2, #5
 8007268:	69fa      	ldr	r2, [r7, #28]
 800726a:	440a      	add	r2, r1
 800726c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007270:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007274:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	3301      	adds	r3, #1
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007282:	429a      	cmp	r2, r3
 8007284:	d3a3      	bcc.n	80071ce <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007294:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007298:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d016      	beq.n	80072d0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072b2:	f043 030b 	orr.w	r3, r3, #11
 80072b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072c8:	f043 030b 	orr.w	r3, r3, #11
 80072cc:	6453      	str	r3, [r2, #68]	; 0x44
 80072ce:	e015      	b.n	80072fc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80072e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80072e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072f6:	f043 030b 	orr.w	r3, r3, #11
 80072fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800730a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800730e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007320:	461a      	mov	r2, r3
 8007322:	f004 f971 	bl	800b608 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	695a      	ldr	r2, [r3, #20]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007334:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f004 f89f 	bl	800b47e <USB_ReadInterrupts>
 8007340:	4603      	mov	r3, r0
 8007342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800734a:	d124      	bne.n	8007396 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4618      	mov	r0, r3
 8007352:	f004 f935 	bl	800b5c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f003 f99d 	bl	800a69a <USB_GetDevSpeed>
 8007360:	4603      	mov	r3, r0
 8007362:	461a      	mov	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681c      	ldr	r4, [r3, #0]
 800736c:	f001 f958 	bl	8008620 <HAL_RCC_GetHCLKFreq>
 8007370:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007376:	b2db      	uxtb	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	4620      	mov	r0, r4
 800737c:	f002 febc 	bl	800a0f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f00d fc7c 	bl	8014c7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	695a      	ldr	r2, [r3, #20]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007394:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f004 f86f 	bl	800b47e <USB_ReadInterrupts>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b08      	cmp	r3, #8
 80073a8:	d10a      	bne.n	80073c0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f00d fc59 	bl	8014c62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695a      	ldr	r2, [r3, #20]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f002 0208 	and.w	r2, r2, #8
 80073be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f004 f85a 	bl	800b47e <USB_ReadInterrupts>
 80073ca:	4603      	mov	r3, r0
 80073cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073d4:	d10f      	bne.n	80073f6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f00d fcbb 	bl	8014d5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	695a      	ldr	r2, [r3, #20]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80073f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f004 f83f 	bl	800b47e <USB_ReadInterrupts>
 8007400:	4603      	mov	r3, r0
 8007402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800740a:	d10f      	bne.n	800742c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	b2db      	uxtb	r3, r3
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f00d fc8e 	bl	8014d38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695a      	ldr	r2, [r3, #20]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800742a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f004 f824 	bl	800b47e <USB_ReadInterrupts>
 8007436:	4603      	mov	r3, r0
 8007438:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800743c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007440:	d10a      	bne.n	8007458 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f00d fc9c 	bl	8014d80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695a      	ldr	r2, [r3, #20]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007456:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4618      	mov	r0, r3
 800745e:	f004 f80e 	bl	800b47e <USB_ReadInterrupts>
 8007462:	4603      	mov	r3, r0
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b04      	cmp	r3, #4
 800746a:	d115      	bne.n	8007498 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f00d fc8c 	bl	8014d9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6859      	ldr	r1, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	430a      	orrs	r2, r1
 8007492:	605a      	str	r2, [r3, #4]
 8007494:	e000      	b.n	8007498 <HAL_PCD_IRQHandler+0x75e>
      return;
 8007496:	bf00      	nop
    }
  }
}
 8007498:	3734      	adds	r7, #52	; 0x34
 800749a:	46bd      	mov	sp, r7
 800749c:	bd90      	pop	{r4, r7, pc}

0800749e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	460b      	mov	r3, r1
 80074a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_PCD_SetAddress+0x1a>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e013      	b.n	80074e0 <HAL_PCD_SetAddress+0x42>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f003 ff6c 	bl	800b3ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	4608      	mov	r0, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	461a      	mov	r2, r3
 80074f6:	4603      	mov	r3, r0
 80074f8:	70fb      	strb	r3, [r7, #3]
 80074fa:	460b      	mov	r3, r1
 80074fc:	803b      	strh	r3, [r7, #0]
 80074fe:	4613      	mov	r3, r2
 8007500:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800750a:	2b00      	cmp	r3, #0
 800750c:	da0f      	bge.n	800752e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	f003 020f 	and.w	r2, r3, #15
 8007514:	4613      	mov	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	3338      	adds	r3, #56	; 0x38
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	4413      	add	r3, r2
 8007522:	3304      	adds	r3, #4
 8007524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	705a      	strb	r2, [r3, #1]
 800752c:	e00f      	b.n	800754e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	f003 020f 	and.w	r2, r3, #15
 8007534:	4613      	mov	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	4413      	add	r3, r2
 8007544:	3304      	adds	r3, #4
 8007546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	f003 030f 	and.w	r3, r3, #15
 8007554:	b2da      	uxtb	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800755a:	883a      	ldrh	r2, [r7, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	78ba      	ldrb	r2, [r7, #2]
 8007564:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	b29a      	uxth	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007578:	78bb      	ldrb	r3, [r7, #2]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d102      	bne.n	8007584 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_PCD_EP_Open+0xaa>
 800758e:	2302      	movs	r3, #2
 8007590:	e00e      	b.n	80075b0 <HAL_PCD_EP_Open+0xc8>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68f9      	ldr	r1, [r7, #12]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f003 f89f 	bl	800a6e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80075ae:	7afb      	ldrb	r3, [r7, #11]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80075c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	da0f      	bge.n	80075ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075cc:	78fb      	ldrb	r3, [r7, #3]
 80075ce:	f003 020f 	and.w	r2, r3, #15
 80075d2:	4613      	mov	r3, r2
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	1a9b      	subs	r3, r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	3338      	adds	r3, #56	; 0x38
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	3304      	adds	r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2201      	movs	r2, #1
 80075e8:	705a      	strb	r2, [r3, #1]
 80075ea:	e00f      	b.n	800760c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	f003 020f 	and.w	r2, r3, #15
 80075f2:	4613      	mov	r3, r2
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	1a9b      	subs	r3, r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	4413      	add	r3, r2
 8007602:	3304      	adds	r3, #4
 8007604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	b2da      	uxtb	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_PCD_EP_Close+0x6e>
 8007622:	2302      	movs	r3, #2
 8007624:	e00e      	b.n	8007644 <HAL_PCD_EP_Close+0x8c>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68f9      	ldr	r1, [r7, #12]
 8007634:	4618      	mov	r0, r3
 8007636:	f003 f8dd 	bl	800a7f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	607a      	str	r2, [r7, #4]
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	460b      	mov	r3, r1
 800765a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800765c:	7afb      	ldrb	r3, [r7, #11]
 800765e:	f003 020f 	and.w	r2, r3, #15
 8007662:	4613      	mov	r3, r2
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	3304      	adds	r3, #4
 8007674:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2200      	movs	r2, #0
 8007686:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2200      	movs	r2, #0
 800768c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	f003 030f 	and.w	r3, r3, #15
 8007694:	b2da      	uxtb	r2, r3
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d102      	bne.n	80076a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	6979      	ldr	r1, [r7, #20]
 80076c0:	f003 fbb8 	bl	800ae34 <USB_EP0StartXfer>
 80076c4:	e008      	b.n	80076d8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	6979      	ldr	r1, [r7, #20]
 80076d4:	f003 f96a 	bl	800a9ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80076ee:	78fb      	ldrb	r3, [r7, #3]
 80076f0:	f003 020f 	and.w	r2, r3, #15
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	00db      	lsls	r3, r3, #3
 80076fa:	1a9b      	subs	r3, r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	440b      	add	r3, r1
 8007700:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007704:	681b      	ldr	r3, [r3, #0]
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b086      	sub	sp, #24
 8007716:	af00      	add	r7, sp, #0
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
 800771e:	460b      	mov	r3, r1
 8007720:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007722:	7afb      	ldrb	r3, [r7, #11]
 8007724:	f003 020f 	and.w	r2, r3, #15
 8007728:	4613      	mov	r3, r2
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	1a9b      	subs	r3, r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	3338      	adds	r3, #56	; 0x38
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4413      	add	r3, r2
 8007736:	3304      	adds	r3, #4
 8007738:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2200      	movs	r2, #0
 800774a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	2201      	movs	r2, #1
 8007750:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007752:	7afb      	ldrb	r3, [r7, #11]
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	b2da      	uxtb	r2, r3
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d102      	bne.n	800776c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800776c:	7afb      	ldrb	r3, [r7, #11]
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	461a      	mov	r2, r3
 8007782:	6979      	ldr	r1, [r7, #20]
 8007784:	f003 fb56 	bl	800ae34 <USB_EP0StartXfer>
 8007788:	e008      	b.n	800779c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	461a      	mov	r2, r3
 8007796:	6979      	ldr	r1, [r7, #20]
 8007798:	f003 f908 	bl	800a9ac <USB_EPStartXfer>
  }

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	f003 020f 	and.w	r2, r3, #15
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d901      	bls.n	80077c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e050      	b.n	8007866 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da0f      	bge.n	80077ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	f003 020f 	and.w	r2, r3, #15
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	3338      	adds	r3, #56	; 0x38
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	4413      	add	r3, r2
 80077e0:	3304      	adds	r3, #4
 80077e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	705a      	strb	r2, [r3, #1]
 80077ea:	e00d      	b.n	8007808 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80077ec:	78fa      	ldrb	r2, [r7, #3]
 80077ee:	4613      	mov	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	1a9b      	subs	r3, r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	4413      	add	r3, r2
 80077fe:	3304      	adds	r3, #4
 8007800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	f003 030f 	and.w	r3, r3, #15
 8007814:	b2da      	uxtb	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_PCD_EP_SetStall+0x82>
 8007824:	2302      	movs	r3, #2
 8007826:	e01e      	b.n	8007866 <HAL_PCD_EP_SetStall+0xc0>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	4618      	mov	r0, r3
 8007838:	f003 fce5 	bl	800b206 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	b2d9      	uxtb	r1, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007856:	461a      	mov	r2, r3
 8007858:	f003 fed6 	bl	800b608 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	f003 020f 	and.w	r2, r3, #15
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	429a      	cmp	r2, r3
 8007886:	d901      	bls.n	800788c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e042      	b.n	8007912 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800788c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007890:	2b00      	cmp	r3, #0
 8007892:	da0f      	bge.n	80078b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	f003 020f 	and.w	r2, r3, #15
 800789a:	4613      	mov	r3, r2
 800789c:	00db      	lsls	r3, r3, #3
 800789e:	1a9b      	subs	r3, r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	3338      	adds	r3, #56	; 0x38
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	4413      	add	r3, r2
 80078a8:	3304      	adds	r3, #4
 80078aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	705a      	strb	r2, [r3, #1]
 80078b2:	e00f      	b.n	80078d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	f003 020f 	and.w	r2, r3, #15
 80078ba:	4613      	mov	r3, r2
 80078bc:	00db      	lsls	r3, r3, #3
 80078be:	1a9b      	subs	r3, r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	4413      	add	r3, r2
 80078ca:	3304      	adds	r3, #4
 80078cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_PCD_EP_ClrStall+0x86>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e00e      	b.n	8007912 <HAL_PCD_EP_ClrStall+0xa4>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68f9      	ldr	r1, [r7, #12]
 8007902:	4618      	mov	r0, r3
 8007904:	f003 fced 	bl	800b2e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b08a      	sub	sp, #40	; 0x28
 800791e:	af02      	add	r7, sp, #8
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	4613      	mov	r3, r2
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	3338      	adds	r3, #56	; 0x38
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	3304      	adds	r3, #4
 8007940:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	429a      	cmp	r2, r3
 800794c:	d901      	bls.n	8007952 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e06c      	b.n	8007a2c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	695a      	ldr	r2, [r3, #20]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	69fa      	ldr	r2, [r7, #28]
 8007964:	429a      	cmp	r2, r3
 8007966:	d902      	bls.n	800796e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	3303      	adds	r3, #3
 8007972:	089b      	lsrs	r3, r3, #2
 8007974:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007976:	e02b      	b.n	80079d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	695a      	ldr	r2, [r3, #20]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	429a      	cmp	r2, r3
 800798c:	d902      	bls.n	8007994 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	3303      	adds	r3, #3
 8007998:	089b      	lsrs	r3, r3, #2
 800799a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	68d9      	ldr	r1, [r3, #12]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	4603      	mov	r3, r0
 80079b2:	6978      	ldr	r0, [r7, #20]
 80079b4:	f003 fb91 	bl	800b0da <USB_WritePacket>

    ep->xfer_buff  += len;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	68da      	ldr	r2, [r3, #12]
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	441a      	add	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	699a      	ldr	r2, [r3, #24]
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	441a      	add	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d809      	bhi.n	80079fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	699a      	ldr	r2, [r3, #24]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d203      	bcs.n	80079fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1be      	bne.n	8007978 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	695a      	ldr	r2, [r3, #20]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d811      	bhi.n	8007a2a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	f003 030f 	and.w	r3, r3, #15
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	6939      	ldr	r1, [r7, #16]
 8007a22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a26:	4013      	ands	r3, r2
 8007a28:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3720      	adds	r7, #32
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	333c      	adds	r3, #60	; 0x3c
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	f040 80a0 	bne.w	8007bac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d015      	beq.n	8007aa2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4a72      	ldr	r2, [pc, #456]	; (8007c44 <PCD_EP_OutXfrComplete_int+0x210>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	f240 80dd 	bls.w	8007c3a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 80d7 	beq.w	8007c3a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9e:	6093      	str	r3, [r2, #8]
 8007aa0:	e0cb      	b.n	8007c3a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d009      	beq.n	8007ac0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab8:	461a      	mov	r2, r3
 8007aba:	2320      	movs	r3, #32
 8007abc:	6093      	str	r3, [r2, #8]
 8007abe:	e0bc      	b.n	8007c3a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f040 80b7 	bne.w	8007c3a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4a5d      	ldr	r2, [pc, #372]	; (8007c44 <PCD_EP_OutXfrComplete_int+0x210>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d90f      	bls.n	8007af4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aea:	461a      	mov	r2, r3
 8007aec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007af0:	6093      	str	r3, [r2, #8]
 8007af2:	e0a2      	b.n	8007c3a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4613      	mov	r3, r2
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	1a9b      	subs	r3, r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007b06:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	0159      	lsls	r1, r3, #5
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	440b      	add	r3, r1
 8007b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007b1a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	4613      	mov	r3, r2
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	1a9b      	subs	r3, r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4403      	add	r3, r0
 8007b2a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007b2e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	4613      	mov	r3, r2
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	1a9b      	subs	r3, r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4403      	add	r3, r0
 8007b52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4419      	add	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	1a9b      	subs	r3, r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4403      	add	r3, r0
 8007b68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b6c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d114      	bne.n	8007b9e <PCD_EP_OutXfrComplete_int+0x16a>
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d108      	bne.n	8007b9e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b96:	461a      	mov	r2, r3
 8007b98:	2101      	movs	r1, #1
 8007b9a:	f003 fd35 	bl	800b608 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f00d f827 	bl	8014bf8 <HAL_PCD_DataOutStageCallback>
 8007baa:	e046      	b.n	8007c3a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <PCD_EP_OutXfrComplete_int+0x214>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d124      	bne.n	8007bfe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd0:	6093      	str	r3, [r2, #8]
 8007bd2:	e032      	b.n	8007c3a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d008      	beq.n	8007bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bea:	461a      	mov	r2, r3
 8007bec:	2320      	movs	r3, #32
 8007bee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f00c fffe 	bl	8014bf8 <HAL_PCD_DataOutStageCallback>
 8007bfc:	e01d      	b.n	8007c3a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d114      	bne.n	8007c2e <PCD_EP_OutXfrComplete_int+0x1fa>
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	440b      	add	r3, r1
 8007c12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d108      	bne.n	8007c2e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c26:	461a      	mov	r2, r3
 8007c28:	2100      	movs	r1, #0
 8007c2a:	f003 fced 	bl	800b608 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f00c ffdf 	bl	8014bf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	4f54300a 	.word	0x4f54300a
 8007c48:	4f54310a 	.word	0x4f54310a

08007c4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	333c      	adds	r3, #60	; 0x3c
 8007c64:	3304      	adds	r3, #4
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4a15      	ldr	r2, [pc, #84]	; (8007cd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d90e      	bls.n	8007ca0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d009      	beq.n	8007ca0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c98:	461a      	mov	r2, r3
 8007c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f00c ff97 	bl	8014bd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4a0a      	ldr	r2, [pc, #40]	; (8007cd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d90c      	bls.n	8007cc8 <PCD_EP_OutSetupPacket_int+0x7c>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d108      	bne.n	8007cc8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	f003 fca0 	bl	800b608 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	4f54300a 	.word	0x4f54300a

08007cd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d107      	bne.n	8007d06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007cf6:	883b      	ldrh	r3, [r7, #0]
 8007cf8:	0419      	lsls	r1, r3, #16
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	629a      	str	r2, [r3, #40]	; 0x28
 8007d04:	e028      	b.n	8007d58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	0c1b      	lsrs	r3, r3, #16
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	4413      	add	r3, r2
 8007d12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
 8007d18:	e00d      	b.n	8007d36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	3340      	adds	r3, #64	; 0x40
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	0c1b      	lsrs	r3, r3, #16
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	3301      	adds	r3, #1
 8007d34:	73fb      	strb	r3, [r7, #15]
 8007d36:	7bfa      	ldrb	r2, [r7, #15]
 8007d38:	78fb      	ldrb	r3, [r7, #3]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d3ec      	bcc.n	8007d1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007d40:	883b      	ldrh	r3, [r7, #0]
 8007d42:	0418      	lsls	r0, r3, #16
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6819      	ldr	r1, [r3, #0]
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	4302      	orrs	r2, r0
 8007d50:	3340      	adds	r3, #64	; 0x40
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	887a      	ldrh	r2, [r7, #2]
 8007d78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e264      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d075      	beq.n	8007eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007dbe:	4ba3      	ldr	r3, [pc, #652]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 030c 	and.w	r3, r3, #12
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d00c      	beq.n	8007de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dca:	4ba0      	ldr	r3, [pc, #640]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	d112      	bne.n	8007dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dd6:	4b9d      	ldr	r3, [pc, #628]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007de2:	d10b      	bne.n	8007dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007de4:	4b99      	ldr	r3, [pc, #612]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d05b      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x108>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d157      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e23f      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e04:	d106      	bne.n	8007e14 <HAL_RCC_OscConfig+0x74>
 8007e06:	4b91      	ldr	r3, [pc, #580]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a90      	ldr	r2, [pc, #576]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e10:	6013      	str	r3, [r2, #0]
 8007e12:	e01d      	b.n	8007e50 <HAL_RCC_OscConfig+0xb0>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e1c:	d10c      	bne.n	8007e38 <HAL_RCC_OscConfig+0x98>
 8007e1e:	4b8b      	ldr	r3, [pc, #556]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a8a      	ldr	r2, [pc, #552]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e28:	6013      	str	r3, [r2, #0]
 8007e2a:	4b88      	ldr	r3, [pc, #544]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a87      	ldr	r2, [pc, #540]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	e00b      	b.n	8007e50 <HAL_RCC_OscConfig+0xb0>
 8007e38:	4b84      	ldr	r3, [pc, #528]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a83      	ldr	r2, [pc, #524]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	4b81      	ldr	r3, [pc, #516]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a80      	ldr	r2, [pc, #512]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d013      	beq.n	8007e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e58:	f7fd f89a 	bl	8004f90 <HAL_GetTick>
 8007e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e5e:	e008      	b.n	8007e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e60:	f7fd f896 	bl	8004f90 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b64      	cmp	r3, #100	; 0x64
 8007e6c:	d901      	bls.n	8007e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e204      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e72:	4b76      	ldr	r3, [pc, #472]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0f0      	beq.n	8007e60 <HAL_RCC_OscConfig+0xc0>
 8007e7e:	e014      	b.n	8007eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e80:	f7fd f886 	bl	8004f90 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e88:	f7fd f882 	bl	8004f90 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b64      	cmp	r3, #100	; 0x64
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e1f0      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e9a:	4b6c      	ldr	r3, [pc, #432]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1f0      	bne.n	8007e88 <HAL_RCC_OscConfig+0xe8>
 8007ea6:	e000      	b.n	8007eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d063      	beq.n	8007f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eb6:	4b65      	ldr	r3, [pc, #404]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f003 030c 	and.w	r3, r3, #12
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ec2:	4b62      	ldr	r3, [pc, #392]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	d11c      	bne.n	8007f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ece:	4b5f      	ldr	r3, [pc, #380]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d116      	bne.n	8007f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007eda:	4b5c      	ldr	r3, [pc, #368]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <HAL_RCC_OscConfig+0x152>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d001      	beq.n	8007ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e1c4      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ef2:	4b56      	ldr	r3, [pc, #344]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	4952      	ldr	r1, [pc, #328]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f06:	e03a      	b.n	8007f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d020      	beq.n	8007f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f10:	4b4f      	ldr	r3, [pc, #316]	; (8008050 <HAL_RCC_OscConfig+0x2b0>)
 8007f12:	2201      	movs	r2, #1
 8007f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f16:	f7fd f83b 	bl	8004f90 <HAL_GetTick>
 8007f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f1c:	e008      	b.n	8007f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f1e:	f7fd f837 	bl	8004f90 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d901      	bls.n	8007f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e1a5      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f30:	4b46      	ldr	r3, [pc, #280]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d0f0      	beq.n	8007f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f3c:	4b43      	ldr	r3, [pc, #268]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	00db      	lsls	r3, r3, #3
 8007f4a:	4940      	ldr	r1, [pc, #256]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	600b      	str	r3, [r1, #0]
 8007f50:	e015      	b.n	8007f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f52:	4b3f      	ldr	r3, [pc, #252]	; (8008050 <HAL_RCC_OscConfig+0x2b0>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f58:	f7fd f81a 	bl	8004f90 <HAL_GetTick>
 8007f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f5e:	e008      	b.n	8007f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f60:	f7fd f816 	bl	8004f90 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e184      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f72:	4b36      	ldr	r3, [pc, #216]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1f0      	bne.n	8007f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0308 	and.w	r3, r3, #8
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d030      	beq.n	8007fec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d016      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f92:	4b30      	ldr	r3, [pc, #192]	; (8008054 <HAL_RCC_OscConfig+0x2b4>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f98:	f7fc fffa 	bl	8004f90 <HAL_GetTick>
 8007f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f9e:	e008      	b.n	8007fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fa0:	f7fc fff6 	bl	8004f90 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d901      	bls.n	8007fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e164      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fb2:	4b26      	ldr	r3, [pc, #152]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb6:	f003 0302 	and.w	r3, r3, #2
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0f0      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x200>
 8007fbe:	e015      	b.n	8007fec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fc0:	4b24      	ldr	r3, [pc, #144]	; (8008054 <HAL_RCC_OscConfig+0x2b4>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fc6:	f7fc ffe3 	bl	8004f90 <HAL_GetTick>
 8007fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fcc:	e008      	b.n	8007fe0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fce:	f7fc ffdf 	bl	8004f90 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d901      	bls.n	8007fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e14d      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fe0:	4b1a      	ldr	r3, [pc, #104]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8007fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f0      	bne.n	8007fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 80a0 	beq.w	800813a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ffe:	4b13      	ldr	r3, [pc, #76]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10f      	bne.n	800802a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800800a:	2300      	movs	r3, #0
 800800c:	60bb      	str	r3, [r7, #8]
 800800e:	4b0f      	ldr	r3, [pc, #60]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8008010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008012:	4a0e      	ldr	r2, [pc, #56]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 8008014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008018:	6413      	str	r3, [r2, #64]	; 0x40
 800801a:	4b0c      	ldr	r3, [pc, #48]	; (800804c <HAL_RCC_OscConfig+0x2ac>)
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008022:	60bb      	str	r3, [r7, #8]
 8008024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008026:	2301      	movs	r3, #1
 8008028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800802a:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <HAL_RCC_OscConfig+0x2b8>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008032:	2b00      	cmp	r3, #0
 8008034:	d121      	bne.n	800807a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008036:	4b08      	ldr	r3, [pc, #32]	; (8008058 <HAL_RCC_OscConfig+0x2b8>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a07      	ldr	r2, [pc, #28]	; (8008058 <HAL_RCC_OscConfig+0x2b8>)
 800803c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008042:	f7fc ffa5 	bl	8004f90 <HAL_GetTick>
 8008046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008048:	e011      	b.n	800806e <HAL_RCC_OscConfig+0x2ce>
 800804a:	bf00      	nop
 800804c:	40023800 	.word	0x40023800
 8008050:	42470000 	.word	0x42470000
 8008054:	42470e80 	.word	0x42470e80
 8008058:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800805c:	f7fc ff98 	bl	8004f90 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b02      	cmp	r3, #2
 8008068:	d901      	bls.n	800806e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e106      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800806e:	4b85      	ldr	r3, [pc, #532]	; (8008284 <HAL_RCC_OscConfig+0x4e4>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0f0      	beq.n	800805c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d106      	bne.n	8008090 <HAL_RCC_OscConfig+0x2f0>
 8008082:	4b81      	ldr	r3, [pc, #516]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	4a80      	ldr	r2, [pc, #512]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 8008088:	f043 0301 	orr.w	r3, r3, #1
 800808c:	6713      	str	r3, [r2, #112]	; 0x70
 800808e:	e01c      	b.n	80080ca <HAL_RCC_OscConfig+0x32a>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	2b05      	cmp	r3, #5
 8008096:	d10c      	bne.n	80080b2 <HAL_RCC_OscConfig+0x312>
 8008098:	4b7b      	ldr	r3, [pc, #492]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 800809a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809c:	4a7a      	ldr	r2, [pc, #488]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 800809e:	f043 0304 	orr.w	r3, r3, #4
 80080a2:	6713      	str	r3, [r2, #112]	; 0x70
 80080a4:	4b78      	ldr	r3, [pc, #480]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 80080a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a8:	4a77      	ldr	r2, [pc, #476]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 80080aa:	f043 0301 	orr.w	r3, r3, #1
 80080ae:	6713      	str	r3, [r2, #112]	; 0x70
 80080b0:	e00b      	b.n	80080ca <HAL_RCC_OscConfig+0x32a>
 80080b2:	4b75      	ldr	r3, [pc, #468]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 80080b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b6:	4a74      	ldr	r2, [pc, #464]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 80080b8:	f023 0301 	bic.w	r3, r3, #1
 80080bc:	6713      	str	r3, [r2, #112]	; 0x70
 80080be:	4b72      	ldr	r3, [pc, #456]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 80080c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c2:	4a71      	ldr	r2, [pc, #452]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 80080c4:	f023 0304 	bic.w	r3, r3, #4
 80080c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d015      	beq.n	80080fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080d2:	f7fc ff5d 	bl	8004f90 <HAL_GetTick>
 80080d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080d8:	e00a      	b.n	80080f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080da:	f7fc ff59 	bl	8004f90 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d901      	bls.n	80080f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e0c5      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080f0:	4b65      	ldr	r3, [pc, #404]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 80080f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0ee      	beq.n	80080da <HAL_RCC_OscConfig+0x33a>
 80080fc:	e014      	b.n	8008128 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080fe:	f7fc ff47 	bl	8004f90 <HAL_GetTick>
 8008102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008104:	e00a      	b.n	800811c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008106:	f7fc ff43 	bl	8004f90 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	f241 3288 	movw	r2, #5000	; 0x1388
 8008114:	4293      	cmp	r3, r2
 8008116:	d901      	bls.n	800811c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e0af      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800811c:	4b5a      	ldr	r3, [pc, #360]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 800811e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1ee      	bne.n	8008106 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d105      	bne.n	800813a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800812e:	4b56      	ldr	r3, [pc, #344]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	4a55      	ldr	r2, [pc, #340]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 8008134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008138:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 809b 	beq.w	800827a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008144:	4b50      	ldr	r3, [pc, #320]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f003 030c 	and.w	r3, r3, #12
 800814c:	2b08      	cmp	r3, #8
 800814e:	d05c      	beq.n	800820a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d141      	bne.n	80081dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008158:	4b4c      	ldr	r3, [pc, #304]	; (800828c <HAL_RCC_OscConfig+0x4ec>)
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800815e:	f7fc ff17 	bl	8004f90 <HAL_GetTick>
 8008162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008164:	e008      	b.n	8008178 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008166:	f7fc ff13 	bl	8004f90 <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	2b02      	cmp	r3, #2
 8008172:	d901      	bls.n	8008178 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e081      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008178:	4b43      	ldr	r3, [pc, #268]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1f0      	bne.n	8008166 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	69da      	ldr	r2, [r3, #28]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	019b      	lsls	r3, r3, #6
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	085b      	lsrs	r3, r3, #1
 800819c:	3b01      	subs	r3, #1
 800819e:	041b      	lsls	r3, r3, #16
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	061b      	lsls	r3, r3, #24
 80081a8:	4937      	ldr	r1, [pc, #220]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081ae:	4b37      	ldr	r3, [pc, #220]	; (800828c <HAL_RCC_OscConfig+0x4ec>)
 80081b0:	2201      	movs	r2, #1
 80081b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081b4:	f7fc feec 	bl	8004f90 <HAL_GetTick>
 80081b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ba:	e008      	b.n	80081ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081bc:	f7fc fee8 	bl	8004f90 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d901      	bls.n	80081ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e056      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ce:	4b2e      	ldr	r3, [pc, #184]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0f0      	beq.n	80081bc <HAL_RCC_OscConfig+0x41c>
 80081da:	e04e      	b.n	800827a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081dc:	4b2b      	ldr	r3, [pc, #172]	; (800828c <HAL_RCC_OscConfig+0x4ec>)
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081e2:	f7fc fed5 	bl	8004f90 <HAL_GetTick>
 80081e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081e8:	e008      	b.n	80081fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081ea:	f7fc fed1 	bl	8004f90 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e03f      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081fc:	4b22      	ldr	r3, [pc, #136]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1f0      	bne.n	80081ea <HAL_RCC_OscConfig+0x44a>
 8008208:	e037      	b.n	800827a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e032      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008216:	4b1c      	ldr	r3, [pc, #112]	; (8008288 <HAL_RCC_OscConfig+0x4e8>)
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d028      	beq.n	8008276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800822e:	429a      	cmp	r2, r3
 8008230:	d121      	bne.n	8008276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800823c:	429a      	cmp	r2, r3
 800823e:	d11a      	bne.n	8008276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008246:	4013      	ands	r3, r2
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800824c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800824e:	4293      	cmp	r3, r2
 8008250:	d111      	bne.n	8008276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825c:	085b      	lsrs	r3, r3, #1
 800825e:	3b01      	subs	r3, #1
 8008260:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008262:	429a      	cmp	r2, r3
 8008264:	d107      	bne.n	8008276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008272:	429a      	cmp	r2, r3
 8008274:	d001      	beq.n	800827a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	40007000 	.word	0x40007000
 8008288:	40023800 	.word	0x40023800
 800828c:	42470060 	.word	0x42470060

08008290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e0cc      	b.n	800843e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082a4:	4b68      	ldr	r3, [pc, #416]	; (8008448 <HAL_RCC_ClockConfig+0x1b8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0307 	and.w	r3, r3, #7
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d90c      	bls.n	80082cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082b2:	4b65      	ldr	r3, [pc, #404]	; (8008448 <HAL_RCC_ClockConfig+0x1b8>)
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ba:	4b63      	ldr	r3, [pc, #396]	; (8008448 <HAL_RCC_ClockConfig+0x1b8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d001      	beq.n	80082cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e0b8      	b.n	800843e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d020      	beq.n	800831a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082e4:	4b59      	ldr	r3, [pc, #356]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	4a58      	ldr	r2, [pc, #352]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 80082ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0308 	and.w	r3, r3, #8
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082fc:	4b53      	ldr	r3, [pc, #332]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	4a52      	ldr	r2, [pc, #328]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 8008302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008308:	4b50      	ldr	r3, [pc, #320]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	494d      	ldr	r1, [pc, #308]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 8008316:	4313      	orrs	r3, r2
 8008318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d044      	beq.n	80083b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d107      	bne.n	800833e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800832e:	4b47      	ldr	r3, [pc, #284]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d119      	bne.n	800836e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e07f      	b.n	800843e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	2b02      	cmp	r3, #2
 8008344:	d003      	beq.n	800834e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800834a:	2b03      	cmp	r3, #3
 800834c:	d107      	bne.n	800835e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800834e:	4b3f      	ldr	r3, [pc, #252]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e06f      	b.n	800843e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800835e:	4b3b      	ldr	r3, [pc, #236]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e067      	b.n	800843e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800836e:	4b37      	ldr	r3, [pc, #220]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f023 0203 	bic.w	r2, r3, #3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	4934      	ldr	r1, [pc, #208]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 800837c:	4313      	orrs	r3, r2
 800837e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008380:	f7fc fe06 	bl	8004f90 <HAL_GetTick>
 8008384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008386:	e00a      	b.n	800839e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008388:	f7fc fe02 	bl	8004f90 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	f241 3288 	movw	r2, #5000	; 0x1388
 8008396:	4293      	cmp	r3, r2
 8008398:	d901      	bls.n	800839e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e04f      	b.n	800843e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800839e:	4b2b      	ldr	r3, [pc, #172]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f003 020c 	and.w	r2, r3, #12
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d1eb      	bne.n	8008388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083b0:	4b25      	ldr	r3, [pc, #148]	; (8008448 <HAL_RCC_ClockConfig+0x1b8>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d20c      	bcs.n	80083d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083be:	4b22      	ldr	r3, [pc, #136]	; (8008448 <HAL_RCC_ClockConfig+0x1b8>)
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	b2d2      	uxtb	r2, r2
 80083c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083c6:	4b20      	ldr	r3, [pc, #128]	; (8008448 <HAL_RCC_ClockConfig+0x1b8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d001      	beq.n	80083d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e032      	b.n	800843e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d008      	beq.n	80083f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083e4:	4b19      	ldr	r3, [pc, #100]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	4916      	ldr	r1, [pc, #88]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0308 	and.w	r3, r3, #8
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008402:	4b12      	ldr	r3, [pc, #72]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	490e      	ldr	r1, [pc, #56]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 8008412:	4313      	orrs	r3, r2
 8008414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008416:	f000 f821 	bl	800845c <HAL_RCC_GetSysClockFreq>
 800841a:	4602      	mov	r2, r0
 800841c:	4b0b      	ldr	r3, [pc, #44]	; (800844c <HAL_RCC_ClockConfig+0x1bc>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	091b      	lsrs	r3, r3, #4
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	490a      	ldr	r1, [pc, #40]	; (8008450 <HAL_RCC_ClockConfig+0x1c0>)
 8008428:	5ccb      	ldrb	r3, [r1, r3]
 800842a:	fa22 f303 	lsr.w	r3, r2, r3
 800842e:	4a09      	ldr	r2, [pc, #36]	; (8008454 <HAL_RCC_ClockConfig+0x1c4>)
 8008430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008432:	4b09      	ldr	r3, [pc, #36]	; (8008458 <HAL_RCC_ClockConfig+0x1c8>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4618      	mov	r0, r3
 8008438:	f7fc fbcc 	bl	8004bd4 <HAL_InitTick>

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	40023c00 	.word	0x40023c00
 800844c:	40023800 	.word	0x40023800
 8008450:	080188f4 	.word	0x080188f4
 8008454:	20000004 	.word	0x20000004
 8008458:	20000008 	.word	0x20000008

0800845c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800845c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	607b      	str	r3, [r7, #4]
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	2300      	movs	r3, #0
 800846e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008474:	4b67      	ldr	r3, [pc, #412]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f003 030c 	and.w	r3, r3, #12
 800847c:	2b08      	cmp	r3, #8
 800847e:	d00d      	beq.n	800849c <HAL_RCC_GetSysClockFreq+0x40>
 8008480:	2b08      	cmp	r3, #8
 8008482:	f200 80bd 	bhi.w	8008600 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <HAL_RCC_GetSysClockFreq+0x34>
 800848a:	2b04      	cmp	r3, #4
 800848c:	d003      	beq.n	8008496 <HAL_RCC_GetSysClockFreq+0x3a>
 800848e:	e0b7      	b.n	8008600 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008490:	4b61      	ldr	r3, [pc, #388]	; (8008618 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008492:	60bb      	str	r3, [r7, #8]
       break;
 8008494:	e0b7      	b.n	8008606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008496:	4b61      	ldr	r3, [pc, #388]	; (800861c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008498:	60bb      	str	r3, [r7, #8]
      break;
 800849a:	e0b4      	b.n	8008606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800849c:	4b5d      	ldr	r3, [pc, #372]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084a6:	4b5b      	ldr	r3, [pc, #364]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d04d      	beq.n	800854e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084b2:	4b58      	ldr	r3, [pc, #352]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	099b      	lsrs	r3, r3, #6
 80084b8:	461a      	mov	r2, r3
 80084ba:	f04f 0300 	mov.w	r3, #0
 80084be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80084c2:	f04f 0100 	mov.w	r1, #0
 80084c6:	ea02 0800 	and.w	r8, r2, r0
 80084ca:	ea03 0901 	and.w	r9, r3, r1
 80084ce:	4640      	mov	r0, r8
 80084d0:	4649      	mov	r1, r9
 80084d2:	f04f 0200 	mov.w	r2, #0
 80084d6:	f04f 0300 	mov.w	r3, #0
 80084da:	014b      	lsls	r3, r1, #5
 80084dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80084e0:	0142      	lsls	r2, r0, #5
 80084e2:	4610      	mov	r0, r2
 80084e4:	4619      	mov	r1, r3
 80084e6:	ebb0 0008 	subs.w	r0, r0, r8
 80084ea:	eb61 0109 	sbc.w	r1, r1, r9
 80084ee:	f04f 0200 	mov.w	r2, #0
 80084f2:	f04f 0300 	mov.w	r3, #0
 80084f6:	018b      	lsls	r3, r1, #6
 80084f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80084fc:	0182      	lsls	r2, r0, #6
 80084fe:	1a12      	subs	r2, r2, r0
 8008500:	eb63 0301 	sbc.w	r3, r3, r1
 8008504:	f04f 0000 	mov.w	r0, #0
 8008508:	f04f 0100 	mov.w	r1, #0
 800850c:	00d9      	lsls	r1, r3, #3
 800850e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008512:	00d0      	lsls	r0, r2, #3
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	eb12 0208 	adds.w	r2, r2, r8
 800851c:	eb43 0309 	adc.w	r3, r3, r9
 8008520:	f04f 0000 	mov.w	r0, #0
 8008524:	f04f 0100 	mov.w	r1, #0
 8008528:	0259      	lsls	r1, r3, #9
 800852a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800852e:	0250      	lsls	r0, r2, #9
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4610      	mov	r0, r2
 8008536:	4619      	mov	r1, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	461a      	mov	r2, r3
 800853c:	f04f 0300 	mov.w	r3, #0
 8008540:	f7f8 fb82 	bl	8000c48 <__aeabi_uldivmod>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4613      	mov	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	e04a      	b.n	80085e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800854e:	4b31      	ldr	r3, [pc, #196]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	099b      	lsrs	r3, r3, #6
 8008554:	461a      	mov	r2, r3
 8008556:	f04f 0300 	mov.w	r3, #0
 800855a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800855e:	f04f 0100 	mov.w	r1, #0
 8008562:	ea02 0400 	and.w	r4, r2, r0
 8008566:	ea03 0501 	and.w	r5, r3, r1
 800856a:	4620      	mov	r0, r4
 800856c:	4629      	mov	r1, r5
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	f04f 0300 	mov.w	r3, #0
 8008576:	014b      	lsls	r3, r1, #5
 8008578:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800857c:	0142      	lsls	r2, r0, #5
 800857e:	4610      	mov	r0, r2
 8008580:	4619      	mov	r1, r3
 8008582:	1b00      	subs	r0, r0, r4
 8008584:	eb61 0105 	sbc.w	r1, r1, r5
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	018b      	lsls	r3, r1, #6
 8008592:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008596:	0182      	lsls	r2, r0, #6
 8008598:	1a12      	subs	r2, r2, r0
 800859a:	eb63 0301 	sbc.w	r3, r3, r1
 800859e:	f04f 0000 	mov.w	r0, #0
 80085a2:	f04f 0100 	mov.w	r1, #0
 80085a6:	00d9      	lsls	r1, r3, #3
 80085a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085ac:	00d0      	lsls	r0, r2, #3
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	1912      	adds	r2, r2, r4
 80085b4:	eb45 0303 	adc.w	r3, r5, r3
 80085b8:	f04f 0000 	mov.w	r0, #0
 80085bc:	f04f 0100 	mov.w	r1, #0
 80085c0:	0299      	lsls	r1, r3, #10
 80085c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80085c6:	0290      	lsls	r0, r2, #10
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	4610      	mov	r0, r2
 80085ce:	4619      	mov	r1, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	f7f8 fb36 	bl	8000c48 <__aeabi_uldivmod>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4613      	mov	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085e4:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	0c1b      	lsrs	r3, r3, #16
 80085ea:	f003 0303 	and.w	r3, r3, #3
 80085ee:	3301      	adds	r3, #1
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fc:	60bb      	str	r3, [r7, #8]
      break;
 80085fe:	e002      	b.n	8008606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008600:	4b05      	ldr	r3, [pc, #20]	; (8008618 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008602:	60bb      	str	r3, [r7, #8]
      break;
 8008604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008606:	68bb      	ldr	r3, [r7, #8]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008612:	bf00      	nop
 8008614:	40023800 	.word	0x40023800
 8008618:	00f42400 	.word	0x00f42400
 800861c:	007a1200 	.word	0x007a1200

08008620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008624:	4b03      	ldr	r3, [pc, #12]	; (8008634 <HAL_RCC_GetHCLKFreq+0x14>)
 8008626:	681b      	ldr	r3, [r3, #0]
}
 8008628:	4618      	mov	r0, r3
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20000004 	.word	0x20000004

08008638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800863c:	f7ff fff0 	bl	8008620 <HAL_RCC_GetHCLKFreq>
 8008640:	4602      	mov	r2, r0
 8008642:	4b05      	ldr	r3, [pc, #20]	; (8008658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	0a9b      	lsrs	r3, r3, #10
 8008648:	f003 0307 	and.w	r3, r3, #7
 800864c:	4903      	ldr	r1, [pc, #12]	; (800865c <HAL_RCC_GetPCLK1Freq+0x24>)
 800864e:	5ccb      	ldrb	r3, [r1, r3]
 8008650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008654:	4618      	mov	r0, r3
 8008656:	bd80      	pop	{r7, pc}
 8008658:	40023800 	.word	0x40023800
 800865c:	08018904 	.word	0x08018904

08008660 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	220f      	movs	r2, #15
 800866e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008670:	4b12      	ldr	r3, [pc, #72]	; (80086bc <HAL_RCC_GetClockConfig+0x5c>)
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f003 0203 	and.w	r2, r3, #3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800867c:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <HAL_RCC_GetClockConfig+0x5c>)
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008688:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <HAL_RCC_GetClockConfig+0x5c>)
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008694:	4b09      	ldr	r3, [pc, #36]	; (80086bc <HAL_RCC_GetClockConfig+0x5c>)
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	08db      	lsrs	r3, r3, #3
 800869a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80086a2:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <HAL_RCC_GetClockConfig+0x60>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0207 	and.w	r2, r3, #7
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	601a      	str	r2, [r3, #0]
}
 80086ae:	bf00      	nop
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	40023800 	.word	0x40023800
 80086c0:	40023c00 	.word	0x40023c00

080086c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d105      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d035      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80086ec:	4b62      	ldr	r3, [pc, #392]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086f2:	f7fc fc4d 	bl	8004f90 <HAL_GetTick>
 80086f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086f8:	e008      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086fa:	f7fc fc49 	bl	8004f90 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b02      	cmp	r3, #2
 8008706:	d901      	bls.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e0b0      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800870c:	4b5b      	ldr	r3, [pc, #364]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1f0      	bne.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	019a      	lsls	r2, r3, #6
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	071b      	lsls	r3, r3, #28
 8008724:	4955      	ldr	r1, [pc, #340]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008726:	4313      	orrs	r3, r2
 8008728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800872c:	4b52      	ldr	r3, [pc, #328]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008732:	f7fc fc2d 	bl	8004f90 <HAL_GetTick>
 8008736:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008738:	e008      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800873a:	f7fc fc29 	bl	8004f90 <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	2b02      	cmp	r3, #2
 8008746:	d901      	bls.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e090      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800874c:	4b4b      	ldr	r3, [pc, #300]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d0f0      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 8083 	beq.w	800886c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	4b44      	ldr	r3, [pc, #272]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	4a43      	ldr	r2, [pc, #268]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008774:	6413      	str	r3, [r2, #64]	; 0x40
 8008776:	4b41      	ldr	r3, [pc, #260]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008782:	4b3f      	ldr	r3, [pc, #252]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a3e      	ldr	r2, [pc, #248]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800878c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800878e:	f7fc fbff 	bl	8004f90 <HAL_GetTick>
 8008792:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008794:	e008      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008796:	f7fc fbfb 	bl	8004f90 <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e062      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80087a8:	4b35      	ldr	r3, [pc, #212]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0f0      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80087b4:	4b31      	ldr	r3, [pc, #196]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d02f      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d028      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80087d2:	4b2a      	ldr	r3, [pc, #168]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80087dc:	4b29      	ldr	r3, [pc, #164]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80087de:	2201      	movs	r2, #1
 80087e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80087e2:	4b28      	ldr	r3, [pc, #160]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80087e8:	4a24      	ldr	r2, [pc, #144]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80087ee:	4b23      	ldr	r3, [pc, #140]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d114      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80087fa:	f7fc fbc9 	bl	8004f90 <HAL_GetTick>
 80087fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008800:	e00a      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008802:	f7fc fbc5 	bl	8004f90 <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008810:	4293      	cmp	r3, r2
 8008812:	d901      	bls.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e02a      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008818:	4b18      	ldr	r3, [pc, #96]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800881a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0ee      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800882c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008830:	d10d      	bne.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008832:	4b12      	ldr	r3, [pc, #72]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008846:	490d      	ldr	r1, [pc, #52]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008848:	4313      	orrs	r3, r2
 800884a:	608b      	str	r3, [r1, #8]
 800884c:	e005      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800884e:	4b0b      	ldr	r3, [pc, #44]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	4a0a      	ldr	r2, [pc, #40]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008854:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008858:	6093      	str	r3, [r2, #8]
 800885a:	4b08      	ldr	r3, [pc, #32]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800885c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008866:	4905      	ldr	r1, [pc, #20]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008868:	4313      	orrs	r3, r2
 800886a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	42470068 	.word	0x42470068
 800887c:	40023800 	.word	0x40023800
 8008880:	40007000 	.word	0x40007000
 8008884:	42470e40 	.word	0x42470e40

08008888 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e083      	b.n	80089a2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	7f5b      	ldrb	r3, [r3, #29]
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7fc f8a0 	bl	80049f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	22ca      	movs	r2, #202	; 0xca
 80088bc:	625a      	str	r2, [r3, #36]	; 0x24
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2253      	movs	r2, #83	; 0x53
 80088c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fa5c 	bl	8008d84 <RTC_EnterInitMode>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d008      	beq.n	80088e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	22ff      	movs	r2, #255	; 0xff
 80088d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2204      	movs	r2, #4
 80088de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e05e      	b.n	80089a2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6812      	ldr	r2, [r2, #0]
 80088ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80088f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6899      	ldr	r1, [r3, #8]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	68d2      	ldr	r2, [r2, #12]
 800891e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6919      	ldr	r1, [r3, #16]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	041a      	lsls	r2, r3, #16
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008942:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10e      	bne.n	8008970 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f9ee 	bl	8008d34 <HAL_RTC_WaitForSynchro>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d008      	beq.n	8008970 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	22ff      	movs	r2, #255	; 0xff
 8008964:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2204      	movs	r2, #4
 800896a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e018      	b.n	80089a2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800897e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699a      	ldr	r2, [r3, #24]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	22ff      	movs	r2, #255	; 0xff
 8008998:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80089a0:	2300      	movs	r3, #0
  }
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b086      	sub	sp, #24
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80089dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80089e0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	0c1b      	lsrs	r3, r3, #16
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	0a1b      	lsrs	r3, r3, #8
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	0c1b      	lsrs	r3, r3, #16
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d11a      	bne.n	8008a5c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f9f4 	bl	8008e18 <RTC_Bcd2ToByte>
 8008a30:	4603      	mov	r3, r0
 8008a32:	461a      	mov	r2, r3
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 f9eb 	bl	8008e18 <RTC_Bcd2ToByte>
 8008a42:	4603      	mov	r3, r0
 8008a44:	461a      	mov	r2, r3
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	789b      	ldrb	r3, [r3, #2]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 f9e2 	bl	8008e18 <RTC_Bcd2ToByte>
 8008a54:	4603      	mov	r3, r0
 8008a56:	461a      	mov	r2, r3
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b086      	sub	sp, #24
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008a80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a84:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	0c1b      	lsrs	r3, r3, #16
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	0a1b      	lsrs	r3, r3, #8
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 031f 	and.w	r3, r3, #31
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	0b5b      	lsrs	r3, r3, #13
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d11a      	bne.n	8008afa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	78db      	ldrb	r3, [r3, #3]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 f9a5 	bl	8008e18 <RTC_Bcd2ToByte>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f99c 	bl	8008e18 <RTC_Bcd2ToByte>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	789b      	ldrb	r3, [r3, #2]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f993 	bl	8008e18 <RTC_Bcd2ToByte>
 8008af2:	4603      	mov	r3, r0
 8008af4:	461a      	mov	r2, r3
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008b04:	b590      	push	{r4, r7, lr}
 8008b06:	b089      	sub	sp, #36	; 0x24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	61fb      	str	r3, [r7, #28]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	7f1b      	ldrb	r3, [r3, #28]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d101      	bne.n	8008b28 <HAL_RTC_SetAlarm+0x24>
 8008b24:	2302      	movs	r3, #2
 8008b26:	e101      	b.n	8008d2c <HAL_RTC_SetAlarm+0x228>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2202      	movs	r2, #2
 8008b32:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d137      	bne.n	8008baa <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f942 	bl	8008ddc <RTC_ByteToBcd2>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	785b      	ldrb	r3, [r3, #1]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f93b 	bl	8008ddc <RTC_ByteToBcd2>
 8008b66:	4603      	mov	r3, r0
 8008b68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008b6a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	789b      	ldrb	r3, [r3, #2]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 f933 	bl	8008ddc <RTC_ByteToBcd2>
 8008b76:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008b78:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	78db      	ldrb	r3, [r3, #3]
 8008b80:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008b82:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 f925 	bl	8008ddc <RTC_ByteToBcd2>
 8008b92:	4603      	mov	r3, r0
 8008b94:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008b96:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008b9e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	61fb      	str	r3, [r7, #28]
 8008ba8:	e023      	b.n	8008bf2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d102      	bne.n	8008bbe <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	785b      	ldrb	r3, [r3, #1]
 8008bc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008bca:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008bd0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	78db      	ldrb	r3, [r3, #3]
 8008bd6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008bd8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008be0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008be2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008be8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	22ca      	movs	r2, #202	; 0xca
 8008c04:	625a      	str	r2, [r3, #36]	; 0x24
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2253      	movs	r2, #83	; 0x53
 8008c0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c16:	d13f      	bne.n	8008c98 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c26:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c36:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c38:	f7fc f9aa 	bl	8004f90 <HAL_GetTick>
 8008c3c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008c3e:	e013      	b.n	8008c68 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c40:	f7fc f9a6 	bl	8004f90 <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c4e:	d90b      	bls.n	8008c68 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	22ff      	movs	r2, #255	; 0xff
 8008c56:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2203      	movs	r2, #3
 8008c5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e061      	b.n	8008d2c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0e4      	beq.n	8008c40 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c94:	609a      	str	r2, [r3, #8]
 8008c96:	e03e      	b.n	8008d16 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689a      	ldr	r2, [r3, #8]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ca6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cb6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008cb8:	f7fc f96a 	bl	8004f90 <HAL_GetTick>
 8008cbc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008cbe:	e013      	b.n	8008ce8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008cc0:	f7fc f966 	bl	8004f90 <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cce:	d90b      	bls.n	8008ce8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	22ff      	movs	r2, #255	; 0xff
 8008cd6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2203      	movs	r2, #3
 8008cdc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e021      	b.n	8008d2c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0e4      	beq.n	8008cc0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d14:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	22ff      	movs	r2, #255	; 0xff
 8008d1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2201      	movs	r2, #1
 8008d22:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3724      	adds	r7, #36	; 0x24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd90      	pop	{r4, r7, pc}

08008d34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d50:	f7fc f91e 	bl	8004f90 <HAL_GetTick>
 8008d54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d56:	e009      	b.n	8008d6c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d58:	f7fc f91a 	bl	8004f90 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d66:	d901      	bls.n	8008d6c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e007      	b.n	8008d7c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0ee      	beq.n	8008d58 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d119      	bne.n	8008dd2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008da6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008da8:	f7fc f8f2 	bl	8004f90 <HAL_GetTick>
 8008dac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008dae:	e009      	b.n	8008dc4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008db0:	f7fc f8ee 	bl	8004f90 <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dbe:	d901      	bls.n	8008dc4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e007      	b.n	8008dd4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0ee      	beq.n	8008db0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008dea:	e005      	b.n	8008df8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3301      	adds	r3, #1
 8008df0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008df2:	79fb      	ldrb	r3, [r7, #7]
 8008df4:	3b0a      	subs	r3, #10
 8008df6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	2b09      	cmp	r3, #9
 8008dfc:	d8f6      	bhi.n	8008dec <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	011b      	lsls	r3, r3, #4
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	b2db      	uxtb	r3, r3
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	091b      	lsrs	r3, r3, #4
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4613      	mov	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4413      	add	r3, r2
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008e38:	79fb      	ldrb	r3, [r7, #7]
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	4413      	add	r3, r2
 8008e46:	b2db      	uxtb	r3, r3
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e07b      	b.n	8008f5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d108      	bne.n	8008e80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e76:	d009      	beq.n	8008e8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	61da      	str	r2, [r3, #28]
 8008e7e:	e005      	b.n	8008e8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d106      	bne.n	8008eac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7fb fdcc 	bl	8004a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ec2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008efc:	431a      	orrs	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f10:	ea42 0103 	orr.w	r1, r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	0c1b      	lsrs	r3, r3, #16
 8008f2a:	f003 0104 	and.w	r1, r3, #4
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	f003 0210 	and.w	r2, r3, #16
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69da      	ldr	r2, [r3, #28]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b088      	sub	sp, #32
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	603b      	str	r3, [r7, #0]
 8008f72:	4613      	mov	r3, r2
 8008f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d101      	bne.n	8008f88 <HAL_SPI_Transmit+0x22>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e126      	b.n	80091d6 <HAL_SPI_Transmit+0x270>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f90:	f7fb fffe 	bl	8004f90 <HAL_GetTick>
 8008f94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d002      	beq.n	8008fac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008faa:	e10b      	b.n	80091c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <HAL_SPI_Transmit+0x52>
 8008fb2:	88fb      	ldrh	r3, [r7, #6]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d102      	bne.n	8008fbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008fbc:	e102      	b.n	80091c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2203      	movs	r2, #3
 8008fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	88fa      	ldrh	r2, [r7, #6]
 8008fd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	88fa      	ldrh	r2, [r7, #6]
 8008fdc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009004:	d10f      	bne.n	8009026 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009014:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009024:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009030:	2b40      	cmp	r3, #64	; 0x40
 8009032:	d007      	beq.n	8009044 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800904c:	d14b      	bne.n	80090e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <HAL_SPI_Transmit+0xf6>
 8009056:	8afb      	ldrh	r3, [r7, #22]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d13e      	bne.n	80090da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	881a      	ldrh	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906c:	1c9a      	adds	r2, r3, #2
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009076:	b29b      	uxth	r3, r3
 8009078:	3b01      	subs	r3, #1
 800907a:	b29a      	uxth	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009080:	e02b      	b.n	80090da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f003 0302 	and.w	r3, r3, #2
 800908c:	2b02      	cmp	r3, #2
 800908e:	d112      	bne.n	80090b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009094:	881a      	ldrh	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a0:	1c9a      	adds	r2, r3, #2
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	3b01      	subs	r3, #1
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80090b4:	e011      	b.n	80090da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090b6:	f7fb ff6b 	bl	8004f90 <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d803      	bhi.n	80090ce <HAL_SPI_Transmit+0x168>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090cc:	d102      	bne.n	80090d4 <HAL_SPI_Transmit+0x16e>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d102      	bne.n	80090da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80090d8:	e074      	b.n	80091c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090de:	b29b      	uxth	r3, r3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1ce      	bne.n	8009082 <HAL_SPI_Transmit+0x11c>
 80090e4:	e04c      	b.n	8009180 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <HAL_SPI_Transmit+0x18e>
 80090ee:	8afb      	ldrh	r3, [r7, #22]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d140      	bne.n	8009176 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	330c      	adds	r3, #12
 80090fe:	7812      	ldrb	r2, [r2, #0]
 8009100:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009110:	b29b      	uxth	r3, r3
 8009112:	3b01      	subs	r3, #1
 8009114:	b29a      	uxth	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800911a:	e02c      	b.n	8009176 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b02      	cmp	r3, #2
 8009128:	d113      	bne.n	8009152 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	330c      	adds	r3, #12
 8009134:	7812      	ldrb	r2, [r2, #0]
 8009136:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009146:	b29b      	uxth	r3, r3
 8009148:	3b01      	subs	r3, #1
 800914a:	b29a      	uxth	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009150:	e011      	b.n	8009176 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009152:	f7fb ff1d 	bl	8004f90 <HAL_GetTick>
 8009156:	4602      	mov	r2, r0
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	429a      	cmp	r2, r3
 8009160:	d803      	bhi.n	800916a <HAL_SPI_Transmit+0x204>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009168:	d102      	bne.n	8009170 <HAL_SPI_Transmit+0x20a>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d102      	bne.n	8009176 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009174:	e026      	b.n	80091c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800917a:	b29b      	uxth	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1cd      	bne.n	800911c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 fa63 	bl	8009650 <SPI_EndRxTxTransaction>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2220      	movs	r2, #32
 8009194:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10a      	bne.n	80091b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800919e:	2300      	movs	r3, #0
 80091a0:	613b      	str	r3, [r7, #16]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	613b      	str	r3, [r7, #16]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	613b      	str	r3, [r7, #16]
 80091b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	77fb      	strb	r3, [r7, #31]
 80091c0:	e000      	b.n	80091c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80091c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80091d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3720      	adds	r7, #32
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b08c      	sub	sp, #48	; 0x30
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
 80091ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80091ec:	2301      	movs	r3, #1
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d101      	bne.n	8009204 <HAL_SPI_TransmitReceive+0x26>
 8009200:	2302      	movs	r3, #2
 8009202:	e18a      	b.n	800951a <HAL_SPI_TransmitReceive+0x33c>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800920c:	f7fb fec0 	bl	8004f90 <HAL_GetTick>
 8009210:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009222:	887b      	ldrh	r3, [r7, #2]
 8009224:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800922a:	2b01      	cmp	r3, #1
 800922c:	d00f      	beq.n	800924e <HAL_SPI_TransmitReceive+0x70>
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009234:	d107      	bne.n	8009246 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d103      	bne.n	8009246 <HAL_SPI_TransmitReceive+0x68>
 800923e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009242:	2b04      	cmp	r3, #4
 8009244:	d003      	beq.n	800924e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009246:	2302      	movs	r3, #2
 8009248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800924c:	e15b      	b.n	8009506 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <HAL_SPI_TransmitReceive+0x82>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <HAL_SPI_TransmitReceive+0x82>
 800925a:	887b      	ldrh	r3, [r7, #2]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d103      	bne.n	8009268 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009266:	e14e      	b.n	8009506 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b04      	cmp	r3, #4
 8009272:	d003      	beq.n	800927c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2205      	movs	r2, #5
 8009278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	887a      	ldrh	r2, [r7, #2]
 800928c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	887a      	ldrh	r2, [r7, #2]
 8009292:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	887a      	ldrh	r2, [r7, #2]
 800929e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	887a      	ldrh	r2, [r7, #2]
 80092a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092bc:	2b40      	cmp	r3, #64	; 0x40
 80092be:	d007      	beq.n	80092d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092d8:	d178      	bne.n	80093cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d002      	beq.n	80092e8 <HAL_SPI_TransmitReceive+0x10a>
 80092e2:	8b7b      	ldrh	r3, [r7, #26]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d166      	bne.n	80093b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ec:	881a      	ldrh	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f8:	1c9a      	adds	r2, r3, #2
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009302:	b29b      	uxth	r3, r3
 8009304:	3b01      	subs	r3, #1
 8009306:	b29a      	uxth	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800930c:	e053      	b.n	80093b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b02      	cmp	r3, #2
 800931a:	d11b      	bne.n	8009354 <HAL_SPI_TransmitReceive+0x176>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d016      	beq.n	8009354 <HAL_SPI_TransmitReceive+0x176>
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	2b01      	cmp	r3, #1
 800932a:	d113      	bne.n	8009354 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009330:	881a      	ldrh	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933c:	1c9a      	adds	r2, r3, #2
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009346:	b29b      	uxth	r3, r3
 8009348:	3b01      	subs	r3, #1
 800934a:	b29a      	uxth	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b01      	cmp	r3, #1
 8009360:	d119      	bne.n	8009396 <HAL_SPI_TransmitReceive+0x1b8>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009366:	b29b      	uxth	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d014      	beq.n	8009396 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68da      	ldr	r2, [r3, #12]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009376:	b292      	uxth	r2, r2
 8009378:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937e:	1c9a      	adds	r2, r3, #2
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009388:	b29b      	uxth	r3, r3
 800938a:	3b01      	subs	r3, #1
 800938c:	b29a      	uxth	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009392:	2301      	movs	r3, #1
 8009394:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009396:	f7fb fdfb 	bl	8004f90 <HAL_GetTick>
 800939a:	4602      	mov	r2, r0
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d807      	bhi.n	80093b6 <HAL_SPI_TransmitReceive+0x1d8>
 80093a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093ac:	d003      	beq.n	80093b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80093b4:	e0a7      	b.n	8009506 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1a6      	bne.n	800930e <HAL_SPI_TransmitReceive+0x130>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1a1      	bne.n	800930e <HAL_SPI_TransmitReceive+0x130>
 80093ca:	e07c      	b.n	80094c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <HAL_SPI_TransmitReceive+0x1fc>
 80093d4:	8b7b      	ldrh	r3, [r7, #26]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d16b      	bne.n	80094b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	330c      	adds	r3, #12
 80093e4:	7812      	ldrb	r2, [r2, #0]
 80093e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	3b01      	subs	r3, #1
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009400:	e057      	b.n	80094b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f003 0302 	and.w	r3, r3, #2
 800940c:	2b02      	cmp	r3, #2
 800940e:	d11c      	bne.n	800944a <HAL_SPI_TransmitReceive+0x26c>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009414:	b29b      	uxth	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d017      	beq.n	800944a <HAL_SPI_TransmitReceive+0x26c>
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	2b01      	cmp	r3, #1
 800941e:	d114      	bne.n	800944a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	330c      	adds	r3, #12
 800942a:	7812      	ldrb	r2, [r2, #0]
 800942c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b01      	cmp	r3, #1
 8009456:	d119      	bne.n	800948c <HAL_SPI_TransmitReceive+0x2ae>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800945c:	b29b      	uxth	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d014      	beq.n	800948c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68da      	ldr	r2, [r3, #12]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	b2d2      	uxtb	r2, r2
 800946e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800947e:	b29b      	uxth	r3, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	b29a      	uxth	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009488:	2301      	movs	r3, #1
 800948a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800948c:	f7fb fd80 	bl	8004f90 <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009498:	429a      	cmp	r2, r3
 800949a:	d803      	bhi.n	80094a4 <HAL_SPI_TransmitReceive+0x2c6>
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094a2:	d102      	bne.n	80094aa <HAL_SPI_TransmitReceive+0x2cc>
 80094a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d103      	bne.n	80094b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80094b0:	e029      	b.n	8009506 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1a2      	bne.n	8009402 <HAL_SPI_TransmitReceive+0x224>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d19d      	bne.n	8009402 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 f8c0 	bl	8009650 <SPI_EndRxTxTransaction>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d006      	beq.n	80094e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2220      	movs	r2, #32
 80094e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80094e2:	e010      	b.n	8009506 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10b      	bne.n	8009504 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094ec:	2300      	movs	r3, #0
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	617b      	str	r3, [r7, #20]
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	e000      	b.n	8009506 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009504:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800951a:	4618      	mov	r0, r3
 800951c:	3730      	adds	r7, #48	; 0x30
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009530:	b2db      	uxtb	r3, r3
}
 8009532:	4618      	mov	r0, r3
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
	...

08009540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	4613      	mov	r3, r2
 800954e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009550:	f7fb fd1e 	bl	8004f90 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	1a9b      	subs	r3, r3, r2
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	4413      	add	r3, r2
 800955e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009560:	f7fb fd16 	bl	8004f90 <HAL_GetTick>
 8009564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009566:	4b39      	ldr	r3, [pc, #228]	; (800964c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	015b      	lsls	r3, r3, #5
 800956c:	0d1b      	lsrs	r3, r3, #20
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	fb02 f303 	mul.w	r3, r2, r3
 8009574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009576:	e054      	b.n	8009622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800957e:	d050      	beq.n	8009622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009580:	f7fb fd06 	bl	8004f90 <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	429a      	cmp	r2, r3
 800958e:	d902      	bls.n	8009596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d13d      	bne.n	8009612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095ae:	d111      	bne.n	80095d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095b8:	d004      	beq.n	80095c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095c2:	d107      	bne.n	80095d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095dc:	d10f      	bne.n	80095fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e017      	b.n	8009642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	3b01      	subs	r3, #1
 8009620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	4013      	ands	r3, r2
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	429a      	cmp	r2, r3
 8009630:	bf0c      	ite	eq
 8009632:	2301      	moveq	r3, #1
 8009634:	2300      	movne	r3, #0
 8009636:	b2db      	uxtb	r3, r3
 8009638:	461a      	mov	r2, r3
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	429a      	cmp	r2, r3
 800963e:	d19b      	bne.n	8009578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3720      	adds	r7, #32
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000004 	.word	0x20000004

08009650 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af02      	add	r7, sp, #8
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800965c:	4b1b      	ldr	r3, [pc, #108]	; (80096cc <SPI_EndRxTxTransaction+0x7c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a1b      	ldr	r2, [pc, #108]	; (80096d0 <SPI_EndRxTxTransaction+0x80>)
 8009662:	fba2 2303 	umull	r2, r3, r2, r3
 8009666:	0d5b      	lsrs	r3, r3, #21
 8009668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800966c:	fb02 f303 	mul.w	r3, r2, r3
 8009670:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800967a:	d112      	bne.n	80096a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	2200      	movs	r2, #0
 8009684:	2180      	movs	r1, #128	; 0x80
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff ff5a 	bl	8009540 <SPI_WaitFlagStateUntilTimeout>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d016      	beq.n	80096c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009696:	f043 0220 	orr.w	r2, r3, #32
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e00f      	b.n	80096c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00a      	beq.n	80096be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b8:	2b80      	cmp	r3, #128	; 0x80
 80096ba:	d0f2      	beq.n	80096a2 <SPI_EndRxTxTransaction+0x52>
 80096bc:	e000      	b.n	80096c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80096be:	bf00      	nop
  }

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20000004 	.word	0x20000004
 80096d0:	165e9f81 	.word	0x165e9f81

080096d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e041      	b.n	800976a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7fb f9ea 	bl	8004ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3304      	adds	r3, #4
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f000 fac4 	bl	8009ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b01      	cmp	r3, #1
 8009786:	d001      	beq.n	800978c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e04e      	b.n	800982a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0201 	orr.w	r2, r2, #1
 80097a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a23      	ldr	r2, [pc, #140]	; (8009838 <HAL_TIM_Base_Start_IT+0xc4>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d022      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b6:	d01d      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a1f      	ldr	r2, [pc, #124]	; (800983c <HAL_TIM_Base_Start_IT+0xc8>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d018      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a1e      	ldr	r2, [pc, #120]	; (8009840 <HAL_TIM_Base_Start_IT+0xcc>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d013      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a1c      	ldr	r2, [pc, #112]	; (8009844 <HAL_TIM_Base_Start_IT+0xd0>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d00e      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <HAL_TIM_Base_Start_IT+0xd4>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d009      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a19      	ldr	r2, [pc, #100]	; (800984c <HAL_TIM_Base_Start_IT+0xd8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d004      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a18      	ldr	r2, [pc, #96]	; (8009850 <HAL_TIM_Base_Start_IT+0xdc>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d111      	bne.n	8009818 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f003 0307 	and.w	r3, r3, #7
 80097fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b06      	cmp	r3, #6
 8009804:	d010      	beq.n	8009828 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f042 0201 	orr.w	r2, r2, #1
 8009814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009816:	e007      	b.n	8009828 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0201 	orr.w	r2, r2, #1
 8009826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	40010000 	.word	0x40010000
 800983c:	40000400 	.word	0x40000400
 8009840:	40000800 	.word	0x40000800
 8009844:	40000c00 	.word	0x40000c00
 8009848:	40010400 	.word	0x40010400
 800984c:	40014000 	.word	0x40014000
 8009850:	40001800 	.word	0x40001800

08009854 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f022 0201 	bic.w	r2, r2, #1
 800986a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6a1a      	ldr	r2, [r3, #32]
 8009872:	f241 1311 	movw	r3, #4369	; 0x1111
 8009876:	4013      	ands	r3, r2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10f      	bne.n	800989c <HAL_TIM_Base_Stop_IT+0x48>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6a1a      	ldr	r2, [r3, #32]
 8009882:	f240 4344 	movw	r3, #1092	; 0x444
 8009886:	4013      	ands	r3, r2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d107      	bne.n	800989c <HAL_TIM_Base_Stop_IT+0x48>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f022 0201 	bic.w	r2, r2, #1
 800989a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	f003 0302 	and.w	r3, r3, #2
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d122      	bne.n	800990e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f003 0302 	and.w	r3, r3, #2
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d11b      	bne.n	800990e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f06f 0202 	mvn.w	r2, #2
 80098de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	f003 0303 	and.w	r3, r3, #3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d003      	beq.n	80098fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f9b5 	bl	8009c64 <HAL_TIM_IC_CaptureCallback>
 80098fa:	e005      	b.n	8009908 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f9a7 	bl	8009c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f9b8 	bl	8009c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	f003 0304 	and.w	r3, r3, #4
 8009918:	2b04      	cmp	r3, #4
 800991a:	d122      	bne.n	8009962 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	f003 0304 	and.w	r3, r3, #4
 8009926:	2b04      	cmp	r3, #4
 8009928:	d11b      	bne.n	8009962 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f06f 0204 	mvn.w	r2, #4
 8009932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009944:	2b00      	cmp	r3, #0
 8009946:	d003      	beq.n	8009950 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f98b 	bl	8009c64 <HAL_TIM_IC_CaptureCallback>
 800994e:	e005      	b.n	800995c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f97d 	bl	8009c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f98e 	bl	8009c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	f003 0308 	and.w	r3, r3, #8
 800996c:	2b08      	cmp	r3, #8
 800996e:	d122      	bne.n	80099b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f003 0308 	and.w	r3, r3, #8
 800997a:	2b08      	cmp	r3, #8
 800997c:	d11b      	bne.n	80099b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f06f 0208 	mvn.w	r2, #8
 8009986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2204      	movs	r2, #4
 800998c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	f003 0303 	and.w	r3, r3, #3
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f961 	bl	8009c64 <HAL_TIM_IC_CaptureCallback>
 80099a2:	e005      	b.n	80099b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f953 	bl	8009c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f964 	bl	8009c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	f003 0310 	and.w	r3, r3, #16
 80099c0:	2b10      	cmp	r3, #16
 80099c2:	d122      	bne.n	8009a0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f003 0310 	and.w	r3, r3, #16
 80099ce:	2b10      	cmp	r3, #16
 80099d0:	d11b      	bne.n	8009a0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f06f 0210 	mvn.w	r2, #16
 80099da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2208      	movs	r2, #8
 80099e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f937 	bl	8009c64 <HAL_TIM_IC_CaptureCallback>
 80099f6:	e005      	b.n	8009a04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f929 	bl	8009c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f93a 	bl	8009c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d10e      	bne.n	8009a36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d107      	bne.n	8009a36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f06f 0201 	mvn.w	r2, #1
 8009a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7fa fedd 	bl	80047f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a40:	2b80      	cmp	r3, #128	; 0x80
 8009a42:	d10e      	bne.n	8009a62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a4e:	2b80      	cmp	r3, #128	; 0x80
 8009a50:	d107      	bne.n	8009a62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fadf 	bl	800a020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6c:	2b40      	cmp	r3, #64	; 0x40
 8009a6e:	d10e      	bne.n	8009a8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7a:	2b40      	cmp	r3, #64	; 0x40
 8009a7c:	d107      	bne.n	8009a8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f8ff 	bl	8009c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	f003 0320 	and.w	r3, r3, #32
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	d10e      	bne.n	8009aba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	f003 0320 	and.w	r3, r3, #32
 8009aa6:	2b20      	cmp	r3, #32
 8009aa8:	d107      	bne.n	8009aba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f06f 0220 	mvn.w	r2, #32
 8009ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 faa9 	bl	800a00c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009aba:	bf00      	nop
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d101      	bne.n	8009ade <HAL_TIM_ConfigClockSource+0x1c>
 8009ada:	2302      	movs	r3, #2
 8009adc:	e0b4      	b.n	8009c48 <HAL_TIM_ConfigClockSource+0x186>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009afc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b04:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b16:	d03e      	beq.n	8009b96 <HAL_TIM_ConfigClockSource+0xd4>
 8009b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b1c:	f200 8087 	bhi.w	8009c2e <HAL_TIM_ConfigClockSource+0x16c>
 8009b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b24:	f000 8086 	beq.w	8009c34 <HAL_TIM_ConfigClockSource+0x172>
 8009b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b2c:	d87f      	bhi.n	8009c2e <HAL_TIM_ConfigClockSource+0x16c>
 8009b2e:	2b70      	cmp	r3, #112	; 0x70
 8009b30:	d01a      	beq.n	8009b68 <HAL_TIM_ConfigClockSource+0xa6>
 8009b32:	2b70      	cmp	r3, #112	; 0x70
 8009b34:	d87b      	bhi.n	8009c2e <HAL_TIM_ConfigClockSource+0x16c>
 8009b36:	2b60      	cmp	r3, #96	; 0x60
 8009b38:	d050      	beq.n	8009bdc <HAL_TIM_ConfigClockSource+0x11a>
 8009b3a:	2b60      	cmp	r3, #96	; 0x60
 8009b3c:	d877      	bhi.n	8009c2e <HAL_TIM_ConfigClockSource+0x16c>
 8009b3e:	2b50      	cmp	r3, #80	; 0x50
 8009b40:	d03c      	beq.n	8009bbc <HAL_TIM_ConfigClockSource+0xfa>
 8009b42:	2b50      	cmp	r3, #80	; 0x50
 8009b44:	d873      	bhi.n	8009c2e <HAL_TIM_ConfigClockSource+0x16c>
 8009b46:	2b40      	cmp	r3, #64	; 0x40
 8009b48:	d058      	beq.n	8009bfc <HAL_TIM_ConfigClockSource+0x13a>
 8009b4a:	2b40      	cmp	r3, #64	; 0x40
 8009b4c:	d86f      	bhi.n	8009c2e <HAL_TIM_ConfigClockSource+0x16c>
 8009b4e:	2b30      	cmp	r3, #48	; 0x30
 8009b50:	d064      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x15a>
 8009b52:	2b30      	cmp	r3, #48	; 0x30
 8009b54:	d86b      	bhi.n	8009c2e <HAL_TIM_ConfigClockSource+0x16c>
 8009b56:	2b20      	cmp	r3, #32
 8009b58:	d060      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x15a>
 8009b5a:	2b20      	cmp	r3, #32
 8009b5c:	d867      	bhi.n	8009c2e <HAL_TIM_ConfigClockSource+0x16c>
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d05c      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x15a>
 8009b62:	2b10      	cmp	r3, #16
 8009b64:	d05a      	beq.n	8009c1c <HAL_TIM_ConfigClockSource+0x15a>
 8009b66:	e062      	b.n	8009c2e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	6899      	ldr	r1, [r3, #8]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f000 f9ac 	bl	8009ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	609a      	str	r2, [r3, #8]
      break;
 8009b94:	e04f      	b.n	8009c36 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	6899      	ldr	r1, [r3, #8]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	f000 f995 	bl	8009ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689a      	ldr	r2, [r3, #8]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bb8:	609a      	str	r2, [r3, #8]
      break;
 8009bba:	e03c      	b.n	8009c36 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	6859      	ldr	r1, [r3, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	f000 f909 	bl	8009de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2150      	movs	r1, #80	; 0x50
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 f962 	bl	8009e9e <TIM_ITRx_SetConfig>
      break;
 8009bda:	e02c      	b.n	8009c36 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6818      	ldr	r0, [r3, #0]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	6859      	ldr	r1, [r3, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	461a      	mov	r2, r3
 8009bea:	f000 f928 	bl	8009e3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2160      	movs	r1, #96	; 0x60
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 f952 	bl	8009e9e <TIM_ITRx_SetConfig>
      break;
 8009bfa:	e01c      	b.n	8009c36 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6818      	ldr	r0, [r3, #0]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	6859      	ldr	r1, [r3, #4]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	f000 f8e9 	bl	8009de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2140      	movs	r1, #64	; 0x40
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 f942 	bl	8009e9e <TIM_ITRx_SetConfig>
      break;
 8009c1a:	e00c      	b.n	8009c36 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	f000 f939 	bl	8009e9e <TIM_ITRx_SetConfig>
      break;
 8009c2c:	e003      	b.n	8009c36 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	73fb      	strb	r3, [r7, #15]
      break;
 8009c32:	e000      	b.n	8009c36 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a40      	ldr	r2, [pc, #256]	; (8009db4 <TIM_Base_SetConfig+0x114>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d013      	beq.n	8009ce0 <TIM_Base_SetConfig+0x40>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cbe:	d00f      	beq.n	8009ce0 <TIM_Base_SetConfig+0x40>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a3d      	ldr	r2, [pc, #244]	; (8009db8 <TIM_Base_SetConfig+0x118>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d00b      	beq.n	8009ce0 <TIM_Base_SetConfig+0x40>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a3c      	ldr	r2, [pc, #240]	; (8009dbc <TIM_Base_SetConfig+0x11c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d007      	beq.n	8009ce0 <TIM_Base_SetConfig+0x40>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a3b      	ldr	r2, [pc, #236]	; (8009dc0 <TIM_Base_SetConfig+0x120>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d003      	beq.n	8009ce0 <TIM_Base_SetConfig+0x40>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a3a      	ldr	r2, [pc, #232]	; (8009dc4 <TIM_Base_SetConfig+0x124>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d108      	bne.n	8009cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a2f      	ldr	r2, [pc, #188]	; (8009db4 <TIM_Base_SetConfig+0x114>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d02b      	beq.n	8009d52 <TIM_Base_SetConfig+0xb2>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d00:	d027      	beq.n	8009d52 <TIM_Base_SetConfig+0xb2>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a2c      	ldr	r2, [pc, #176]	; (8009db8 <TIM_Base_SetConfig+0x118>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d023      	beq.n	8009d52 <TIM_Base_SetConfig+0xb2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a2b      	ldr	r2, [pc, #172]	; (8009dbc <TIM_Base_SetConfig+0x11c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d01f      	beq.n	8009d52 <TIM_Base_SetConfig+0xb2>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a2a      	ldr	r2, [pc, #168]	; (8009dc0 <TIM_Base_SetConfig+0x120>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d01b      	beq.n	8009d52 <TIM_Base_SetConfig+0xb2>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a29      	ldr	r2, [pc, #164]	; (8009dc4 <TIM_Base_SetConfig+0x124>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d017      	beq.n	8009d52 <TIM_Base_SetConfig+0xb2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a28      	ldr	r2, [pc, #160]	; (8009dc8 <TIM_Base_SetConfig+0x128>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d013      	beq.n	8009d52 <TIM_Base_SetConfig+0xb2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a27      	ldr	r2, [pc, #156]	; (8009dcc <TIM_Base_SetConfig+0x12c>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d00f      	beq.n	8009d52 <TIM_Base_SetConfig+0xb2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a26      	ldr	r2, [pc, #152]	; (8009dd0 <TIM_Base_SetConfig+0x130>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d00b      	beq.n	8009d52 <TIM_Base_SetConfig+0xb2>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a25      	ldr	r2, [pc, #148]	; (8009dd4 <TIM_Base_SetConfig+0x134>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d007      	beq.n	8009d52 <TIM_Base_SetConfig+0xb2>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a24      	ldr	r2, [pc, #144]	; (8009dd8 <TIM_Base_SetConfig+0x138>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d003      	beq.n	8009d52 <TIM_Base_SetConfig+0xb2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a23      	ldr	r2, [pc, #140]	; (8009ddc <TIM_Base_SetConfig+0x13c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d108      	bne.n	8009d64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	689a      	ldr	r2, [r3, #8]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a0a      	ldr	r2, [pc, #40]	; (8009db4 <TIM_Base_SetConfig+0x114>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d003      	beq.n	8009d98 <TIM_Base_SetConfig+0xf8>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a0c      	ldr	r2, [pc, #48]	; (8009dc4 <TIM_Base_SetConfig+0x124>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d103      	bne.n	8009da0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	691a      	ldr	r2, [r3, #16]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	615a      	str	r2, [r3, #20]
}
 8009da6:	bf00      	nop
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	40010000 	.word	0x40010000
 8009db8:	40000400 	.word	0x40000400
 8009dbc:	40000800 	.word	0x40000800
 8009dc0:	40000c00 	.word	0x40000c00
 8009dc4:	40010400 	.word	0x40010400
 8009dc8:	40014000 	.word	0x40014000
 8009dcc:	40014400 	.word	0x40014400
 8009dd0:	40014800 	.word	0x40014800
 8009dd4:	40001800 	.word	0x40001800
 8009dd8:	40001c00 	.word	0x40001c00
 8009ddc:	40002000 	.word	0x40002000

08009de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	f023 0201 	bic.w	r2, r3, #1
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	011b      	lsls	r3, r3, #4
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f023 030a 	bic.w	r3, r3, #10
 8009e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	621a      	str	r2, [r3, #32]
}
 8009e32:	bf00      	nop
 8009e34:	371c      	adds	r7, #28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b087      	sub	sp, #28
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	60f8      	str	r0, [r7, #12]
 8009e46:	60b9      	str	r1, [r7, #8]
 8009e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	f023 0210 	bic.w	r2, r3, #16
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	031b      	lsls	r3, r3, #12
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	621a      	str	r2, [r3, #32]
}
 8009e92:	bf00      	nop
 8009e94:	371c      	adds	r7, #28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b085      	sub	sp, #20
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	f043 0307 	orr.w	r3, r3, #7
 8009ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	609a      	str	r2, [r3, #8]
}
 8009ec8:	bf00      	nop
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	021a      	lsls	r2, r3, #8
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	609a      	str	r2, [r3, #8]
}
 8009f08:	bf00      	nop
 8009f0a:	371c      	adds	r7, #28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d101      	bne.n	8009f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f28:	2302      	movs	r3, #2
 8009f2a:	e05a      	b.n	8009fe2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2202      	movs	r2, #2
 8009f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a21      	ldr	r2, [pc, #132]	; (8009ff0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d022      	beq.n	8009fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f78:	d01d      	beq.n	8009fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a1d      	ldr	r2, [pc, #116]	; (8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d018      	beq.n	8009fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a1b      	ldr	r2, [pc, #108]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d013      	beq.n	8009fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a1a      	ldr	r2, [pc, #104]	; (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d00e      	beq.n	8009fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a18      	ldr	r2, [pc, #96]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d009      	beq.n	8009fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a17      	ldr	r2, [pc, #92]	; (800a004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d004      	beq.n	8009fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a15      	ldr	r2, [pc, #84]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d10c      	bne.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	40010000 	.word	0x40010000
 8009ff4:	40000400 	.word	0x40000400
 8009ff8:	40000800 	.word	0x40000800
 8009ffc:	40000c00 	.word	0x40000c00
 800a000:	40010400 	.word	0x40010400
 800a004:	40014000 	.word	0x40014000
 800a008:	40001800 	.word	0x40001800

0800a00c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a034:	b084      	sub	sp, #16
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	f107 001c 	add.w	r0, r7, #28
 800a042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d122      	bne.n	800a092 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a076:	2b01      	cmp	r3, #1
 800a078:	d105      	bne.n	800a086 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f001 fb1c 	bl	800b6c4 <USB_CoreReset>
 800a08c:	4603      	mov	r3, r0
 800a08e:	73fb      	strb	r3, [r7, #15]
 800a090:	e01a      	b.n	800a0c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 fb10 	bl	800b6c4 <USB_CoreReset>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a0a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d106      	bne.n	800a0bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	639a      	str	r2, [r3, #56]	; 0x38
 800a0ba:	e005      	b.n	800a0c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d10b      	bne.n	800a0e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f043 0206 	orr.w	r2, r3, #6
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f043 0220 	orr.w	r2, r3, #32
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0f2:	b004      	add	sp, #16
 800a0f4:	4770      	bx	lr
	...

0800a0f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d165      	bne.n	800a1d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	4a41      	ldr	r2, [pc, #260]	; (800a214 <USB_SetTurnaroundTime+0x11c>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d906      	bls.n	800a122 <USB_SetTurnaroundTime+0x2a>
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	4a40      	ldr	r2, [pc, #256]	; (800a218 <USB_SetTurnaroundTime+0x120>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d202      	bcs.n	800a122 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a11c:	230f      	movs	r3, #15
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	e062      	b.n	800a1e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	4a3c      	ldr	r2, [pc, #240]	; (800a218 <USB_SetTurnaroundTime+0x120>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d306      	bcc.n	800a138 <USB_SetTurnaroundTime+0x40>
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	4a3b      	ldr	r2, [pc, #236]	; (800a21c <USB_SetTurnaroundTime+0x124>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d202      	bcs.n	800a138 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a132:	230e      	movs	r3, #14
 800a134:	617b      	str	r3, [r7, #20]
 800a136:	e057      	b.n	800a1e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	4a38      	ldr	r2, [pc, #224]	; (800a21c <USB_SetTurnaroundTime+0x124>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d306      	bcc.n	800a14e <USB_SetTurnaroundTime+0x56>
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	4a37      	ldr	r2, [pc, #220]	; (800a220 <USB_SetTurnaroundTime+0x128>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d202      	bcs.n	800a14e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a148:	230d      	movs	r3, #13
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	e04c      	b.n	800a1e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	4a33      	ldr	r2, [pc, #204]	; (800a220 <USB_SetTurnaroundTime+0x128>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d306      	bcc.n	800a164 <USB_SetTurnaroundTime+0x6c>
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	4a32      	ldr	r2, [pc, #200]	; (800a224 <USB_SetTurnaroundTime+0x12c>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d802      	bhi.n	800a164 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a15e:	230c      	movs	r3, #12
 800a160:	617b      	str	r3, [r7, #20]
 800a162:	e041      	b.n	800a1e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	4a2f      	ldr	r2, [pc, #188]	; (800a224 <USB_SetTurnaroundTime+0x12c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d906      	bls.n	800a17a <USB_SetTurnaroundTime+0x82>
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	4a2e      	ldr	r2, [pc, #184]	; (800a228 <USB_SetTurnaroundTime+0x130>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d802      	bhi.n	800a17a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a174:	230b      	movs	r3, #11
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	e036      	b.n	800a1e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	4a2a      	ldr	r2, [pc, #168]	; (800a228 <USB_SetTurnaroundTime+0x130>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d906      	bls.n	800a190 <USB_SetTurnaroundTime+0x98>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	4a29      	ldr	r2, [pc, #164]	; (800a22c <USB_SetTurnaroundTime+0x134>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d802      	bhi.n	800a190 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a18a:	230a      	movs	r3, #10
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	e02b      	b.n	800a1e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	4a26      	ldr	r2, [pc, #152]	; (800a22c <USB_SetTurnaroundTime+0x134>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d906      	bls.n	800a1a6 <USB_SetTurnaroundTime+0xae>
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	4a25      	ldr	r2, [pc, #148]	; (800a230 <USB_SetTurnaroundTime+0x138>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d202      	bcs.n	800a1a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a1a0:	2309      	movs	r3, #9
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	e020      	b.n	800a1e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	4a21      	ldr	r2, [pc, #132]	; (800a230 <USB_SetTurnaroundTime+0x138>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d306      	bcc.n	800a1bc <USB_SetTurnaroundTime+0xc4>
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	4a20      	ldr	r2, [pc, #128]	; (800a234 <USB_SetTurnaroundTime+0x13c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d802      	bhi.n	800a1bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a1b6:	2308      	movs	r3, #8
 800a1b8:	617b      	str	r3, [r7, #20]
 800a1ba:	e015      	b.n	800a1e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	4a1d      	ldr	r2, [pc, #116]	; (800a234 <USB_SetTurnaroundTime+0x13c>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d906      	bls.n	800a1d2 <USB_SetTurnaroundTime+0xda>
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	4a1c      	ldr	r2, [pc, #112]	; (800a238 <USB_SetTurnaroundTime+0x140>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d202      	bcs.n	800a1d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a1cc:	2307      	movs	r3, #7
 800a1ce:	617b      	str	r3, [r7, #20]
 800a1d0:	e00a      	b.n	800a1e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a1d2:	2306      	movs	r3, #6
 800a1d4:	617b      	str	r3, [r7, #20]
 800a1d6:	e007      	b.n	800a1e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d102      	bne.n	800a1e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a1de:	2309      	movs	r3, #9
 800a1e0:	617b      	str	r3, [r7, #20]
 800a1e2:	e001      	b.n	800a1e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a1e4:	2309      	movs	r3, #9
 800a1e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	68da      	ldr	r2, [r3, #12]
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	029b      	lsls	r3, r3, #10
 800a1fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a200:	431a      	orrs	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	371c      	adds	r7, #28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	00d8acbf 	.word	0x00d8acbf
 800a218:	00e4e1c0 	.word	0x00e4e1c0
 800a21c:	00f42400 	.word	0x00f42400
 800a220:	01067380 	.word	0x01067380
 800a224:	011a499f 	.word	0x011a499f
 800a228:	01312cff 	.word	0x01312cff
 800a22c:	014ca43f 	.word	0x014ca43f
 800a230:	016e3600 	.word	0x016e3600
 800a234:	01a6ab1f 	.word	0x01a6ab1f
 800a238:	01e84800 	.word	0x01e84800

0800a23c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f043 0201 	orr.w	r2, r3, #1
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a25e:	b480      	push	{r7}
 800a260:	b083      	sub	sp, #12
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f023 0201 	bic.w	r2, r3, #1
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a28c:	2300      	movs	r3, #0
 800a28e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a29c:	78fb      	ldrb	r3, [r7, #3]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d115      	bne.n	800a2ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	f7fa fe7a 	bl	8004fa8 <HAL_Delay>
      ms++;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f001 f972 	bl	800b5a4 <USB_GetMode>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d01e      	beq.n	800a304 <USB_SetCurrentMode+0x84>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b31      	cmp	r3, #49	; 0x31
 800a2ca:	d9f0      	bls.n	800a2ae <USB_SetCurrentMode+0x2e>
 800a2cc:	e01a      	b.n	800a304 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d115      	bne.n	800a300 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a2e0:	2001      	movs	r0, #1
 800a2e2:	f7fa fe61 	bl	8004fa8 <HAL_Delay>
      ms++;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f001 f959 	bl	800b5a4 <USB_GetMode>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d005      	beq.n	800a304 <USB_SetCurrentMode+0x84>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2b31      	cmp	r3, #49	; 0x31
 800a2fc:	d9f0      	bls.n	800a2e0 <USB_SetCurrentMode+0x60>
 800a2fe:	e001      	b.n	800a304 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e005      	b.n	800a310 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b32      	cmp	r3, #50	; 0x32
 800a308:	d101      	bne.n	800a30e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e000      	b.n	800a310 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a318:	b084      	sub	sp, #16
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b086      	sub	sp, #24
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a332:	2300      	movs	r3, #0
 800a334:	613b      	str	r3, [r7, #16]
 800a336:	e009      	b.n	800a34c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	3340      	adds	r3, #64	; 0x40
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	2200      	movs	r2, #0
 800a344:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	3301      	adds	r3, #1
 800a34a:	613b      	str	r3, [r7, #16]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	2b0e      	cmp	r3, #14
 800a350:	d9f2      	bls.n	800a338 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a354:	2b00      	cmp	r3, #0
 800a356:	d11c      	bne.n	800a392 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a366:	f043 0302 	orr.w	r3, r3, #2
 800a36a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a388:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38
 800a390:	e00b      	b.n	800a3aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a396:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3bc:	4619      	mov	r1, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	680b      	ldr	r3, [r1, #0]
 800a3c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d10c      	bne.n	800a3ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d104      	bne.n	800a3e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f945 	bl	800a668 <USB_SetDevSpeed>
 800a3de:	e008      	b.n	800a3f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f940 	bl	800a668 <USB_SetDevSpeed>
 800a3e8:	e003      	b.n	800a3f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3ea:	2103      	movs	r1, #3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f93b 	bl	800a668 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3f2:	2110      	movs	r1, #16
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f8f3 	bl	800a5e0 <USB_FlushTxFifo>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f90f 	bl	800a628 <USB_FlushRxFifo>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a41a:	461a      	mov	r2, r3
 800a41c:	2300      	movs	r3, #0
 800a41e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a426:	461a      	mov	r2, r3
 800a428:	2300      	movs	r3, #0
 800a42a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a432:	461a      	mov	r2, r3
 800a434:	2300      	movs	r3, #0
 800a436:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a438:	2300      	movs	r3, #0
 800a43a:	613b      	str	r3, [r7, #16]
 800a43c:	e043      	b.n	800a4c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	015a      	lsls	r2, r3, #5
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4413      	add	r3, r2
 800a446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a454:	d118      	bne.n	800a488 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a468:	461a      	mov	r2, r3
 800a46a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a46e:	6013      	str	r3, [r2, #0]
 800a470:	e013      	b.n	800a49a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	015a      	lsls	r2, r3, #5
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4413      	add	r3, r2
 800a47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a47e:	461a      	mov	r2, r3
 800a480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a484:	6013      	str	r3, [r2, #0]
 800a486:	e008      	b.n	800a49a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a494:	461a      	mov	r2, r3
 800a496:	2300      	movs	r3, #0
 800a498:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	015a      	lsls	r2, r3, #5
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a4be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	613b      	str	r3, [r7, #16]
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d3b7      	bcc.n	800a43e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	613b      	str	r3, [r7, #16]
 800a4d2:	e043      	b.n	800a55c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	015a      	lsls	r2, r3, #5
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4ea:	d118      	bne.n	800a51e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10a      	bne.n	800a508 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4fe:	461a      	mov	r2, r3
 800a500:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a504:	6013      	str	r3, [r2, #0]
 800a506:	e013      	b.n	800a530 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a514:	461a      	mov	r2, r3
 800a516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a51a:	6013      	str	r3, [r2, #0]
 800a51c:	e008      	b.n	800a530 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	4413      	add	r3, r2
 800a526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a52a:	461a      	mov	r2, r3
 800a52c:	2300      	movs	r3, #0
 800a52e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53c:	461a      	mov	r2, r3
 800a53e:	2300      	movs	r3, #0
 800a540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	015a      	lsls	r2, r3, #5
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	4413      	add	r3, r2
 800a54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54e:	461a      	mov	r2, r3
 800a550:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a554:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	3301      	adds	r3, #1
 800a55a:	613b      	str	r3, [r7, #16]
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	429a      	cmp	r2, r3
 800a562:	d3b7      	bcc.n	800a4d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a576:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a584:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d105      	bne.n	800a598 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	f043 0210 	orr.w	r2, r3, #16
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	699a      	ldr	r2, [r3, #24]
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <USB_DevInit+0x2c4>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d005      	beq.n	800a5b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	f043 0208 	orr.w	r2, r3, #8
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d107      	bne.n	800a5cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5c4:	f043 0304 	orr.w	r3, r3, #4
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3718      	adds	r7, #24
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5d8:	b004      	add	sp, #16
 800a5da:	4770      	bx	lr
 800a5dc:	803c3800 	.word	0x803c3800

0800a5e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	019b      	lsls	r3, r3, #6
 800a5f2:	f043 0220 	orr.w	r2, r3, #32
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	60fb      	str	r3, [r7, #12]
 800a600:	4a08      	ldr	r2, [pc, #32]	; (800a624 <USB_FlushTxFifo+0x44>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d901      	bls.n	800a60a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e006      	b.n	800a618 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	f003 0320 	and.w	r3, r3, #32
 800a612:	2b20      	cmp	r3, #32
 800a614:	d0f1      	beq.n	800a5fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	00030d40 	.word	0x00030d40

0800a628 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a630:	2300      	movs	r3, #0
 800a632:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2210      	movs	r2, #16
 800a638:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3301      	adds	r3, #1
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	4a08      	ldr	r2, [pc, #32]	; (800a664 <USB_FlushRxFifo+0x3c>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d901      	bls.n	800a64a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e006      	b.n	800a658 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	f003 0310 	and.w	r3, r3, #16
 800a652:	2b10      	cmp	r3, #16
 800a654:	d0f1      	beq.n	800a63a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	00030d40 	.word	0x00030d40

0800a668 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	68f9      	ldr	r1, [r7, #12]
 800a684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a688:	4313      	orrs	r3, r2
 800a68a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b087      	sub	sp, #28
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f003 0306 	and.w	r3, r3, #6
 800a6b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d102      	bne.n	800a6c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	75fb      	strb	r3, [r7, #23]
 800a6be:	e00a      	b.n	800a6d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d002      	beq.n	800a6cc <USB_GetDevSpeed+0x32>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2b06      	cmp	r3, #6
 800a6ca:	d102      	bne.n	800a6d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	75fb      	strb	r3, [r7, #23]
 800a6d0:	e001      	b.n	800a6d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a6d2:	230f      	movs	r3, #15
 800a6d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a6d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	371c      	adds	r7, #28
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	785b      	ldrb	r3, [r3, #1]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d13a      	bne.n	800a776 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a706:	69da      	ldr	r2, [r3, #28]
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	f003 030f 	and.w	r3, r3, #15
 800a710:	2101      	movs	r1, #1
 800a712:	fa01 f303 	lsl.w	r3, r1, r3
 800a716:	b29b      	uxth	r3, r3
 800a718:	68f9      	ldr	r1, [r7, #12]
 800a71a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a71e:	4313      	orrs	r3, r2
 800a720:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	4413      	add	r3, r2
 800a72a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d155      	bne.n	800a7e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	78db      	ldrb	r3, [r3, #3]
 800a752:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a754:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	059b      	lsls	r3, r3, #22
 800a75a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a75c:	4313      	orrs	r3, r2
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	0151      	lsls	r1, r2, #5
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	440a      	add	r2, r1
 800a766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a76a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a76e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	e036      	b.n	800a7e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a77c:	69da      	ldr	r2, [r3, #28]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	f003 030f 	and.w	r3, r3, #15
 800a786:	2101      	movs	r1, #1
 800a788:	fa01 f303 	lsl.w	r3, r1, r3
 800a78c:	041b      	lsls	r3, r3, #16
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a794:	4313      	orrs	r3, r2
 800a796:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	015a      	lsls	r2, r3, #5
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4413      	add	r3, r2
 800a7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d11a      	bne.n	800a7e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	78db      	ldrb	r3, [r3, #3]
 800a7c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7ca:	430b      	orrs	r3, r1
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	0151      	lsls	r1, r2, #5
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	440a      	add	r2, r1
 800a7d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
	...

0800a7f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	785b      	ldrb	r3, [r3, #1]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d161      	bne.n	800a8d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	015a      	lsls	r2, r3, #5
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4413      	add	r3, r2
 800a818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a826:	d11f      	bne.n	800a868 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	015a      	lsls	r2, r3, #5
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4413      	add	r3, r2
 800a830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	0151      	lsls	r1, r2, #5
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	440a      	add	r2, r1
 800a83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a846:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	0151      	lsls	r1, r2, #5
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	440a      	add	r2, r1
 800a85e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a86e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	f003 030f 	and.w	r3, r3, #15
 800a878:	2101      	movs	r1, #1
 800a87a:	fa01 f303 	lsl.w	r3, r1, r3
 800a87e:	b29b      	uxth	r3, r3
 800a880:	43db      	mvns	r3, r3
 800a882:	68f9      	ldr	r1, [r7, #12]
 800a884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a888:	4013      	ands	r3, r2
 800a88a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a892:	69da      	ldr	r2, [r3, #28]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	f003 030f 	and.w	r3, r3, #15
 800a89c:	2101      	movs	r1, #1
 800a89e:	fa01 f303 	lsl.w	r3, r1, r3
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	43db      	mvns	r3, r3
 800a8a6:	68f9      	ldr	r1, [r7, #12]
 800a8a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	0159      	lsls	r1, r3, #5
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	440b      	add	r3, r1
 800a8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4b35      	ldr	r3, [pc, #212]	; (800a9a4 <USB_DeactivateEndpoint+0x1b0>)
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	600b      	str	r3, [r1, #0]
 800a8d2:	e060      	b.n	800a996 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8ea:	d11f      	bne.n	800a92c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	015a      	lsls	r2, r3, #5
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	0151      	lsls	r1, r2, #5
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	440a      	add	r2, r1
 800a902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a906:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a90a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	0151      	lsls	r1, r2, #5
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	440a      	add	r2, r1
 800a922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a92a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	f003 030f 	and.w	r3, r3, #15
 800a93c:	2101      	movs	r1, #1
 800a93e:	fa01 f303 	lsl.w	r3, r1, r3
 800a942:	041b      	lsls	r3, r3, #16
 800a944:	43db      	mvns	r3, r3
 800a946:	68f9      	ldr	r1, [r7, #12]
 800a948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a94c:	4013      	ands	r3, r2
 800a94e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a956:	69da      	ldr	r2, [r3, #28]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	f003 030f 	and.w	r3, r3, #15
 800a960:	2101      	movs	r1, #1
 800a962:	fa01 f303 	lsl.w	r3, r1, r3
 800a966:	041b      	lsls	r3, r3, #16
 800a968:	43db      	mvns	r3, r3
 800a96a:	68f9      	ldr	r1, [r7, #12]
 800a96c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a970:	4013      	ands	r3, r2
 800a972:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	015a      	lsls	r2, r3, #5
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	4413      	add	r3, r2
 800a97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	0159      	lsls	r1, r3, #5
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	440b      	add	r3, r1
 800a98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a98e:	4619      	mov	r1, r3
 800a990:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <USB_DeactivateEndpoint+0x1b4>)
 800a992:	4013      	ands	r3, r2
 800a994:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	ec337800 	.word	0xec337800
 800a9a8:	eff37800 	.word	0xeff37800

0800a9ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	; 0x28
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	785b      	ldrb	r3, [r3, #1]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	f040 815c 	bne.w	800ac86 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d132      	bne.n	800aa3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	0151      	lsls	r1, r2, #5
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	440a      	add	r2, r1
 800a9ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	0151      	lsls	r1, r2, #5
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	440a      	add	r2, r1
 800aa10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	69ba      	ldr	r2, [r7, #24]
 800aa2a:	0151      	lsls	r1, r2, #5
 800aa2c:	69fa      	ldr	r2, [r7, #28]
 800aa2e:	440a      	add	r2, r1
 800aa30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa34:	0cdb      	lsrs	r3, r3, #19
 800aa36:	04db      	lsls	r3, r3, #19
 800aa38:	6113      	str	r3, [r2, #16]
 800aa3a:	e074      	b.n	800ab26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	69ba      	ldr	r2, [r7, #24]
 800aa4c:	0151      	lsls	r1, r2, #5
 800aa4e:	69fa      	ldr	r2, [r7, #28]
 800aa50:	440a      	add	r2, r1
 800aa52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa56:	0cdb      	lsrs	r3, r3, #19
 800aa58:	04db      	lsls	r3, r3, #19
 800aa5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	69ba      	ldr	r2, [r7, #24]
 800aa6c:	0151      	lsls	r1, r2, #5
 800aa6e:	69fa      	ldr	r2, [r7, #28]
 800aa70:	440a      	add	r2, r1
 800aa72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa8c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	6959      	ldr	r1, [r3, #20]
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	440b      	add	r3, r1
 800aa98:	1e59      	subs	r1, r3, #1
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	fbb1 f3f3 	udiv	r3, r1, r3
 800aaa2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aaa4:	4b9d      	ldr	r3, [pc, #628]	; (800ad1c <USB_EPStartXfer+0x370>)
 800aaa6:	400b      	ands	r3, r1
 800aaa8:	69b9      	ldr	r1, [r7, #24]
 800aaaa:	0148      	lsls	r0, r1, #5
 800aaac:	69f9      	ldr	r1, [r7, #28]
 800aaae:	4401      	add	r1, r0
 800aab0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aab4:	4313      	orrs	r3, r2
 800aab6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac4:	691a      	ldr	r2, [r3, #16]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aace:	69b9      	ldr	r1, [r7, #24]
 800aad0:	0148      	lsls	r0, r1, #5
 800aad2:	69f9      	ldr	r1, [r7, #28]
 800aad4:	4401      	add	r1, r0
 800aad6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aada:	4313      	orrs	r3, r2
 800aadc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	78db      	ldrb	r3, [r3, #3]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d11f      	bne.n	800ab26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	015a      	lsls	r2, r3, #5
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	4413      	add	r3, r2
 800aaee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	0151      	lsls	r1, r2, #5
 800aaf8:	69fa      	ldr	r2, [r7, #28]
 800aafa:	440a      	add	r2, r1
 800aafc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ab04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	69ba      	ldr	r2, [r7, #24]
 800ab16:	0151      	lsls	r1, r2, #5
 800ab18:	69fa      	ldr	r2, [r7, #28]
 800ab1a:	440a      	add	r2, r1
 800ab1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ab26:	79fb      	ldrb	r3, [r7, #7]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d14b      	bne.n	800abc4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d009      	beq.n	800ab48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab40:	461a      	mov	r2, r3
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	78db      	ldrb	r3, [r3, #3]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d128      	bne.n	800aba2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d110      	bne.n	800ab82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	0151      	lsls	r1, r2, #5
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	440a      	add	r2, r1
 800ab76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	e00f      	b.n	800aba2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	69ba      	ldr	r2, [r7, #24]
 800ab92:	0151      	lsls	r1, r2, #5
 800ab94:	69fa      	ldr	r2, [r7, #28]
 800ab96:	440a      	add	r2, r1
 800ab98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aba0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	015a      	lsls	r2, r3, #5
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	4413      	add	r3, r2
 800abaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	0151      	lsls	r1, r2, #5
 800abb4:	69fa      	ldr	r2, [r7, #28]
 800abb6:	440a      	add	r2, r1
 800abb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	e12f      	b.n	800ae24 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	015a      	lsls	r2, r3, #5
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	4413      	add	r3, r2
 800abcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	69ba      	ldr	r2, [r7, #24]
 800abd4:	0151      	lsls	r1, r2, #5
 800abd6:	69fa      	ldr	r2, [r7, #28]
 800abd8:	440a      	add	r2, r1
 800abda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abe2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	78db      	ldrb	r3, [r3, #3]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d015      	beq.n	800ac18 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	695b      	ldr	r3, [r3, #20]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f000 8117 	beq.w	800ae24 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	f003 030f 	and.w	r3, r3, #15
 800ac06:	2101      	movs	r1, #1
 800ac08:	fa01 f303 	lsl.w	r3, r1, r3
 800ac0c:	69f9      	ldr	r1, [r7, #28]
 800ac0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac12:	4313      	orrs	r3, r2
 800ac14:	634b      	str	r3, [r1, #52]	; 0x34
 800ac16:	e105      	b.n	800ae24 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d110      	bne.n	800ac4a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	015a      	lsls	r2, r3, #5
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	69ba      	ldr	r2, [r7, #24]
 800ac38:	0151      	lsls	r1, r2, #5
 800ac3a:	69fa      	ldr	r2, [r7, #28]
 800ac3c:	440a      	add	r2, r1
 800ac3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	e00f      	b.n	800ac6a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	69ba      	ldr	r2, [r7, #24]
 800ac5a:	0151      	lsls	r1, r2, #5
 800ac5c:	69fa      	ldr	r2, [r7, #28]
 800ac5e:	440a      	add	r2, r1
 800ac60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac68:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	68d9      	ldr	r1, [r3, #12]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	781a      	ldrb	r2, [r3, #0]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	b298      	uxth	r0, r3
 800ac78:	79fb      	ldrb	r3, [r7, #7]
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f000 fa2b 	bl	800b0da <USB_WritePacket>
 800ac84:	e0ce      	b.n	800ae24 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	015a      	lsls	r2, r3, #5
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	69ba      	ldr	r2, [r7, #24]
 800ac96:	0151      	lsls	r1, r2, #5
 800ac98:	69fa      	ldr	r2, [r7, #28]
 800ac9a:	440a      	add	r2, r1
 800ac9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aca0:	0cdb      	lsrs	r3, r3, #19
 800aca2:	04db      	lsls	r3, r3, #19
 800aca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	015a      	lsls	r2, r3, #5
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	4413      	add	r3, r2
 800acae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	69ba      	ldr	r2, [r7, #24]
 800acb6:	0151      	lsls	r1, r2, #5
 800acb8:	69fa      	ldr	r2, [r7, #28]
 800acba:	440a      	add	r2, r1
 800acbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800acc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800acc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d126      	bne.n	800ad20 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	015a      	lsls	r2, r3, #5
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	4413      	add	r3, r2
 800acda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acde:	691a      	ldr	r2, [r3, #16]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ace8:	69b9      	ldr	r1, [r7, #24]
 800acea:	0148      	lsls	r0, r1, #5
 800acec:	69f9      	ldr	r1, [r7, #28]
 800acee:	4401      	add	r1, r0
 800acf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800acf4:	4313      	orrs	r3, r2
 800acf6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	0151      	lsls	r1, r2, #5
 800ad0a:	69fa      	ldr	r2, [r7, #28]
 800ad0c:	440a      	add	r2, r1
 800ad0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad16:	6113      	str	r3, [r2, #16]
 800ad18:	e036      	b.n	800ad88 <USB_EPStartXfer+0x3dc>
 800ad1a:	bf00      	nop
 800ad1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	695a      	ldr	r2, [r3, #20]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	4413      	add	r3, r2
 800ad2a:	1e5a      	subs	r2, r3, #1
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad34:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad42:	691a      	ldr	r2, [r3, #16]
 800ad44:	8afb      	ldrh	r3, [r7, #22]
 800ad46:	04d9      	lsls	r1, r3, #19
 800ad48:	4b39      	ldr	r3, [pc, #228]	; (800ae30 <USB_EPStartXfer+0x484>)
 800ad4a:	400b      	ands	r3, r1
 800ad4c:	69b9      	ldr	r1, [r7, #24]
 800ad4e:	0148      	lsls	r0, r1, #5
 800ad50:	69f9      	ldr	r1, [r7, #28]
 800ad52:	4401      	add	r1, r0
 800ad54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	015a      	lsls	r2, r3, #5
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	4413      	add	r3, r2
 800ad64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad68:	691a      	ldr	r2, [r3, #16]
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	8af9      	ldrh	r1, [r7, #22]
 800ad70:	fb01 f303 	mul.w	r3, r1, r3
 800ad74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad78:	69b9      	ldr	r1, [r7, #24]
 800ad7a:	0148      	lsls	r0, r1, #5
 800ad7c:	69f9      	ldr	r1, [r7, #28]
 800ad7e:	4401      	add	r1, r0
 800ad80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad84:	4313      	orrs	r3, r2
 800ad86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ad88:	79fb      	ldrb	r3, [r7, #7]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d10d      	bne.n	800adaa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d009      	beq.n	800adaa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	68d9      	ldr	r1, [r3, #12]
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	4413      	add	r3, r2
 800ada2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada6:	460a      	mov	r2, r1
 800ada8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	78db      	ldrb	r3, [r3, #3]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d128      	bne.n	800ae04 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d110      	bne.n	800ade4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	015a      	lsls	r2, r3, #5
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	4413      	add	r3, r2
 800adca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	69ba      	ldr	r2, [r7, #24]
 800add2:	0151      	lsls	r1, r2, #5
 800add4:	69fa      	ldr	r2, [r7, #28]
 800add6:	440a      	add	r2, r1
 800add8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800addc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ade0:	6013      	str	r3, [r2, #0]
 800ade2:	e00f      	b.n	800ae04 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	0151      	lsls	r1, r2, #5
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	440a      	add	r2, r1
 800adfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	69ba      	ldr	r2, [r7, #24]
 800ae14:	0151      	lsls	r1, r2, #5
 800ae16:	69fa      	ldr	r2, [r7, #28]
 800ae18:	440a      	add	r2, r1
 800ae1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3720      	adds	r7, #32
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	1ff80000 	.word	0x1ff80000

0800ae34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b087      	sub	sp, #28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	785b      	ldrb	r3, [r3, #1]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	f040 80cd 	bne.w	800aff0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d132      	bne.n	800aec4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	015a      	lsls	r2, r3, #5
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	4413      	add	r3, r2
 800ae66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	0151      	lsls	r1, r2, #5
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	440a      	add	r2, r1
 800ae74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	015a      	lsls	r2, r3, #5
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	0151      	lsls	r1, r2, #5
 800ae94:	697a      	ldr	r2, [r7, #20]
 800ae96:	440a      	add	r2, r1
 800ae98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	015a      	lsls	r2, r3, #5
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	0151      	lsls	r1, r2, #5
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	440a      	add	r2, r1
 800aeb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aebc:	0cdb      	lsrs	r3, r3, #19
 800aebe:	04db      	lsls	r3, r3, #19
 800aec0:	6113      	str	r3, [r2, #16]
 800aec2:	e04e      	b.n	800af62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	0151      	lsls	r1, r2, #5
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	440a      	add	r2, r1
 800aeda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aede:	0cdb      	lsrs	r3, r3, #19
 800aee0:	04db      	lsls	r3, r3, #19
 800aee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	0151      	lsls	r1, r2, #5
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	440a      	add	r2, r1
 800aefa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aefe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	695a      	ldr	r2, [r3, #20]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	429a      	cmp	r2, r3
 800af12:	d903      	bls.n	800af1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	015a      	lsls	r2, r3, #5
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	4413      	add	r3, r2
 800af24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	0151      	lsls	r1, r2, #5
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	440a      	add	r2, r1
 800af32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	4413      	add	r3, r2
 800af44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af48:	691a      	ldr	r2, [r3, #16]
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	695b      	ldr	r3, [r3, #20]
 800af4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af52:	6939      	ldr	r1, [r7, #16]
 800af54:	0148      	lsls	r0, r1, #5
 800af56:	6979      	ldr	r1, [r7, #20]
 800af58:	4401      	add	r1, r0
 800af5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af5e:	4313      	orrs	r3, r2
 800af60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d11e      	bne.n	800afa6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d009      	beq.n	800af84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af7c:	461a      	mov	r2, r3
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	0151      	lsls	r1, r2, #5
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	440a      	add	r2, r1
 800af9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afa2:	6013      	str	r3, [r2, #0]
 800afa4:	e092      	b.n	800b0cc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	015a      	lsls	r2, r3, #5
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	4413      	add	r3, r2
 800afae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	0151      	lsls	r1, r2, #5
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	440a      	add	r2, r1
 800afbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d07e      	beq.n	800b0cc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	f003 030f 	and.w	r3, r3, #15
 800afde:	2101      	movs	r1, #1
 800afe0:	fa01 f303 	lsl.w	r3, r1, r3
 800afe4:	6979      	ldr	r1, [r7, #20]
 800afe6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afea:	4313      	orrs	r3, r2
 800afec:	634b      	str	r3, [r1, #52]	; 0x34
 800afee:	e06d      	b.n	800b0cc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	015a      	lsls	r2, r3, #5
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	4413      	add	r3, r2
 800aff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	0151      	lsls	r1, r2, #5
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	440a      	add	r2, r1
 800b006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b00a:	0cdb      	lsrs	r3, r3, #19
 800b00c:	04db      	lsls	r3, r3, #19
 800b00e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	0151      	lsls	r1, r2, #5
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	440a      	add	r2, r1
 800b026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b02a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b02e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b032:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	695b      	ldr	r3, [r3, #20]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d003      	beq.n	800b044 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	689a      	ldr	r2, [r3, #8]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	0151      	lsls	r1, r2, #5
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	440a      	add	r2, r1
 800b05a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b05e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b062:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b070:	691a      	ldr	r2, [r3, #16]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b07a:	6939      	ldr	r1, [r7, #16]
 800b07c:	0148      	lsls	r0, r1, #5
 800b07e:	6979      	ldr	r1, [r7, #20]
 800b080:	4401      	add	r1, r0
 800b082:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b086:	4313      	orrs	r3, r2
 800b088:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b08a:	79fb      	ldrb	r3, [r7, #7]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d10d      	bne.n	800b0ac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d009      	beq.n	800b0ac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	68d9      	ldr	r1, [r3, #12]
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	015a      	lsls	r2, r3, #5
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a8:	460a      	mov	r2, r1
 800b0aa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	015a      	lsls	r2, r3, #5
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	0151      	lsls	r1, r2, #5
 800b0be:	697a      	ldr	r2, [r7, #20]
 800b0c0:	440a      	add	r2, r1
 800b0c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	371c      	adds	r7, #28
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b089      	sub	sp, #36	; 0x24
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	60f8      	str	r0, [r7, #12]
 800b0e2:	60b9      	str	r1, [r7, #8]
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	71fb      	strb	r3, [r7, #7]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b0f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d123      	bne.n	800b148 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b100:	88bb      	ldrh	r3, [r7, #4]
 800b102:	3303      	adds	r3, #3
 800b104:	089b      	lsrs	r3, r3, #2
 800b106:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b108:	2300      	movs	r3, #0
 800b10a:	61bb      	str	r3, [r7, #24]
 800b10c:	e018      	b.n	800b140 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b10e:	79fb      	ldrb	r3, [r7, #7]
 800b110:	031a      	lsls	r2, r3, #12
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	4413      	add	r3, r2
 800b116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b11a:	461a      	mov	r2, r3
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	3301      	adds	r3, #1
 800b126:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	3301      	adds	r3, #1
 800b12c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	3301      	adds	r3, #1
 800b132:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	3301      	adds	r3, #1
 800b138:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	3301      	adds	r3, #1
 800b13e:	61bb      	str	r3, [r7, #24]
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	429a      	cmp	r2, r3
 800b146:	d3e2      	bcc.n	800b10e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3724      	adds	r7, #36	; 0x24
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b156:	b480      	push	{r7}
 800b158:	b08b      	sub	sp, #44	; 0x2c
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	60f8      	str	r0, [r7, #12]
 800b15e:	60b9      	str	r1, [r7, #8]
 800b160:	4613      	mov	r3, r2
 800b162:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b16c:	88fb      	ldrh	r3, [r7, #6]
 800b16e:	089b      	lsrs	r3, r3, #2
 800b170:	b29b      	uxth	r3, r3
 800b172:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b174:	88fb      	ldrh	r3, [r7, #6]
 800b176:	f003 0303 	and.w	r3, r3, #3
 800b17a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b17c:	2300      	movs	r3, #0
 800b17e:	623b      	str	r3, [r7, #32]
 800b180:	e014      	b.n	800b1ac <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	601a      	str	r2, [r3, #0]
    pDest++;
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	3301      	adds	r3, #1
 800b192:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	3301      	adds	r3, #1
 800b198:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	3301      	adds	r3, #1
 800b19e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	623b      	str	r3, [r7, #32]
 800b1ac:	6a3a      	ldr	r2, [r7, #32]
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d3e6      	bcc.n	800b182 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b1b4:	8bfb      	ldrh	r3, [r7, #30]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d01e      	beq.n	800b1f8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	f107 0310 	add.w	r3, r7, #16
 800b1ca:	6812      	ldr	r2, [r2, #0]
 800b1cc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b1ce:	693a      	ldr	r2, [r7, #16]
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	00db      	lsls	r3, r3, #3
 800b1d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	701a      	strb	r2, [r3, #0]
      i++;
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	623b      	str	r3, [r7, #32]
      pDest++;
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b1ec:	8bfb      	ldrh	r3, [r7, #30]
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b1f2:	8bfb      	ldrh	r3, [r7, #30]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1ea      	bne.n	800b1ce <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	372c      	adds	r7, #44	; 0x2c
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b206:	b480      	push	{r7}
 800b208:	b085      	sub	sp, #20
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	785b      	ldrb	r3, [r3, #1]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d12c      	bne.n	800b27c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	db12      	blt.n	800b25a <USB_EPSetStall+0x54>
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00f      	beq.n	800b25a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	015a      	lsls	r2, r3, #5
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	4413      	add	r3, r2
 800b242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	0151      	lsls	r1, r2, #5
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	440a      	add	r2, r1
 800b250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b254:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b258:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	4413      	add	r3, r2
 800b262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	0151      	lsls	r1, r2, #5
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	440a      	add	r2, r1
 800b270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b278:	6013      	str	r3, [r2, #0]
 800b27a:	e02b      	b.n	800b2d4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	015a      	lsls	r2, r3, #5
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	4413      	add	r3, r2
 800b284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	db12      	blt.n	800b2b4 <USB_EPSetStall+0xae>
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00f      	beq.n	800b2b4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	015a      	lsls	r2, r3, #5
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	0151      	lsls	r1, r2, #5
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	440a      	add	r2, r1
 800b2aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b2b2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	015a      	lsls	r2, r3, #5
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	0151      	lsls	r1, r2, #5
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	440a      	add	r2, r1
 800b2ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b2d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b085      	sub	sp, #20
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	785b      	ldrb	r3, [r3, #1]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d128      	bne.n	800b350 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	015a      	lsls	r2, r3, #5
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	4413      	add	r3, r2
 800b306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	0151      	lsls	r1, r2, #5
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	440a      	add	r2, r1
 800b314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b318:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b31c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	78db      	ldrb	r3, [r3, #3]
 800b322:	2b03      	cmp	r3, #3
 800b324:	d003      	beq.n	800b32e <USB_EPClearStall+0x4c>
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	78db      	ldrb	r3, [r3, #3]
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d138      	bne.n	800b3a0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	015a      	lsls	r2, r3, #5
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	4413      	add	r3, r2
 800b336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	0151      	lsls	r1, r2, #5
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	440a      	add	r2, r1
 800b344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b34c:	6013      	str	r3, [r2, #0]
 800b34e:	e027      	b.n	800b3a0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	015a      	lsls	r2, r3, #5
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	4413      	add	r3, r2
 800b358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	0151      	lsls	r1, r2, #5
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	440a      	add	r2, r1
 800b366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b36a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b36e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	78db      	ldrb	r3, [r3, #3]
 800b374:	2b03      	cmp	r3, #3
 800b376:	d003      	beq.n	800b380 <USB_EPClearStall+0x9e>
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	78db      	ldrb	r3, [r3, #3]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d10f      	bne.n	800b3a0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	015a      	lsls	r2, r3, #5
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4413      	add	r3, r2
 800b388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	0151      	lsls	r1, r2, #5
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	440a      	add	r2, r1
 800b396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b39a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b39e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3714      	adds	r7, #20
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b085      	sub	sp, #20
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b3d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	78fb      	ldrb	r3, [r7, #3]
 800b3dc:	011b      	lsls	r3, r3, #4
 800b3de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b3e2:	68f9      	ldr	r1, [r7, #12]
 800b3e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b085      	sub	sp, #20
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b414:	f023 0303 	bic.w	r3, r3, #3
 800b418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b428:	f023 0302 	bic.w	r3, r3, #2
 800b42c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b456:	f023 0303 	bic.w	r3, r3, #3
 800b45a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b46a:	f043 0302 	orr.w	r3, r3, #2
 800b46e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b47e:	b480      	push	{r7}
 800b480:	b085      	sub	sp, #20
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	4013      	ands	r3, r2
 800b494:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b496:	68fb      	ldr	r3, [r7, #12]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	0c1b      	lsrs	r3, r3, #16
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ea:	699b      	ldr	r3, [r3, #24]
 800b4ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f4:	69db      	ldr	r3, [r3, #28]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	b29b      	uxth	r3, r3
}
 800b500:	4618      	mov	r0, r3
 800b502:	3714      	adds	r7, #20
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b085      	sub	sp, #20
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	460b      	mov	r3, r1
 800b516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b51c:	78fb      	ldrb	r3, [r7, #3]
 800b51e:	015a      	lsls	r2, r3, #5
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4413      	add	r3, r2
 800b524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	4013      	ands	r3, r2
 800b538:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b53a:	68bb      	ldr	r3, [r7, #8]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	460b      	mov	r3, r1
 800b552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b56a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b56c:	78fb      	ldrb	r3, [r7, #3]
 800b56e:	f003 030f 	and.w	r3, r3, #15
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	fa22 f303 	lsr.w	r3, r2, r3
 800b578:	01db      	lsls	r3, r3, #7
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	4313      	orrs	r3, r2
 800b580:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b582:	78fb      	ldrb	r3, [r7, #3]
 800b584:	015a      	lsls	r2, r3, #5
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	4413      	add	r3, r2
 800b58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	4013      	ands	r3, r2
 800b594:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b596:	68bb      	ldr	r3, [r7, #8]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	371c      	adds	r7, #28
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	695b      	ldr	r3, [r3, #20]
 800b5b0:	f003 0301 	and.w	r3, r3, #1
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b5de:	f023 0307 	bic.w	r3, r3, #7
 800b5e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
	...

0800b608 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b608:	b480      	push	{r7}
 800b60a:	b087      	sub	sp, #28
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	460b      	mov	r3, r1
 800b612:	607a      	str	r2, [r7, #4]
 800b614:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	333c      	adds	r3, #60	; 0x3c
 800b61e:	3304      	adds	r3, #4
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	4a26      	ldr	r2, [pc, #152]	; (800b6c0 <USB_EP0_OutStart+0xb8>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d90a      	bls.n	800b642 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b63c:	d101      	bne.n	800b642 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	e037      	b.n	800b6b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b648:	461a      	mov	r2, r3
 800b64a:	2300      	movs	r3, #0
 800b64c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b65c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b660:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	697a      	ldr	r2, [r7, #20]
 800b66c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b670:	f043 0318 	orr.w	r3, r3, #24
 800b674:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b684:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b688:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b68a:	7afb      	ldrb	r3, [r7, #11]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d10f      	bne.n	800b6b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b696:	461a      	mov	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b6ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	371c      	adds	r7, #28
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	4f54300a 	.word	0x4f54300a

0800b6c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	60fb      	str	r3, [r7, #12]
 800b6d6:	4a13      	ldr	r2, [pc, #76]	; (800b724 <USB_CoreReset+0x60>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d901      	bls.n	800b6e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e01a      	b.n	800b716 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	daf3      	bge.n	800b6d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	f043 0201 	orr.w	r2, r3, #1
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	60fb      	str	r3, [r7, #12]
 800b6fe:	4a09      	ldr	r2, [pc, #36]	; (800b724 <USB_CoreReset+0x60>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d901      	bls.n	800b708 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b704:	2303      	movs	r3, #3
 800b706:	e006      	b.n	800b716 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	2b01      	cmp	r3, #1
 800b712:	d0f1      	beq.n	800b6f8 <USB_CoreReset+0x34>

  return HAL_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	00030d40 	.word	0x00030d40

0800b728 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b72c:	4904      	ldr	r1, [pc, #16]	; (800b740 <MX_FATFS_Init+0x18>)
 800b72e:	4805      	ldr	r0, [pc, #20]	; (800b744 <MX_FATFS_Init+0x1c>)
 800b730:	f004 ff38 	bl	80105a4 <FATFS_LinkDriver>
 800b734:	4603      	mov	r3, r0
 800b736:	461a      	mov	r2, r3
 800b738:	4b03      	ldr	r3, [pc, #12]	; (800b748 <MX_FATFS_Init+0x20>)
 800b73a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b73c:	bf00      	nop
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	20011208 	.word	0x20011208
 800b744:	20000010 	.word	0x20000010
 800b748:	2001120c 	.word	0x2001120c

0800b74c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b74c:	b480      	push	{r7}
 800b74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b750:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b752:	4618      	mov	r0, r3
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	4603      	mov	r3, r0
 800b764:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 800b766:	79fb      	ldrb	r3, [r7, #7]
 800b768:	4618      	mov	r0, r3
 800b76a:	f7f7 f9a1 	bl	8002ab0 <SD_disk_initialize>
 800b76e:	4603      	mov	r3, r0
 800b770:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 800b772:	4618      	mov	r0, r3
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b082      	sub	sp, #8
 800b77e:	af00      	add	r7, sp, #0
 800b780:	4603      	mov	r3, r0
 800b782:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	4618      	mov	r0, r3
 800b788:	f7f7 fa7c 	bl	8002c84 <SD_disk_status>
 800b78c:	4603      	mov	r3, r0
 800b78e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	607a      	str	r2, [r7, #4]
 800b7a2:	603b      	str	r3, [r7, #0]
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800b7a8:	7bf8      	ldrb	r0, [r7, #15]
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	68b9      	ldr	r1, [r7, #8]
 800b7b0:	f7f7 fa7e 	bl	8002cb0 <SD_disk_read>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	b2db      	uxtb	r3, r3
   // return RES_OK;
  /* USER CODE END READ */
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60b9      	str	r1, [r7, #8]
 800b7c8:	607a      	str	r2, [r7, #4]
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800b7d0:	7bf8      	ldrb	r0, [r7, #15]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	68b9      	ldr	r1, [r7, #8]
 800b7d8:	f7f7 fad4 	bl	8002d84 <SD_disk_write>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	603a      	str	r2, [r7, #0]
 800b7f2:	71fb      	strb	r3, [r7, #7]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv,cmd, buff);
 800b7f8:	79fb      	ldrb	r3, [r7, #7]
 800b7fa:	79b9      	ldrb	r1, [r7, #6]
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7f7 fb44 	bl	8002e8c <SD_disk_ioctl>
 800b804:	4603      	mov	r3, r0
 800b806:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b81c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b820:	f009 fc54 	bl	80150cc <USBD_static_malloc>
 800b824:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d105      	bne.n	800b838 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b834:	2302      	movs	r3, #2
 800b836:	e066      	b.n	800b906 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	7c1b      	ldrb	r3, [r3, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d119      	bne.n	800b87c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b84c:	2202      	movs	r2, #2
 800b84e:	2181      	movs	r1, #129	; 0x81
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f009 fb18 	bl	8014e86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2201      	movs	r2, #1
 800b85a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b85c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b860:	2202      	movs	r2, #2
 800b862:	2101      	movs	r1, #1
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f009 fb0e 	bl	8014e86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2210      	movs	r2, #16
 800b876:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b87a:	e016      	b.n	800b8aa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b87c:	2340      	movs	r3, #64	; 0x40
 800b87e:	2202      	movs	r2, #2
 800b880:	2181      	movs	r1, #129	; 0x81
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f009 faff 	bl	8014e86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b88e:	2340      	movs	r3, #64	; 0x40
 800b890:	2202      	movs	r2, #2
 800b892:	2101      	movs	r1, #1
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f009 faf6 	bl	8014e86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2210      	movs	r2, #16
 800b8a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b8aa:	2308      	movs	r3, #8
 800b8ac:	2203      	movs	r2, #3
 800b8ae:	2182      	movs	r1, #130	; 0x82
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f009 fae8 	bl	8014e86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	7c1b      	ldrb	r3, [r3, #16]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d109      	bne.n	800b8f4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8ea:	2101      	movs	r1, #1
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f009 fbb9 	bl	8015064 <USBD_LL_PrepareReceive>
 800b8f2:	e007      	b.n	800b904 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8fa:	2340      	movs	r3, #64	; 0x40
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f009 fbb0 	bl	8015064 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
 800b916:	460b      	mov	r3, r1
 800b918:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b91a:	2181      	movs	r1, #129	; 0x81
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f009 fad8 	bl	8014ed2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b928:	2101      	movs	r1, #1
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f009 fad1 	bl	8014ed2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b938:	2182      	movs	r1, #130	; 0x82
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f009 fac9 	bl	8014ed2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00e      	beq.n	800b978 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b96a:	4618      	mov	r0, r3
 800b96c:	f009 fbbc 	bl	80150e8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
	...

0800b984 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b994:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b996:	2300      	movs	r3, #0
 800b998:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b99a:	2300      	movs	r3, #0
 800b99c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d101      	bne.n	800b9ac <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	e0af      	b.n	800bb0c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d03f      	beq.n	800ba38 <USBD_CDC_Setup+0xb4>
 800b9b8:	2b20      	cmp	r3, #32
 800b9ba:	f040 809f 	bne.w	800bafc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	88db      	ldrh	r3, [r3, #6]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d02e      	beq.n	800ba24 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	b25b      	sxtb	r3, r3
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	da16      	bge.n	800b9fe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b9dc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	88d2      	ldrh	r2, [r2, #6]
 800b9e2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	88db      	ldrh	r3, [r3, #6]
 800b9e8:	2b07      	cmp	r3, #7
 800b9ea:	bf28      	it	cs
 800b9ec:	2307      	movcs	r3, #7
 800b9ee:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	89fa      	ldrh	r2, [r7, #14]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f001 fb19 	bl	800d02e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b9fc:	e085      	b.n	800bb0a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	785a      	ldrb	r2, [r3, #1]
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	88db      	ldrh	r3, [r3, #6]
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ba14:	6939      	ldr	r1, [r7, #16]
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	88db      	ldrh	r3, [r3, #6]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f001 fb32 	bl	800d086 <USBD_CtlPrepareRx>
      break;
 800ba22:	e072      	b.n	800bb0a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	7850      	ldrb	r0, [r2, #1]
 800ba30:	2200      	movs	r2, #0
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	4798      	blx	r3
      break;
 800ba36:	e068      	b.n	800bb0a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	785b      	ldrb	r3, [r3, #1]
 800ba3c:	2b0b      	cmp	r3, #11
 800ba3e:	d852      	bhi.n	800bae6 <USBD_CDC_Setup+0x162>
 800ba40:	a201      	add	r2, pc, #4	; (adr r2, 800ba48 <USBD_CDC_Setup+0xc4>)
 800ba42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba46:	bf00      	nop
 800ba48:	0800ba79 	.word	0x0800ba79
 800ba4c:	0800baf5 	.word	0x0800baf5
 800ba50:	0800bae7 	.word	0x0800bae7
 800ba54:	0800bae7 	.word	0x0800bae7
 800ba58:	0800bae7 	.word	0x0800bae7
 800ba5c:	0800bae7 	.word	0x0800bae7
 800ba60:	0800bae7 	.word	0x0800bae7
 800ba64:	0800bae7 	.word	0x0800bae7
 800ba68:	0800bae7 	.word	0x0800bae7
 800ba6c:	0800bae7 	.word	0x0800bae7
 800ba70:	0800baa3 	.word	0x0800baa3
 800ba74:	0800bacd 	.word	0x0800bacd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d107      	bne.n	800ba94 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ba84:	f107 030a 	add.w	r3, r7, #10
 800ba88:	2202      	movs	r2, #2
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f001 face 	bl	800d02e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ba92:	e032      	b.n	800bafa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ba94:	6839      	ldr	r1, [r7, #0]
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f001 fa58 	bl	800cf4c <USBD_CtlError>
            ret = USBD_FAIL;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	75fb      	strb	r3, [r7, #23]
          break;
 800baa0:	e02b      	b.n	800bafa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	2b03      	cmp	r3, #3
 800baac:	d107      	bne.n	800babe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800baae:	f107 030d 	add.w	r3, r7, #13
 800bab2:	2201      	movs	r2, #1
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 fab9 	bl	800d02e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800babc:	e01d      	b.n	800bafa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f001 fa43 	bl	800cf4c <USBD_CtlError>
            ret = USBD_FAIL;
 800bac6:	2303      	movs	r3, #3
 800bac8:	75fb      	strb	r3, [r7, #23]
          break;
 800baca:	e016      	b.n	800bafa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d00f      	beq.n	800baf8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f001 fa36 	bl	800cf4c <USBD_CtlError>
            ret = USBD_FAIL;
 800bae0:	2303      	movs	r3, #3
 800bae2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bae4:	e008      	b.n	800baf8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f001 fa2f 	bl	800cf4c <USBD_CtlError>
          ret = USBD_FAIL;
 800baee:	2303      	movs	r3, #3
 800baf0:	75fb      	strb	r3, [r7, #23]
          break;
 800baf2:	e002      	b.n	800bafa <USBD_CDC_Setup+0x176>
          break;
 800baf4:	bf00      	nop
 800baf6:	e008      	b.n	800bb0a <USBD_CDC_Setup+0x186>
          break;
 800baf8:	bf00      	nop
      }
      break;
 800bafa:	e006      	b.n	800bb0a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f001 fa24 	bl	800cf4c <USBD_CtlError>
      ret = USBD_FAIL;
 800bb04:	2303      	movs	r3, #3
 800bb06:	75fb      	strb	r3, [r7, #23]
      break;
 800bb08:	bf00      	nop
  }

  return (uint8_t)ret;
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3718      	adds	r7, #24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb32:	2303      	movs	r3, #3
 800bb34:	e04f      	b.n	800bbd6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bb3e:	78fa      	ldrb	r2, [r7, #3]
 800bb40:	6879      	ldr	r1, [r7, #4]
 800bb42:	4613      	mov	r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	4413      	add	r3, r2
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	440b      	add	r3, r1
 800bb4c:	3318      	adds	r3, #24
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d029      	beq.n	800bba8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bb54:	78fa      	ldrb	r2, [r7, #3]
 800bb56:	6879      	ldr	r1, [r7, #4]
 800bb58:	4613      	mov	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4413      	add	r3, r2
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	440b      	add	r3, r1
 800bb62:	3318      	adds	r3, #24
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	78f9      	ldrb	r1, [r7, #3]
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	00db      	lsls	r3, r3, #3
 800bb6e:	1a5b      	subs	r3, r3, r1
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4403      	add	r3, r0
 800bb74:	3344      	adds	r3, #68	; 0x44
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	fbb2 f1f3 	udiv	r1, r2, r3
 800bb7c:	fb03 f301 	mul.w	r3, r3, r1
 800bb80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d110      	bne.n	800bba8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bb86:	78fa      	ldrb	r2, [r7, #3]
 800bb88:	6879      	ldr	r1, [r7, #4]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	440b      	add	r3, r1
 800bb94:	3318      	adds	r3, #24
 800bb96:	2200      	movs	r2, #0
 800bb98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bb9a:	78f9      	ldrb	r1, [r7, #3]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	2200      	movs	r2, #0
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f009 fa3e 	bl	8015022 <USBD_LL_Transmit>
 800bba6:	e015      	b.n	800bbd4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00b      	beq.n	800bbd4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bbca:	68ba      	ldr	r2, [r7, #8]
 800bbcc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bbd0:	78fa      	ldrb	r2, [r7, #3]
 800bbd2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b084      	sub	sp, #16
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbf0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e015      	b.n	800bc2c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc00:	78fb      	ldrb	r3, [r7, #3]
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f009 fa4e 	bl	80150a6 <USBD_LL_GetRxDataSize>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bc26:	4611      	mov	r1, r2
 800bc28:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d101      	bne.n	800bc4e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	e01b      	b.n	800bc86 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d015      	beq.n	800bc84 <USBD_CDC_EP0_RxReady+0x50>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bc5e:	2bff      	cmp	r3, #255	; 0xff
 800bc60:	d010      	beq.n	800bc84 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bc70:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bc78:	b292      	uxth	r2, r2
 800bc7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	22ff      	movs	r2, #255	; 0xff
 800bc80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
	...

0800bc90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2243      	movs	r2, #67	; 0x43
 800bc9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bc9e:	4b03      	ldr	r3, [pc, #12]	; (800bcac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr
 800bcac:	200000ac 	.word	0x200000ac

0800bcb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2243      	movs	r2, #67	; 0x43
 800bcbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bcbe:	4b03      	ldr	r3, [pc, #12]	; (800bccc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	20000068 	.word	0x20000068

0800bcd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2243      	movs	r2, #67	; 0x43
 800bcdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bcde:	4b03      	ldr	r3, [pc, #12]	; (800bcec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	200000f0 	.word	0x200000f0

0800bcf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	220a      	movs	r2, #10
 800bcfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bcfe:	4b03      	ldr	r3, [pc, #12]	; (800bd0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr
 800bd0c:	20000024 	.word	0x20000024

0800bd10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d101      	bne.n	800bd24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bd20:	2303      	movs	r3, #3
 800bd22:	e004      	b.n	800bd2e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b087      	sub	sp, #28
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	60f8      	str	r0, [r7, #12]
 800bd42:	60b9      	str	r1, [r7, #8]
 800bd44:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd4c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e008      	b.n	800bd6a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	371c      	adds	r7, #28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b085      	sub	sp, #20
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd86:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d101      	bne.n	800bd92 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	e004      	b.n	800bd9c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3714      	adds	r7, #20
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdb6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d101      	bne.n	800bdca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e01a      	b.n	800be00 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d114      	bne.n	800bdfe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bdf2:	2181      	movs	r1, #129	; 0x81
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f009 f914 	bl	8015022 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d101      	bne.n	800be26 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800be22:	2303      	movs	r3, #3
 800be24:	e016      	b.n	800be54 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	7c1b      	ldrb	r3, [r3, #16]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d109      	bne.n	800be42 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be38:	2101      	movs	r1, #1
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f009 f912 	bl	8015064 <USBD_LL_PrepareReceive>
 800be40:	e007      	b.n	800be52 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be48:	2340      	movs	r3, #64	; 0x40
 800be4a:	2101      	movs	r1, #1
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f009 f909 	bl	8015064 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	4613      	mov	r3, r2
 800be68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800be70:	2303      	movs	r3, #3
 800be72:	e01f      	b.n	800beb4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2201      	movs	r2, #1
 800be9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	79fa      	ldrb	r2, [r7, #7]
 800bea6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bea8:	68f8      	ldr	r0, [r7, #12]
 800beaa:	f008 ff85 	bl	8014db8 <USBD_LL_Init>
 800beae:	4603      	mov	r3, r0
 800beb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bec6:	2300      	movs	r3, #0
 800bec8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e016      	b.n	800bf02 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00b      	beq.n	800bf00 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef0:	f107 020e 	add.w	r2, r7, #14
 800bef4:	4610      	mov	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	4602      	mov	r2, r0
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b082      	sub	sp, #8
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f008 ff9c 	bl	8014e50 <USBD_LL_Start>
 800bf18:	4603      	mov	r3, r0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bf22:	b480      	push	{r7}
 800bf24:	b083      	sub	sp, #12
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	460b      	mov	r3, r1
 800bf42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bf44:	2303      	movs	r3, #3
 800bf46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d009      	beq.n	800bf66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	78fa      	ldrb	r2, [r7, #3]
 800bf5c:	4611      	mov	r1, r2
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	4798      	blx	r3
 800bf62:	4603      	mov	r3, r0
 800bf64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d007      	beq.n	800bf96 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	78fa      	ldrb	r2, [r7, #3]
 800bf90:	4611      	mov	r1, r2
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	4798      	blx	r3
  }

  return USBD_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bfb0:	6839      	ldr	r1, [r7, #0]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f000 ff90 	bl	800ced8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bfd4:	f003 031f 	and.w	r3, r3, #31
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	d01a      	beq.n	800c012 <USBD_LL_SetupStage+0x72>
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d822      	bhi.n	800c026 <USBD_LL_SetupStage+0x86>
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <USBD_LL_SetupStage+0x4a>
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d00a      	beq.n	800bffe <USBD_LL_SetupStage+0x5e>
 800bfe8:	e01d      	b.n	800c026 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fa62 	bl	800c4bc <USBD_StdDevReq>
 800bff8:	4603      	mov	r3, r0
 800bffa:	73fb      	strb	r3, [r7, #15]
      break;
 800bffc:	e020      	b.n	800c040 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fac6 	bl	800c598 <USBD_StdItfReq>
 800c00c:	4603      	mov	r3, r0
 800c00e:	73fb      	strb	r3, [r7, #15]
      break;
 800c010:	e016      	b.n	800c040 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 fb05 	bl	800c62a <USBD_StdEPReq>
 800c020:	4603      	mov	r3, r0
 800c022:	73fb      	strb	r3, [r7, #15]
      break;
 800c024:	e00c      	b.n	800c040 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c02c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c030:	b2db      	uxtb	r3, r3
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f008 ff6b 	bl	8014f10 <USBD_LL_StallEP>
 800c03a:	4603      	mov	r3, r0
 800c03c:	73fb      	strb	r3, [r7, #15]
      break;
 800c03e:	bf00      	nop
  }

  return ret;
 800c040:	7bfb      	ldrb	r3, [r7, #15]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b086      	sub	sp, #24
 800c04e:	af00      	add	r7, sp, #0
 800c050:	60f8      	str	r0, [r7, #12]
 800c052:	460b      	mov	r3, r1
 800c054:	607a      	str	r2, [r7, #4]
 800c056:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c058:	7afb      	ldrb	r3, [r7, #11]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d138      	bne.n	800c0d0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c064:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c06c:	2b03      	cmp	r3, #3
 800c06e:	d14a      	bne.n	800c106 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	689a      	ldr	r2, [r3, #8]
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d913      	bls.n	800c0a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	689a      	ldr	r2, [r3, #8]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	1ad2      	subs	r2, r2, r3
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	68da      	ldr	r2, [r3, #12]
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	4293      	cmp	r3, r2
 800c094:	bf28      	it	cs
 800c096:	4613      	movcs	r3, r2
 800c098:	461a      	mov	r2, r3
 800c09a:	6879      	ldr	r1, [r7, #4]
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f001 f80f 	bl	800d0c0 <USBD_CtlContinueRx>
 800c0a2:	e030      	b.n	800c106 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	2b03      	cmp	r3, #3
 800c0ae:	d10b      	bne.n	800c0c8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d005      	beq.n	800c0c8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f001 f80a 	bl	800d0e2 <USBD_CtlSendStatus>
 800c0ce:	e01a      	b.n	800c106 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	2b03      	cmp	r3, #3
 800c0da:	d114      	bne.n	800c106 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e2:	699b      	ldr	r3, [r3, #24]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00e      	beq.n	800c106 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	7afa      	ldrb	r2, [r7, #11]
 800c0f2:	4611      	mov	r1, r2
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	4798      	blx	r3
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c0fc:	7dfb      	ldrb	r3, [r7, #23]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d001      	beq.n	800c106 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c102:	7dfb      	ldrb	r3, [r7, #23]
 800c104:	e000      	b.n	800c108 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	460b      	mov	r3, r1
 800c11a:	607a      	str	r2, [r7, #4]
 800c11c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c11e:	7afb      	ldrb	r3, [r7, #11]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d16b      	bne.n	800c1fc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	3314      	adds	r3, #20
 800c128:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c130:	2b02      	cmp	r3, #2
 800c132:	d156      	bne.n	800c1e2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	689a      	ldr	r2, [r3, #8]
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d914      	bls.n	800c16a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	689a      	ldr	r2, [r3, #8]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	1ad2      	subs	r2, r2, r3
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	461a      	mov	r2, r3
 800c154:	6879      	ldr	r1, [r7, #4]
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f000 ff84 	bl	800d064 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c15c:	2300      	movs	r3, #0
 800c15e:	2200      	movs	r2, #0
 800c160:	2100      	movs	r1, #0
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f008 ff7e 	bl	8015064 <USBD_LL_PrepareReceive>
 800c168:	e03b      	b.n	800c1e2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	429a      	cmp	r2, r3
 800c174:	d11c      	bne.n	800c1b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	685a      	ldr	r2, [r3, #4]
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c17e:	429a      	cmp	r2, r3
 800c180:	d316      	bcc.n	800c1b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d20f      	bcs.n	800c1b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c190:	2200      	movs	r2, #0
 800c192:	2100      	movs	r1, #0
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f000 ff65 	bl	800d064 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f008 ff5b 	bl	8015064 <USBD_LL_PrepareReceive>
 800c1ae:	e018      	b.n	800c1e2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b03      	cmp	r3, #3
 800c1ba:	d10b      	bne.n	800c1d4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d005      	beq.n	800c1d4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1d4:	2180      	movs	r1, #128	; 0x80
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f008 fe9a 	bl	8014f10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f000 ff93 	bl	800d108 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d122      	bne.n	800c232 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f7ff fe98 	bl	800bf22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c1fa:	e01a      	b.n	800c232 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b03      	cmp	r3, #3
 800c206:	d114      	bne.n	800c232 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c20e:	695b      	ldr	r3, [r3, #20]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00e      	beq.n	800c232 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c21a:	695b      	ldr	r3, [r3, #20]
 800c21c:	7afa      	ldrb	r2, [r7, #11]
 800c21e:	4611      	mov	r1, r2
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	4798      	blx	r3
 800c224:	4603      	mov	r3, r0
 800c226:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c228:	7dfb      	ldrb	r3, [r7, #23]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d001      	beq.n	800c232 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	e000      	b.n	800c234 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3718      	adds	r7, #24
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c26c:	2303      	movs	r3, #3
 800c26e:	e02f      	b.n	800c2d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00f      	beq.n	800c29a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d009      	beq.n	800c29a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	6852      	ldr	r2, [r2, #4]
 800c292:	b2d2      	uxtb	r2, r2
 800c294:	4611      	mov	r1, r2
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c29a:	2340      	movs	r3, #64	; 0x40
 800c29c:	2200      	movs	r2, #0
 800c29e:	2100      	movs	r1, #0
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f008 fdf0 	bl	8014e86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2240      	movs	r2, #64	; 0x40
 800c2b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c2b6:	2340      	movs	r3, #64	; 0x40
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2180      	movs	r1, #128	; 0x80
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f008 fde2 	bl	8014e86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2240      	movs	r2, #64	; 0x40
 800c2cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	78fa      	ldrb	r2, [r7, #3]
 800c2e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c306:	b2da      	uxtb	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2204      	movs	r2, #4
 800c312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b04      	cmp	r3, #4
 800c336:	d106      	bne.n	800c346 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c33e:	b2da      	uxtb	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c346:	2300      	movs	r3, #0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c366:	2303      	movs	r3, #3
 800c368:	e012      	b.n	800c390 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c370:	b2db      	uxtb	r3, r3
 800c372:	2b03      	cmp	r3, #3
 800c374:	d10b      	bne.n	800c38e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c37c:	69db      	ldr	r3, [r3, #28]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d005      	beq.n	800c38e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c388:	69db      	ldr	r3, [r3, #28]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d101      	bne.n	800c3b2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	e014      	b.n	800c3dc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d10d      	bne.n	800c3da <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c4:	6a1b      	ldr	r3, [r3, #32]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d007      	beq.n	800c3da <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d0:	6a1b      	ldr	r3, [r3, #32]
 800c3d2:	78fa      	ldrb	r2, [r7, #3]
 800c3d4:	4611      	mov	r1, r2
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d101      	bne.n	800c3fe <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c3fa:	2303      	movs	r3, #3
 800c3fc:	e014      	b.n	800c428 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b03      	cmp	r3, #3
 800c408:	d10d      	bne.n	800c426 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c412:	2b00      	cmp	r3, #0
 800c414:	d007      	beq.n	800c426 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41e:	78fa      	ldrb	r2, [r7, #3]
 800c420:	4611      	mov	r1, r2
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b082      	sub	sp, #8
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d009      	beq.n	800c474 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	6852      	ldr	r2, [r2, #4]
 800c46c:	b2d2      	uxtb	r2, r2
 800c46e:	4611      	mov	r1, r2
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	4798      	blx	r3
  }

  return USBD_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c47e:	b480      	push	{r7}
 800c480:	b087      	sub	sp, #28
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	3301      	adds	r3, #1
 800c494:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c49c:	8a3b      	ldrh	r3, [r7, #16]
 800c49e:	021b      	lsls	r3, r3, #8
 800c4a0:	b21a      	sxth	r2, r3
 800c4a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	b21b      	sxth	r3, r3
 800c4aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c4ac:	89fb      	ldrh	r3, [r7, #14]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	371c      	adds	r7, #28
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
	...

0800c4bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4d2:	2b40      	cmp	r3, #64	; 0x40
 800c4d4:	d005      	beq.n	800c4e2 <USBD_StdDevReq+0x26>
 800c4d6:	2b40      	cmp	r3, #64	; 0x40
 800c4d8:	d853      	bhi.n	800c582 <USBD_StdDevReq+0xc6>
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00b      	beq.n	800c4f6 <USBD_StdDevReq+0x3a>
 800c4de:	2b20      	cmp	r3, #32
 800c4e0:	d14f      	bne.n	800c582 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	6839      	ldr	r1, [r7, #0]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	4798      	blx	r3
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c4f4:	e04a      	b.n	800c58c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	785b      	ldrb	r3, [r3, #1]
 800c4fa:	2b09      	cmp	r3, #9
 800c4fc:	d83b      	bhi.n	800c576 <USBD_StdDevReq+0xba>
 800c4fe:	a201      	add	r2, pc, #4	; (adr r2, 800c504 <USBD_StdDevReq+0x48>)
 800c500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c504:	0800c559 	.word	0x0800c559
 800c508:	0800c56d 	.word	0x0800c56d
 800c50c:	0800c577 	.word	0x0800c577
 800c510:	0800c563 	.word	0x0800c563
 800c514:	0800c577 	.word	0x0800c577
 800c518:	0800c537 	.word	0x0800c537
 800c51c:	0800c52d 	.word	0x0800c52d
 800c520:	0800c577 	.word	0x0800c577
 800c524:	0800c54f 	.word	0x0800c54f
 800c528:	0800c541 	.word	0x0800c541
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f9de 	bl	800c8f0 <USBD_GetDescriptor>
          break;
 800c534:	e024      	b.n	800c580 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c536:	6839      	ldr	r1, [r7, #0]
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 fb43 	bl	800cbc4 <USBD_SetAddress>
          break;
 800c53e:	e01f      	b.n	800c580 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c540:	6839      	ldr	r1, [r7, #0]
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fb82 	bl	800cc4c <USBD_SetConfig>
 800c548:	4603      	mov	r3, r0
 800c54a:	73fb      	strb	r3, [r7, #15]
          break;
 800c54c:	e018      	b.n	800c580 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fc21 	bl	800cd98 <USBD_GetConfig>
          break;
 800c556:	e013      	b.n	800c580 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fc52 	bl	800ce04 <USBD_GetStatus>
          break;
 800c560:	e00e      	b.n	800c580 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fc81 	bl	800ce6c <USBD_SetFeature>
          break;
 800c56a:	e009      	b.n	800c580 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fc90 	bl	800ce94 <USBD_ClrFeature>
          break;
 800c574:	e004      	b.n	800c580 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fce7 	bl	800cf4c <USBD_CtlError>
          break;
 800c57e:	bf00      	nop
      }
      break;
 800c580:	e004      	b.n	800c58c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c582:	6839      	ldr	r1, [r7, #0]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 fce1 	bl	800cf4c <USBD_CtlError>
      break;
 800c58a:	bf00      	nop
  }

  return ret;
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop

0800c598 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5ae:	2b40      	cmp	r3, #64	; 0x40
 800c5b0:	d005      	beq.n	800c5be <USBD_StdItfReq+0x26>
 800c5b2:	2b40      	cmp	r3, #64	; 0x40
 800c5b4:	d82f      	bhi.n	800c616 <USBD_StdItfReq+0x7e>
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d001      	beq.n	800c5be <USBD_StdItfReq+0x26>
 800c5ba:	2b20      	cmp	r3, #32
 800c5bc:	d12b      	bne.n	800c616 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d81d      	bhi.n	800c608 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	889b      	ldrh	r3, [r3, #4]
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d813      	bhi.n	800c5fe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	6839      	ldr	r1, [r7, #0]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	4798      	blx	r3
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	88db      	ldrh	r3, [r3, #6]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d110      	bne.n	800c612 <USBD_StdItfReq+0x7a>
 800c5f0:	7bfb      	ldrb	r3, [r7, #15]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10d      	bne.n	800c612 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fd73 	bl	800d0e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c5fc:	e009      	b.n	800c612 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c5fe:	6839      	ldr	r1, [r7, #0]
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 fca3 	bl	800cf4c <USBD_CtlError>
          break;
 800c606:	e004      	b.n	800c612 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c608:	6839      	ldr	r1, [r7, #0]
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fc9e 	bl	800cf4c <USBD_CtlError>
          break;
 800c610:	e000      	b.n	800c614 <USBD_StdItfReq+0x7c>
          break;
 800c612:	bf00      	nop
      }
      break;
 800c614:	e004      	b.n	800c620 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fc97 	bl	800cf4c <USBD_CtlError>
      break;
 800c61e:	bf00      	nop
  }

  return ret;
 800c620:	7bfb      	ldrb	r3, [r7, #15]
}
 800c622:	4618      	mov	r0, r3
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b084      	sub	sp, #16
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
 800c632:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c634:	2300      	movs	r3, #0
 800c636:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	889b      	ldrh	r3, [r3, #4]
 800c63c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c646:	2b40      	cmp	r3, #64	; 0x40
 800c648:	d007      	beq.n	800c65a <USBD_StdEPReq+0x30>
 800c64a:	2b40      	cmp	r3, #64	; 0x40
 800c64c:	f200 8145 	bhi.w	800c8da <USBD_StdEPReq+0x2b0>
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00c      	beq.n	800c66e <USBD_StdEPReq+0x44>
 800c654:	2b20      	cmp	r3, #32
 800c656:	f040 8140 	bne.w	800c8da <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	4798      	blx	r3
 800c668:	4603      	mov	r3, r0
 800c66a:	73fb      	strb	r3, [r7, #15]
      break;
 800c66c:	e13a      	b.n	800c8e4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	785b      	ldrb	r3, [r3, #1]
 800c672:	2b03      	cmp	r3, #3
 800c674:	d007      	beq.n	800c686 <USBD_StdEPReq+0x5c>
 800c676:	2b03      	cmp	r3, #3
 800c678:	f300 8129 	bgt.w	800c8ce <USBD_StdEPReq+0x2a4>
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d07f      	beq.n	800c780 <USBD_StdEPReq+0x156>
 800c680:	2b01      	cmp	r3, #1
 800c682:	d03c      	beq.n	800c6fe <USBD_StdEPReq+0xd4>
 800c684:	e123      	b.n	800c8ce <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d002      	beq.n	800c698 <USBD_StdEPReq+0x6e>
 800c692:	2b03      	cmp	r3, #3
 800c694:	d016      	beq.n	800c6c4 <USBD_StdEPReq+0x9a>
 800c696:	e02c      	b.n	800c6f2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c698:	7bbb      	ldrb	r3, [r7, #14]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00d      	beq.n	800c6ba <USBD_StdEPReq+0x90>
 800c69e:	7bbb      	ldrb	r3, [r7, #14]
 800c6a0:	2b80      	cmp	r3, #128	; 0x80
 800c6a2:	d00a      	beq.n	800c6ba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6a4:	7bbb      	ldrb	r3, [r7, #14]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f008 fc31 	bl	8014f10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6ae:	2180      	movs	r1, #128	; 0x80
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f008 fc2d 	bl	8014f10 <USBD_LL_StallEP>
 800c6b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c6b8:	e020      	b.n	800c6fc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fc45 	bl	800cf4c <USBD_CtlError>
              break;
 800c6c2:	e01b      	b.n	800c6fc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	885b      	ldrh	r3, [r3, #2]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d10e      	bne.n	800c6ea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c6cc:	7bbb      	ldrb	r3, [r7, #14]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00b      	beq.n	800c6ea <USBD_StdEPReq+0xc0>
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	2b80      	cmp	r3, #128	; 0x80
 800c6d6:	d008      	beq.n	800c6ea <USBD_StdEPReq+0xc0>
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	88db      	ldrh	r3, [r3, #6]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d104      	bne.n	800c6ea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f008 fc13 	bl	8014f10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 fcf9 	bl	800d0e2 <USBD_CtlSendStatus>

              break;
 800c6f0:	e004      	b.n	800c6fc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fc29 	bl	800cf4c <USBD_CtlError>
              break;
 800c6fa:	bf00      	nop
          }
          break;
 800c6fc:	e0ec      	b.n	800c8d8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b02      	cmp	r3, #2
 800c708:	d002      	beq.n	800c710 <USBD_StdEPReq+0xe6>
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	d016      	beq.n	800c73c <USBD_StdEPReq+0x112>
 800c70e:	e030      	b.n	800c772 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c710:	7bbb      	ldrb	r3, [r7, #14]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00d      	beq.n	800c732 <USBD_StdEPReq+0x108>
 800c716:	7bbb      	ldrb	r3, [r7, #14]
 800c718:	2b80      	cmp	r3, #128	; 0x80
 800c71a:	d00a      	beq.n	800c732 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c71c:	7bbb      	ldrb	r3, [r7, #14]
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f008 fbf5 	bl	8014f10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c726:	2180      	movs	r1, #128	; 0x80
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f008 fbf1 	bl	8014f10 <USBD_LL_StallEP>
 800c72e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c730:	e025      	b.n	800c77e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c732:	6839      	ldr	r1, [r7, #0]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 fc09 	bl	800cf4c <USBD_CtlError>
              break;
 800c73a:	e020      	b.n	800c77e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	885b      	ldrh	r3, [r3, #2]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d11b      	bne.n	800c77c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c744:	7bbb      	ldrb	r3, [r7, #14]
 800c746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d004      	beq.n	800c758 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c74e:	7bbb      	ldrb	r3, [r7, #14]
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f008 fbfb 	bl	8014f4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fcc2 	bl	800d0e2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	4798      	blx	r3
 800c76c:	4603      	mov	r3, r0
 800c76e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c770:	e004      	b.n	800c77c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 fbe9 	bl	800cf4c <USBD_CtlError>
              break;
 800c77a:	e000      	b.n	800c77e <USBD_StdEPReq+0x154>
              break;
 800c77c:	bf00      	nop
          }
          break;
 800c77e:	e0ab      	b.n	800c8d8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c786:	b2db      	uxtb	r3, r3
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d002      	beq.n	800c792 <USBD_StdEPReq+0x168>
 800c78c:	2b03      	cmp	r3, #3
 800c78e:	d032      	beq.n	800c7f6 <USBD_StdEPReq+0x1cc>
 800c790:	e097      	b.n	800c8c2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c792:	7bbb      	ldrb	r3, [r7, #14]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d007      	beq.n	800c7a8 <USBD_StdEPReq+0x17e>
 800c798:	7bbb      	ldrb	r3, [r7, #14]
 800c79a:	2b80      	cmp	r3, #128	; 0x80
 800c79c:	d004      	beq.n	800c7a8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c79e:	6839      	ldr	r1, [r7, #0]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 fbd3 	bl	800cf4c <USBD_CtlError>
                break;
 800c7a6:	e091      	b.n	800c8cc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	da0b      	bge.n	800c7c8 <USBD_StdEPReq+0x19e>
 800c7b0:	7bbb      	ldrb	r3, [r7, #14]
 800c7b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	4413      	add	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	3310      	adds	r3, #16
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	e00b      	b.n	800c7e0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7c8:	7bbb      	ldrb	r3, [r7, #14]
 800c7ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	4413      	add	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	4413      	add	r3, r2
 800c7de:	3304      	adds	r3, #4
 800c7e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	2202      	movs	r2, #2
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fc1d 	bl	800d02e <USBD_CtlSendData>
              break;
 800c7f4:	e06a      	b.n	800c8cc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c7f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	da11      	bge.n	800c822 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c7fe:	7bbb      	ldrb	r3, [r7, #14]
 800c800:	f003 020f 	and.w	r2, r3, #15
 800c804:	6879      	ldr	r1, [r7, #4]
 800c806:	4613      	mov	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4413      	add	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	440b      	add	r3, r1
 800c810:	3324      	adds	r3, #36	; 0x24
 800c812:	881b      	ldrh	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d117      	bne.n	800c848 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c818:	6839      	ldr	r1, [r7, #0]
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 fb96 	bl	800cf4c <USBD_CtlError>
                  break;
 800c820:	e054      	b.n	800c8cc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c822:	7bbb      	ldrb	r3, [r7, #14]
 800c824:	f003 020f 	and.w	r2, r3, #15
 800c828:	6879      	ldr	r1, [r7, #4]
 800c82a:	4613      	mov	r3, r2
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	4413      	add	r3, r2
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	440b      	add	r3, r1
 800c834:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d104      	bne.n	800c848 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fb83 	bl	800cf4c <USBD_CtlError>
                  break;
 800c846:	e041      	b.n	800c8cc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	da0b      	bge.n	800c868 <USBD_StdEPReq+0x23e>
 800c850:	7bbb      	ldrb	r3, [r7, #14]
 800c852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c856:	4613      	mov	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4413      	add	r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	3310      	adds	r3, #16
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	4413      	add	r3, r2
 800c864:	3304      	adds	r3, #4
 800c866:	e00b      	b.n	800c880 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c868:	7bbb      	ldrb	r3, [r7, #14]
 800c86a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c86e:	4613      	mov	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	4413      	add	r3, r2
 800c87e:	3304      	adds	r3, #4
 800c880:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c882:	7bbb      	ldrb	r3, [r7, #14]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d002      	beq.n	800c88e <USBD_StdEPReq+0x264>
 800c888:	7bbb      	ldrb	r3, [r7, #14]
 800c88a:	2b80      	cmp	r3, #128	; 0x80
 800c88c:	d103      	bne.n	800c896 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2200      	movs	r2, #0
 800c892:	601a      	str	r2, [r3, #0]
 800c894:	e00e      	b.n	800c8b4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c896:	7bbb      	ldrb	r3, [r7, #14]
 800c898:	4619      	mov	r1, r3
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f008 fb76 	bl	8014f8c <USBD_LL_IsStallEP>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d003      	beq.n	800c8ae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	e002      	b.n	800c8b4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	2202      	movs	r2, #2
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fbb7 	bl	800d02e <USBD_CtlSendData>
              break;
 800c8c0:	e004      	b.n	800c8cc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fb41 	bl	800cf4c <USBD_CtlError>
              break;
 800c8ca:	bf00      	nop
          }
          break;
 800c8cc:	e004      	b.n	800c8d8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 fb3b 	bl	800cf4c <USBD_CtlError>
          break;
 800c8d6:	bf00      	nop
      }
      break;
 800c8d8:	e004      	b.n	800c8e4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fb35 	bl	800cf4c <USBD_CtlError>
      break;
 800c8e2:	bf00      	nop
  }

  return ret;
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
	...

0800c8f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c8fe:	2300      	movs	r3, #0
 800c900:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c902:	2300      	movs	r3, #0
 800c904:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	885b      	ldrh	r3, [r3, #2]
 800c90a:	0a1b      	lsrs	r3, r3, #8
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	3b01      	subs	r3, #1
 800c910:	2b06      	cmp	r3, #6
 800c912:	f200 8128 	bhi.w	800cb66 <USBD_GetDescriptor+0x276>
 800c916:	a201      	add	r2, pc, #4	; (adr r2, 800c91c <USBD_GetDescriptor+0x2c>)
 800c918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91c:	0800c939 	.word	0x0800c939
 800c920:	0800c951 	.word	0x0800c951
 800c924:	0800c991 	.word	0x0800c991
 800c928:	0800cb67 	.word	0x0800cb67
 800c92c:	0800cb67 	.word	0x0800cb67
 800c930:	0800cb07 	.word	0x0800cb07
 800c934:	0800cb33 	.word	0x0800cb33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	7c12      	ldrb	r2, [r2, #16]
 800c944:	f107 0108 	add.w	r1, r7, #8
 800c948:	4610      	mov	r0, r2
 800c94a:	4798      	blx	r3
 800c94c:	60f8      	str	r0, [r7, #12]
      break;
 800c94e:	e112      	b.n	800cb76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	7c1b      	ldrb	r3, [r3, #16]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10d      	bne.n	800c974 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c960:	f107 0208 	add.w	r2, r7, #8
 800c964:	4610      	mov	r0, r2
 800c966:	4798      	blx	r3
 800c968:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3301      	adds	r3, #1
 800c96e:	2202      	movs	r2, #2
 800c970:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c972:	e100      	b.n	800cb76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97c:	f107 0208 	add.w	r2, r7, #8
 800c980:	4610      	mov	r0, r2
 800c982:	4798      	blx	r3
 800c984:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3301      	adds	r3, #1
 800c98a:	2202      	movs	r2, #2
 800c98c:	701a      	strb	r2, [r3, #0]
      break;
 800c98e:	e0f2      	b.n	800cb76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	885b      	ldrh	r3, [r3, #2]
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2b05      	cmp	r3, #5
 800c998:	f200 80ac 	bhi.w	800caf4 <USBD_GetDescriptor+0x204>
 800c99c:	a201      	add	r2, pc, #4	; (adr r2, 800c9a4 <USBD_GetDescriptor+0xb4>)
 800c99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a2:	bf00      	nop
 800c9a4:	0800c9bd 	.word	0x0800c9bd
 800c9a8:	0800c9f1 	.word	0x0800c9f1
 800c9ac:	0800ca25 	.word	0x0800ca25
 800c9b0:	0800ca59 	.word	0x0800ca59
 800c9b4:	0800ca8d 	.word	0x0800ca8d
 800c9b8:	0800cac1 	.word	0x0800cac1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00b      	beq.n	800c9e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	7c12      	ldrb	r2, [r2, #16]
 800c9d4:	f107 0108 	add.w	r1, r7, #8
 800c9d8:	4610      	mov	r0, r2
 800c9da:	4798      	blx	r3
 800c9dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9de:	e091      	b.n	800cb04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9e0:	6839      	ldr	r1, [r7, #0]
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fab2 	bl	800cf4c <USBD_CtlError>
            err++;
 800c9e8:	7afb      	ldrb	r3, [r7, #11]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c9ee:	e089      	b.n	800cb04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00b      	beq.n	800ca14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	7c12      	ldrb	r2, [r2, #16]
 800ca08:	f107 0108 	add.w	r1, r7, #8
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	4798      	blx	r3
 800ca10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca12:	e077      	b.n	800cb04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fa98 	bl	800cf4c <USBD_CtlError>
            err++;
 800ca1c:	7afb      	ldrb	r3, [r7, #11]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	72fb      	strb	r3, [r7, #11]
          break;
 800ca22:	e06f      	b.n	800cb04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00b      	beq.n	800ca48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	7c12      	ldrb	r2, [r2, #16]
 800ca3c:	f107 0108 	add.w	r1, r7, #8
 800ca40:	4610      	mov	r0, r2
 800ca42:	4798      	blx	r3
 800ca44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca46:	e05d      	b.n	800cb04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 fa7e 	bl	800cf4c <USBD_CtlError>
            err++;
 800ca50:	7afb      	ldrb	r3, [r7, #11]
 800ca52:	3301      	adds	r3, #1
 800ca54:	72fb      	strb	r3, [r7, #11]
          break;
 800ca56:	e055      	b.n	800cb04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00b      	beq.n	800ca7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca6a:	691b      	ldr	r3, [r3, #16]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	7c12      	ldrb	r2, [r2, #16]
 800ca70:	f107 0108 	add.w	r1, r7, #8
 800ca74:	4610      	mov	r0, r2
 800ca76:	4798      	blx	r3
 800ca78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca7a:	e043      	b.n	800cb04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca7c:	6839      	ldr	r1, [r7, #0]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fa64 	bl	800cf4c <USBD_CtlError>
            err++;
 800ca84:	7afb      	ldrb	r3, [r7, #11]
 800ca86:	3301      	adds	r3, #1
 800ca88:	72fb      	strb	r3, [r7, #11]
          break;
 800ca8a:	e03b      	b.n	800cb04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca92:	695b      	ldr	r3, [r3, #20]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00b      	beq.n	800cab0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	7c12      	ldrb	r2, [r2, #16]
 800caa4:	f107 0108 	add.w	r1, r7, #8
 800caa8:	4610      	mov	r0, r2
 800caaa:	4798      	blx	r3
 800caac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800caae:	e029      	b.n	800cb04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fa4a 	bl	800cf4c <USBD_CtlError>
            err++;
 800cab8:	7afb      	ldrb	r3, [r7, #11]
 800caba:	3301      	adds	r3, #1
 800cabc:	72fb      	strb	r3, [r7, #11]
          break;
 800cabe:	e021      	b.n	800cb04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cac6:	699b      	ldr	r3, [r3, #24]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00b      	beq.n	800cae4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	7c12      	ldrb	r2, [r2, #16]
 800cad8:	f107 0108 	add.w	r1, r7, #8
 800cadc:	4610      	mov	r0, r2
 800cade:	4798      	blx	r3
 800cae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cae2:	e00f      	b.n	800cb04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fa30 	bl	800cf4c <USBD_CtlError>
            err++;
 800caec:	7afb      	ldrb	r3, [r7, #11]
 800caee:	3301      	adds	r3, #1
 800caf0:	72fb      	strb	r3, [r7, #11]
          break;
 800caf2:	e007      	b.n	800cb04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800caf4:	6839      	ldr	r1, [r7, #0]
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 fa28 	bl	800cf4c <USBD_CtlError>
          err++;
 800cafc:	7afb      	ldrb	r3, [r7, #11]
 800cafe:	3301      	adds	r3, #1
 800cb00:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cb02:	bf00      	nop
      }
      break;
 800cb04:	e037      	b.n	800cb76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	7c1b      	ldrb	r3, [r3, #16]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d109      	bne.n	800cb22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb16:	f107 0208 	add.w	r2, r7, #8
 800cb1a:	4610      	mov	r0, r2
 800cb1c:	4798      	blx	r3
 800cb1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb20:	e029      	b.n	800cb76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 fa11 	bl	800cf4c <USBD_CtlError>
        err++;
 800cb2a:	7afb      	ldrb	r3, [r7, #11]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	72fb      	strb	r3, [r7, #11]
      break;
 800cb30:	e021      	b.n	800cb76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	7c1b      	ldrb	r3, [r3, #16]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10d      	bne.n	800cb56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb42:	f107 0208 	add.w	r2, r7, #8
 800cb46:	4610      	mov	r0, r2
 800cb48:	4798      	blx	r3
 800cb4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	2207      	movs	r2, #7
 800cb52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb54:	e00f      	b.n	800cb76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cb56:	6839      	ldr	r1, [r7, #0]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 f9f7 	bl	800cf4c <USBD_CtlError>
        err++;
 800cb5e:	7afb      	ldrb	r3, [r7, #11]
 800cb60:	3301      	adds	r3, #1
 800cb62:	72fb      	strb	r3, [r7, #11]
      break;
 800cb64:	e007      	b.n	800cb76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 f9ef 	bl	800cf4c <USBD_CtlError>
      err++;
 800cb6e:	7afb      	ldrb	r3, [r7, #11]
 800cb70:	3301      	adds	r3, #1
 800cb72:	72fb      	strb	r3, [r7, #11]
      break;
 800cb74:	bf00      	nop
  }

  if (err != 0U)
 800cb76:	7afb      	ldrb	r3, [r7, #11]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d11e      	bne.n	800cbba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	88db      	ldrh	r3, [r3, #6]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d016      	beq.n	800cbb2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cb84:	893b      	ldrh	r3, [r7, #8]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00e      	beq.n	800cba8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	88da      	ldrh	r2, [r3, #6]
 800cb8e:	893b      	ldrh	r3, [r7, #8]
 800cb90:	4293      	cmp	r3, r2
 800cb92:	bf28      	it	cs
 800cb94:	4613      	movcs	r3, r2
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb9a:	893b      	ldrh	r3, [r7, #8]
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	68f9      	ldr	r1, [r7, #12]
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 fa44 	bl	800d02e <USBD_CtlSendData>
 800cba6:	e009      	b.n	800cbbc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cba8:	6839      	ldr	r1, [r7, #0]
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 f9ce 	bl	800cf4c <USBD_CtlError>
 800cbb0:	e004      	b.n	800cbbc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 fa95 	bl	800d0e2 <USBD_CtlSendStatus>
 800cbb8:	e000      	b.n	800cbbc <USBD_GetDescriptor+0x2cc>
    return;
 800cbba:	bf00      	nop
  }
}
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop

0800cbc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	889b      	ldrh	r3, [r3, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d131      	bne.n	800cc3a <USBD_SetAddress+0x76>
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	88db      	ldrh	r3, [r3, #6]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d12d      	bne.n	800cc3a <USBD_SetAddress+0x76>
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	885b      	ldrh	r3, [r3, #2]
 800cbe2:	2b7f      	cmp	r3, #127	; 0x7f
 800cbe4:	d829      	bhi.n	800cc3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	885b      	ldrh	r3, [r3, #2]
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d104      	bne.n	800cc08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cbfe:	6839      	ldr	r1, [r7, #0]
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 f9a3 	bl	800cf4c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc06:	e01d      	b.n	800cc44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	7bfa      	ldrb	r2, [r7, #15]
 800cc0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
 800cc12:	4619      	mov	r1, r3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f008 f9e5 	bl	8014fe4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fa61 	bl	800d0e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d004      	beq.n	800cc30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2202      	movs	r2, #2
 800cc2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc2e:	e009      	b.n	800cc44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2201      	movs	r2, #1
 800cc34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc38:	e004      	b.n	800cc44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f985 	bl	800cf4c <USBD_CtlError>
  }
}
 800cc42:	bf00      	nop
 800cc44:	bf00      	nop
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc56:	2300      	movs	r3, #0
 800cc58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	885b      	ldrh	r3, [r3, #2]
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	4b4c      	ldr	r3, [pc, #304]	; (800cd94 <USBD_SetConfig+0x148>)
 800cc62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc64:	4b4b      	ldr	r3, [pc, #300]	; (800cd94 <USBD_SetConfig+0x148>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d905      	bls.n	800cc78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cc6c:	6839      	ldr	r1, [r7, #0]
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 f96c 	bl	800cf4c <USBD_CtlError>
    return USBD_FAIL;
 800cc74:	2303      	movs	r3, #3
 800cc76:	e088      	b.n	800cd8a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	d002      	beq.n	800cc8a <USBD_SetConfig+0x3e>
 800cc84:	2b03      	cmp	r3, #3
 800cc86:	d025      	beq.n	800ccd4 <USBD_SetConfig+0x88>
 800cc88:	e071      	b.n	800cd6e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cc8a:	4b42      	ldr	r3, [pc, #264]	; (800cd94 <USBD_SetConfig+0x148>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d01c      	beq.n	800cccc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cc92:	4b40      	ldr	r3, [pc, #256]	; (800cd94 <USBD_SetConfig+0x148>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc9c:	4b3d      	ldr	r3, [pc, #244]	; (800cd94 <USBD_SetConfig+0x148>)
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	4619      	mov	r1, r3
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7ff f948 	bl	800bf38 <USBD_SetClassConfig>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d004      	beq.n	800ccbc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 f949 	bl	800cf4c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ccba:	e065      	b.n	800cd88 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 fa10 	bl	800d0e2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2203      	movs	r2, #3
 800ccc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ccca:	e05d      	b.n	800cd88 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fa08 	bl	800d0e2 <USBD_CtlSendStatus>
      break;
 800ccd2:	e059      	b.n	800cd88 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ccd4:	4b2f      	ldr	r3, [pc, #188]	; (800cd94 <USBD_SetConfig+0x148>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d112      	bne.n	800cd02 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2202      	movs	r2, #2
 800cce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cce4:	4b2b      	ldr	r3, [pc, #172]	; (800cd94 <USBD_SetConfig+0x148>)
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	461a      	mov	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccee:	4b29      	ldr	r3, [pc, #164]	; (800cd94 <USBD_SetConfig+0x148>)
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7ff f93b 	bl	800bf70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f9f1 	bl	800d0e2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd00:	e042      	b.n	800cd88 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cd02:	4b24      	ldr	r3, [pc, #144]	; (800cd94 <USBD_SetConfig+0x148>)
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	461a      	mov	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d02a      	beq.n	800cd66 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	4619      	mov	r1, r3
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f7ff f929 	bl	800bf70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cd1e:	4b1d      	ldr	r3, [pc, #116]	; (800cd94 <USBD_SetConfig+0x148>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	461a      	mov	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd28:	4b1a      	ldr	r3, [pc, #104]	; (800cd94 <USBD_SetConfig+0x148>)
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff f902 	bl	800bf38 <USBD_SetClassConfig>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00f      	beq.n	800cd5e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cd3e:	6839      	ldr	r1, [r7, #0]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f903 	bl	800cf4c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f7ff f90e 	bl	800bf70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2202      	movs	r2, #2
 800cd58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cd5c:	e014      	b.n	800cd88 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f9bf 	bl	800d0e2 <USBD_CtlSendStatus>
      break;
 800cd64:	e010      	b.n	800cd88 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f9bb 	bl	800d0e2 <USBD_CtlSendStatus>
      break;
 800cd6c:	e00c      	b.n	800cd88 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cd6e:	6839      	ldr	r1, [r7, #0]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 f8eb 	bl	800cf4c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd76:	4b07      	ldr	r3, [pc, #28]	; (800cd94 <USBD_SetConfig+0x148>)
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff f8f7 	bl	800bf70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cd82:	2303      	movs	r3, #3
 800cd84:	73fb      	strb	r3, [r7, #15]
      break;
 800cd86:	bf00      	nop
  }

  return ret;
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	20000788 	.word	0x20000788

0800cd98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	88db      	ldrh	r3, [r3, #6]
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d004      	beq.n	800cdb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 f8cd 	bl	800cf4c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cdb2:	e023      	b.n	800cdfc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	dc02      	bgt.n	800cdc6 <USBD_GetConfig+0x2e>
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	dc03      	bgt.n	800cdcc <USBD_GetConfig+0x34>
 800cdc4:	e015      	b.n	800cdf2 <USBD_GetConfig+0x5a>
 800cdc6:	2b03      	cmp	r3, #3
 800cdc8:	d00b      	beq.n	800cde2 <USBD_GetConfig+0x4a>
 800cdca:	e012      	b.n	800cdf2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	3308      	adds	r3, #8
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f927 	bl	800d02e <USBD_CtlSendData>
        break;
 800cde0:	e00c      	b.n	800cdfc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	3304      	adds	r3, #4
 800cde6:	2201      	movs	r2, #1
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 f91f 	bl	800d02e <USBD_CtlSendData>
        break;
 800cdf0:	e004      	b.n	800cdfc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cdf2:	6839      	ldr	r1, [r7, #0]
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 f8a9 	bl	800cf4c <USBD_CtlError>
        break;
 800cdfa:	bf00      	nop
}
 800cdfc:	bf00      	nop
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	3b01      	subs	r3, #1
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d81e      	bhi.n	800ce5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	88db      	ldrh	r3, [r3, #6]
 800ce20:	2b02      	cmp	r3, #2
 800ce22:	d004      	beq.n	800ce2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 f890 	bl	800cf4c <USBD_CtlError>
        break;
 800ce2c:	e01a      	b.n	800ce64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d005      	beq.n	800ce4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	f043 0202 	orr.w	r2, r3, #2
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	330c      	adds	r3, #12
 800ce4e:	2202      	movs	r2, #2
 800ce50:	4619      	mov	r1, r3
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 f8eb 	bl	800d02e <USBD_CtlSendData>
      break;
 800ce58:	e004      	b.n	800ce64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ce5a:	6839      	ldr	r1, [r7, #0]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 f875 	bl	800cf4c <USBD_CtlError>
      break;
 800ce62:	bf00      	nop
  }
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	885b      	ldrh	r3, [r3, #2]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d106      	bne.n	800ce8c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 f92b 	bl	800d0e2 <USBD_CtlSendStatus>
  }
}
 800ce8c:	bf00      	nop
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	3b01      	subs	r3, #1
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	d80b      	bhi.n	800cec4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	885b      	ldrh	r3, [r3, #2]
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d10c      	bne.n	800cece <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 f910 	bl	800d0e2 <USBD_CtlSendStatus>
      }
      break;
 800cec2:	e004      	b.n	800cece <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 f840 	bl	800cf4c <USBD_CtlError>
      break;
 800cecc:	e000      	b.n	800ced0 <USBD_ClrFeature+0x3c>
      break;
 800cece:	bf00      	nop
  }
}
 800ced0:	bf00      	nop
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	781a      	ldrb	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3301      	adds	r3, #1
 800cef2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	781a      	ldrb	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	3301      	adds	r3, #1
 800cf00:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f7ff fabb 	bl	800c47e <SWAPBYTE>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	3301      	adds	r3, #1
 800cf14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f7ff faae 	bl	800c47e <SWAPBYTE>
 800cf22:	4603      	mov	r3, r0
 800cf24:	461a      	mov	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	3301      	adds	r3, #1
 800cf34:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f7ff faa1 	bl	800c47e <SWAPBYTE>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	461a      	mov	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	80da      	strh	r2, [r3, #6]
}
 800cf44:	bf00      	nop
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf56:	2180      	movs	r1, #128	; 0x80
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f007 ffd9 	bl	8014f10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cf5e:	2100      	movs	r1, #0
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f007 ffd5 	bl	8014f10 <USBD_LL_StallEP>
}
 800cf66:	bf00      	nop
 800cf68:	3708      	adds	r7, #8
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b086      	sub	sp, #24
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	60f8      	str	r0, [r7, #12]
 800cf76:	60b9      	str	r1, [r7, #8]
 800cf78:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d036      	beq.n	800cff2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cf88:	6938      	ldr	r0, [r7, #16]
 800cf8a:	f000 f836 	bl	800cffa <USBD_GetLen>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	3301      	adds	r3, #1
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cf9c:	7dfb      	ldrb	r3, [r7, #23]
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	7812      	ldrb	r2, [r2, #0]
 800cfa6:	701a      	strb	r2, [r3, #0]
  idx++;
 800cfa8:	7dfb      	ldrb	r3, [r7, #23]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	2203      	movs	r2, #3
 800cfb6:	701a      	strb	r2, [r3, #0]
  idx++;
 800cfb8:	7dfb      	ldrb	r3, [r7, #23]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cfbe:	e013      	b.n	800cfe8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cfc0:	7dfb      	ldrb	r3, [r7, #23]
 800cfc2:	68ba      	ldr	r2, [r7, #8]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	693a      	ldr	r2, [r7, #16]
 800cfc8:	7812      	ldrb	r2, [r2, #0]
 800cfca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	613b      	str	r3, [r7, #16]
    idx++;
 800cfd2:	7dfb      	ldrb	r3, [r7, #23]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
 800cfda:	68ba      	ldr	r2, [r7, #8]
 800cfdc:	4413      	add	r3, r2
 800cfde:	2200      	movs	r2, #0
 800cfe0:	701a      	strb	r2, [r3, #0]
    idx++;
 800cfe2:	7dfb      	ldrb	r3, [r7, #23]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1e7      	bne.n	800cfc0 <USBD_GetString+0x52>
 800cff0:	e000      	b.n	800cff4 <USBD_GetString+0x86>
    return;
 800cff2:	bf00      	nop
  }
}
 800cff4:	3718      	adds	r7, #24
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b085      	sub	sp, #20
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d002:	2300      	movs	r3, #0
 800d004:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d00a:	e005      	b.n	800d018 <USBD_GetLen+0x1e>
  {
    len++;
 800d00c:	7bfb      	ldrb	r3, [r7, #15]
 800d00e:	3301      	adds	r3, #1
 800d010:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	3301      	adds	r3, #1
 800d016:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1f5      	bne.n	800d00c <USBD_GetLen+0x12>
  }

  return len;
 800d020:	7bfb      	ldrb	r3, [r7, #15]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b084      	sub	sp, #16
 800d032:	af00      	add	r7, sp, #0
 800d034:	60f8      	str	r0, [r7, #12]
 800d036:	60b9      	str	r1, [r7, #8]
 800d038:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2202      	movs	r2, #2
 800d03e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	2100      	movs	r1, #0
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f007 ffe4 	bl	8015022 <USBD_LL_Transmit>

  return USBD_OK;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	2100      	movs	r1, #0
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f007 ffd3 	bl	8015022 <USBD_LL_Transmit>

  return USBD_OK;
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b084      	sub	sp, #16
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	60f8      	str	r0, [r7, #12]
 800d08e:	60b9      	str	r1, [r7, #8]
 800d090:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2203      	movs	r2, #3
 800d096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f007 ffd7 	bl	8015064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68ba      	ldr	r2, [r7, #8]
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f007 ffc6 	bl	8015064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0d8:	2300      	movs	r3, #0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3710      	adds	r7, #16
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2204      	movs	r2, #4
 800d0ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f007 ff92 	bl	8015022 <USBD_LL_Transmit>

  return USBD_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2205      	movs	r2, #5
 800d114:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d118:	2300      	movs	r3, #0
 800d11a:	2200      	movs	r2, #0
 800d11c:	2100      	movs	r1, #0
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f007 ffa0 	bl	8015064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
	...

0800d130 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	4603      	mov	r3, r0
 800d138:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d13a:	79fb      	ldrb	r3, [r7, #7]
 800d13c:	4a08      	ldr	r2, [pc, #32]	; (800d160 <disk_status+0x30>)
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4413      	add	r3, r2
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	79fa      	ldrb	r2, [r7, #7]
 800d148:	4905      	ldr	r1, [pc, #20]	; (800d160 <disk_status+0x30>)
 800d14a:	440a      	add	r2, r1
 800d14c:	7a12      	ldrb	r2, [r2, #8]
 800d14e:	4610      	mov	r0, r2
 800d150:	4798      	blx	r3
 800d152:	4603      	mov	r3, r0
 800d154:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d156:	7bfb      	ldrb	r3, [r7, #15]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	200007b4 	.word	0x200007b4

0800d164 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	4603      	mov	r3, r0
 800d16c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d16e:	2300      	movs	r3, #0
 800d170:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d172:	79fb      	ldrb	r3, [r7, #7]
 800d174:	4a0d      	ldr	r2, [pc, #52]	; (800d1ac <disk_initialize+0x48>)
 800d176:	5cd3      	ldrb	r3, [r2, r3]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d111      	bne.n	800d1a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d17c:	79fb      	ldrb	r3, [r7, #7]
 800d17e:	4a0b      	ldr	r2, [pc, #44]	; (800d1ac <disk_initialize+0x48>)
 800d180:	2101      	movs	r1, #1
 800d182:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d184:	79fb      	ldrb	r3, [r7, #7]
 800d186:	4a09      	ldr	r2, [pc, #36]	; (800d1ac <disk_initialize+0x48>)
 800d188:	009b      	lsls	r3, r3, #2
 800d18a:	4413      	add	r3, r2
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	79fa      	ldrb	r2, [r7, #7]
 800d192:	4906      	ldr	r1, [pc, #24]	; (800d1ac <disk_initialize+0x48>)
 800d194:	440a      	add	r2, r1
 800d196:	7a12      	ldrb	r2, [r2, #8]
 800d198:	4610      	mov	r0, r2
 800d19a:	4798      	blx	r3
 800d19c:	4603      	mov	r3, r0
 800d19e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	200007b4 	.word	0x200007b4

0800d1b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d1b0:	b590      	push	{r4, r7, lr}
 800d1b2:	b087      	sub	sp, #28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60b9      	str	r1, [r7, #8]
 800d1b8:	607a      	str	r2, [r7, #4]
 800d1ba:	603b      	str	r3, [r7, #0]
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	4a0a      	ldr	r2, [pc, #40]	; (800d1ec <disk_read+0x3c>)
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4413      	add	r3, r2
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	689c      	ldr	r4, [r3, #8]
 800d1cc:	7bfb      	ldrb	r3, [r7, #15]
 800d1ce:	4a07      	ldr	r2, [pc, #28]	; (800d1ec <disk_read+0x3c>)
 800d1d0:	4413      	add	r3, r2
 800d1d2:	7a18      	ldrb	r0, [r3, #8]
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	68b9      	ldr	r1, [r7, #8]
 800d1da:	47a0      	blx	r4
 800d1dc:	4603      	mov	r3, r0
 800d1de:	75fb      	strb	r3, [r7, #23]
  return res;
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	371c      	adds	r7, #28
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd90      	pop	{r4, r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	200007b4 	.word	0x200007b4

0800d1f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d1f0:	b590      	push	{r4, r7, lr}
 800d1f2:	b087      	sub	sp, #28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60b9      	str	r1, [r7, #8]
 800d1f8:	607a      	str	r2, [r7, #4]
 800d1fa:	603b      	str	r3, [r7, #0]
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d200:	7bfb      	ldrb	r3, [r7, #15]
 800d202:	4a0a      	ldr	r2, [pc, #40]	; (800d22c <disk_write+0x3c>)
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	68dc      	ldr	r4, [r3, #12]
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
 800d20e:	4a07      	ldr	r2, [pc, #28]	; (800d22c <disk_write+0x3c>)
 800d210:	4413      	add	r3, r2
 800d212:	7a18      	ldrb	r0, [r3, #8]
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	68b9      	ldr	r1, [r7, #8]
 800d21a:	47a0      	blx	r4
 800d21c:	4603      	mov	r3, r0
 800d21e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d220:	7dfb      	ldrb	r3, [r7, #23]
}
 800d222:	4618      	mov	r0, r3
 800d224:	371c      	adds	r7, #28
 800d226:	46bd      	mov	sp, r7
 800d228:	bd90      	pop	{r4, r7, pc}
 800d22a:	bf00      	nop
 800d22c:	200007b4 	.word	0x200007b4

0800d230 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	4603      	mov	r3, r0
 800d238:	603a      	str	r2, [r7, #0]
 800d23a:	71fb      	strb	r3, [r7, #7]
 800d23c:	460b      	mov	r3, r1
 800d23e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d240:	79fb      	ldrb	r3, [r7, #7]
 800d242:	4a09      	ldr	r2, [pc, #36]	; (800d268 <disk_ioctl+0x38>)
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	4413      	add	r3, r2
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	79fa      	ldrb	r2, [r7, #7]
 800d24e:	4906      	ldr	r1, [pc, #24]	; (800d268 <disk_ioctl+0x38>)
 800d250:	440a      	add	r2, r1
 800d252:	7a10      	ldrb	r0, [r2, #8]
 800d254:	79b9      	ldrb	r1, [r7, #6]
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	4798      	blx	r3
 800d25a:	4603      	mov	r3, r0
 800d25c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d260:	4618      	mov	r0, r3
 800d262:	3710      	adds	r7, #16
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	200007b4 	.word	0x200007b4

0800d26c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	3301      	adds	r3, #1
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d27c:	89fb      	ldrh	r3, [r7, #14]
 800d27e:	021b      	lsls	r3, r3, #8
 800d280:	b21a      	sxth	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	b21b      	sxth	r3, r3
 800d288:	4313      	orrs	r3, r2
 800d28a:	b21b      	sxth	r3, r3
 800d28c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d28e:	89fb      	ldrh	r3, [r7, #14]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d29c:	b480      	push	{r7}
 800d29e:	b085      	sub	sp, #20
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	3303      	adds	r3, #3
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	021b      	lsls	r3, r3, #8
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	3202      	adds	r2, #2
 800d2b4:	7812      	ldrb	r2, [r2, #0]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	021b      	lsls	r3, r3, #8
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	3201      	adds	r2, #1
 800d2c2:	7812      	ldrb	r2, [r2, #0]
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	021b      	lsls	r3, r3, #8
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	7812      	ldrb	r2, [r2, #0]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	60fb      	str	r3, [r7, #12]
	return rv;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d2e2:	b480      	push	{r7}
 800d2e4:	b083      	sub	sp, #12
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	1c5a      	adds	r2, r3, #1
 800d2f2:	607a      	str	r2, [r7, #4]
 800d2f4:	887a      	ldrh	r2, [r7, #2]
 800d2f6:	b2d2      	uxtb	r2, r2
 800d2f8:	701a      	strb	r2, [r3, #0]
 800d2fa:	887b      	ldrh	r3, [r7, #2]
 800d2fc:	0a1b      	lsrs	r3, r3, #8
 800d2fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	1c5a      	adds	r2, r3, #1
 800d304:	607a      	str	r2, [r7, #4]
 800d306:	887a      	ldrh	r2, [r7, #2]
 800d308:	b2d2      	uxtb	r2, r2
 800d30a:	701a      	strb	r2, [r3, #0]
}
 800d30c:	bf00      	nop
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	1c5a      	adds	r2, r3, #1
 800d326:	607a      	str	r2, [r7, #4]
 800d328:	683a      	ldr	r2, [r7, #0]
 800d32a:	b2d2      	uxtb	r2, r2
 800d32c:	701a      	strb	r2, [r3, #0]
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	0a1b      	lsrs	r3, r3, #8
 800d332:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	1c5a      	adds	r2, r3, #1
 800d338:	607a      	str	r2, [r7, #4]
 800d33a:	683a      	ldr	r2, [r7, #0]
 800d33c:	b2d2      	uxtb	r2, r2
 800d33e:	701a      	strb	r2, [r3, #0]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	0a1b      	lsrs	r3, r3, #8
 800d344:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	1c5a      	adds	r2, r3, #1
 800d34a:	607a      	str	r2, [r7, #4]
 800d34c:	683a      	ldr	r2, [r7, #0]
 800d34e:	b2d2      	uxtb	r2, r2
 800d350:	701a      	strb	r2, [r3, #0]
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	0a1b      	lsrs	r3, r3, #8
 800d356:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	1c5a      	adds	r2, r3, #1
 800d35c:	607a      	str	r2, [r7, #4]
 800d35e:	683a      	ldr	r2, [r7, #0]
 800d360:	b2d2      	uxtb	r2, r2
 800d362:	701a      	strb	r2, [r3, #0]
}
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d370:	b480      	push	{r7}
 800d372:	b087      	sub	sp, #28
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00d      	beq.n	800d3a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d38a:	693a      	ldr	r2, [r7, #16]
 800d38c:	1c53      	adds	r3, r2, #1
 800d38e:	613b      	str	r3, [r7, #16]
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	1c59      	adds	r1, r3, #1
 800d394:	6179      	str	r1, [r7, #20]
 800d396:	7812      	ldrb	r2, [r2, #0]
 800d398:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	3b01      	subs	r3, #1
 800d39e:	607b      	str	r3, [r7, #4]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1f1      	bne.n	800d38a <mem_cpy+0x1a>
	}
}
 800d3a6:	bf00      	nop
 800d3a8:	371c      	adds	r7, #28
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr

0800d3b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d3b2:	b480      	push	{r7}
 800d3b4:	b087      	sub	sp, #28
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	60f8      	str	r0, [r7, #12]
 800d3ba:	60b9      	str	r1, [r7, #8]
 800d3bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	1c5a      	adds	r2, r3, #1
 800d3c6:	617a      	str	r2, [r7, #20]
 800d3c8:	68ba      	ldr	r2, [r7, #8]
 800d3ca:	b2d2      	uxtb	r2, r2
 800d3cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	607b      	str	r3, [r7, #4]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1f3      	bne.n	800d3c2 <mem_set+0x10>
}
 800d3da:	bf00      	nop
 800d3dc:	bf00      	nop
 800d3de:	371c      	adds	r7, #28
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d3e8:	b480      	push	{r7}
 800d3ea:	b089      	sub	sp, #36	; 0x24
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	61fb      	str	r3, [r7, #28]
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	1c5a      	adds	r2, r3, #1
 800d404:	61fa      	str	r2, [r7, #28]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	4619      	mov	r1, r3
 800d40a:	69bb      	ldr	r3, [r7, #24]
 800d40c:	1c5a      	adds	r2, r3, #1
 800d40e:	61ba      	str	r2, [r7, #24]
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	1acb      	subs	r3, r1, r3
 800d414:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	3b01      	subs	r3, #1
 800d41a:	607b      	str	r3, [r7, #4]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d002      	beq.n	800d428 <mem_cmp+0x40>
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d0eb      	beq.n	800d400 <mem_cmp+0x18>

	return r;
 800d428:	697b      	ldr	r3, [r7, #20]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3724      	adds	r7, #36	; 0x24
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr

0800d436 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d436:	b480      	push	{r7}
 800d438:	b083      	sub	sp, #12
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d440:	e002      	b.n	800d448 <chk_chr+0x12>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3301      	adds	r3, #1
 800d446:	607b      	str	r3, [r7, #4]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d005      	beq.n	800d45c <chk_chr+0x26>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	461a      	mov	r2, r3
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	4293      	cmp	r3, r2
 800d45a:	d1f2      	bne.n	800d442 <chk_chr+0xc>
	return *str;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	781b      	ldrb	r3, [r3, #0]
}
 800d460:	4618      	mov	r0, r3
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d009      	beq.n	800d48e <lock_fs+0x22>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	695b      	ldr	r3, [r3, #20]
 800d47e:	4618      	mov	r0, r3
 800d480:	f003 f98d 	bl	801079e <ff_req_grant>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <lock_fs+0x22>
 800d48a:	2301      	movs	r3, #1
 800d48c:	e000      	b.n	800d490 <lock_fs+0x24>
 800d48e:	2300      	movs	r3, #0
}
 800d490:	4618      	mov	r0, r3
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00d      	beq.n	800d4c6 <unlock_fs+0x2e>
 800d4aa:	78fb      	ldrb	r3, [r7, #3]
 800d4ac:	2b0c      	cmp	r3, #12
 800d4ae:	d00a      	beq.n	800d4c6 <unlock_fs+0x2e>
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	2b0b      	cmp	r3, #11
 800d4b4:	d007      	beq.n	800d4c6 <unlock_fs+0x2e>
 800d4b6:	78fb      	ldrb	r3, [r7, #3]
 800d4b8:	2b0f      	cmp	r3, #15
 800d4ba:	d004      	beq.n	800d4c6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	695b      	ldr	r3, [r3, #20]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f003 f981 	bl	80107c8 <ff_rel_grant>
	}
}
 800d4c6:	bf00      	nop
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
	...

0800d4d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d4da:	2300      	movs	r3, #0
 800d4dc:	60bb      	str	r3, [r7, #8]
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	60fb      	str	r3, [r7, #12]
 800d4e2:	e029      	b.n	800d538 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d4e4:	4a27      	ldr	r2, [pc, #156]	; (800d584 <chk_lock+0xb4>)
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	011b      	lsls	r3, r3, #4
 800d4ea:	4413      	add	r3, r2
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d01d      	beq.n	800d52e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d4f2:	4a24      	ldr	r2, [pc, #144]	; (800d584 <chk_lock+0xb4>)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	011b      	lsls	r3, r3, #4
 800d4f8:	4413      	add	r3, r2
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	429a      	cmp	r2, r3
 800d502:	d116      	bne.n	800d532 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d504:	4a1f      	ldr	r2, [pc, #124]	; (800d584 <chk_lock+0xb4>)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	011b      	lsls	r3, r3, #4
 800d50a:	4413      	add	r3, r2
 800d50c:	3304      	adds	r3, #4
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d514:	429a      	cmp	r2, r3
 800d516:	d10c      	bne.n	800d532 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d518:	4a1a      	ldr	r2, [pc, #104]	; (800d584 <chk_lock+0xb4>)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	011b      	lsls	r3, r3, #4
 800d51e:	4413      	add	r3, r2
 800d520:	3308      	adds	r3, #8
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d528:	429a      	cmp	r2, r3
 800d52a:	d102      	bne.n	800d532 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d52c:	e007      	b.n	800d53e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d52e:	2301      	movs	r3, #1
 800d530:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	3301      	adds	r3, #1
 800d536:	60fb      	str	r3, [r7, #12]
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d9d2      	bls.n	800d4e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2b02      	cmp	r3, #2
 800d542:	d109      	bne.n	800d558 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d102      	bne.n	800d550 <chk_lock+0x80>
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d101      	bne.n	800d554 <chk_lock+0x84>
 800d550:	2300      	movs	r3, #0
 800d552:	e010      	b.n	800d576 <chk_lock+0xa6>
 800d554:	2312      	movs	r3, #18
 800d556:	e00e      	b.n	800d576 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d108      	bne.n	800d570 <chk_lock+0xa0>
 800d55e:	4a09      	ldr	r2, [pc, #36]	; (800d584 <chk_lock+0xb4>)
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	011b      	lsls	r3, r3, #4
 800d564:	4413      	add	r3, r2
 800d566:	330c      	adds	r3, #12
 800d568:	881b      	ldrh	r3, [r3, #0]
 800d56a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d56e:	d101      	bne.n	800d574 <chk_lock+0xa4>
 800d570:	2310      	movs	r3, #16
 800d572:	e000      	b.n	800d576 <chk_lock+0xa6>
 800d574:	2300      	movs	r3, #0
}
 800d576:	4618      	mov	r0, r3
 800d578:	3714      	adds	r7, #20
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	20000794 	.word	0x20000794

0800d588 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d58e:	2300      	movs	r3, #0
 800d590:	607b      	str	r3, [r7, #4]
 800d592:	e002      	b.n	800d59a <enq_lock+0x12>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	3301      	adds	r3, #1
 800d598:	607b      	str	r3, [r7, #4]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d806      	bhi.n	800d5ae <enq_lock+0x26>
 800d5a0:	4a09      	ldr	r2, [pc, #36]	; (800d5c8 <enq_lock+0x40>)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	011b      	lsls	r3, r3, #4
 800d5a6:	4413      	add	r3, r2
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d1f2      	bne.n	800d594 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	bf14      	ite	ne
 800d5b4:	2301      	movne	r3, #1
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	370c      	adds	r7, #12
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr
 800d5c6:	bf00      	nop
 800d5c8:	20000794 	.word	0x20000794

0800d5cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	60fb      	str	r3, [r7, #12]
 800d5da:	e01f      	b.n	800d61c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d5dc:	4a41      	ldr	r2, [pc, #260]	; (800d6e4 <inc_lock+0x118>)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	011b      	lsls	r3, r3, #4
 800d5e2:	4413      	add	r3, r2
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d113      	bne.n	800d616 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d5ee:	4a3d      	ldr	r2, [pc, #244]	; (800d6e4 <inc_lock+0x118>)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	011b      	lsls	r3, r3, #4
 800d5f4:	4413      	add	r3, r2
 800d5f6:	3304      	adds	r3, #4
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d109      	bne.n	800d616 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d602:	4a38      	ldr	r2, [pc, #224]	; (800d6e4 <inc_lock+0x118>)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	011b      	lsls	r3, r3, #4
 800d608:	4413      	add	r3, r2
 800d60a:	3308      	adds	r3, #8
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d612:	429a      	cmp	r2, r3
 800d614:	d006      	beq.n	800d624 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	3301      	adds	r3, #1
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d9dc      	bls.n	800d5dc <inc_lock+0x10>
 800d622:	e000      	b.n	800d626 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d624:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d132      	bne.n	800d692 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d62c:	2300      	movs	r3, #0
 800d62e:	60fb      	str	r3, [r7, #12]
 800d630:	e002      	b.n	800d638 <inc_lock+0x6c>
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	3301      	adds	r3, #1
 800d636:	60fb      	str	r3, [r7, #12]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d806      	bhi.n	800d64c <inc_lock+0x80>
 800d63e:	4a29      	ldr	r2, [pc, #164]	; (800d6e4 <inc_lock+0x118>)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	011b      	lsls	r3, r3, #4
 800d644:	4413      	add	r3, r2
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d1f2      	bne.n	800d632 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2b02      	cmp	r3, #2
 800d650:	d101      	bne.n	800d656 <inc_lock+0x8a>
 800d652:	2300      	movs	r3, #0
 800d654:	e040      	b.n	800d6d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	4922      	ldr	r1, [pc, #136]	; (800d6e4 <inc_lock+0x118>)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	011b      	lsls	r3, r3, #4
 800d660:	440b      	add	r3, r1
 800d662:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	689a      	ldr	r2, [r3, #8]
 800d668:	491e      	ldr	r1, [pc, #120]	; (800d6e4 <inc_lock+0x118>)
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	011b      	lsls	r3, r3, #4
 800d66e:	440b      	add	r3, r1
 800d670:	3304      	adds	r3, #4
 800d672:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	695a      	ldr	r2, [r3, #20]
 800d678:	491a      	ldr	r1, [pc, #104]	; (800d6e4 <inc_lock+0x118>)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	011b      	lsls	r3, r3, #4
 800d67e:	440b      	add	r3, r1
 800d680:	3308      	adds	r3, #8
 800d682:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d684:	4a17      	ldr	r2, [pc, #92]	; (800d6e4 <inc_lock+0x118>)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	011b      	lsls	r3, r3, #4
 800d68a:	4413      	add	r3, r2
 800d68c:	330c      	adds	r3, #12
 800d68e:	2200      	movs	r2, #0
 800d690:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d009      	beq.n	800d6ac <inc_lock+0xe0>
 800d698:	4a12      	ldr	r2, [pc, #72]	; (800d6e4 <inc_lock+0x118>)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	011b      	lsls	r3, r3, #4
 800d69e:	4413      	add	r3, r2
 800d6a0:	330c      	adds	r3, #12
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d001      	beq.n	800d6ac <inc_lock+0xe0>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	e015      	b.n	800d6d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d108      	bne.n	800d6c4 <inc_lock+0xf8>
 800d6b2:	4a0c      	ldr	r2, [pc, #48]	; (800d6e4 <inc_lock+0x118>)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	011b      	lsls	r3, r3, #4
 800d6b8:	4413      	add	r3, r2
 800d6ba:	330c      	adds	r3, #12
 800d6bc:	881b      	ldrh	r3, [r3, #0]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	e001      	b.n	800d6c8 <inc_lock+0xfc>
 800d6c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d6c8:	4906      	ldr	r1, [pc, #24]	; (800d6e4 <inc_lock+0x118>)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	011b      	lsls	r3, r3, #4
 800d6ce:	440b      	add	r3, r1
 800d6d0:	330c      	adds	r3, #12
 800d6d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	3301      	adds	r3, #1
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3714      	adds	r7, #20
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr
 800d6e4:	20000794 	.word	0x20000794

0800d6e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	607b      	str	r3, [r7, #4]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d825      	bhi.n	800d748 <dec_lock+0x60>
		n = Files[i].ctr;
 800d6fc:	4a17      	ldr	r2, [pc, #92]	; (800d75c <dec_lock+0x74>)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	011b      	lsls	r3, r3, #4
 800d702:	4413      	add	r3, r2
 800d704:	330c      	adds	r3, #12
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d70a:	89fb      	ldrh	r3, [r7, #14]
 800d70c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d710:	d101      	bne.n	800d716 <dec_lock+0x2e>
 800d712:	2300      	movs	r3, #0
 800d714:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d716:	89fb      	ldrh	r3, [r7, #14]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d002      	beq.n	800d722 <dec_lock+0x3a>
 800d71c:	89fb      	ldrh	r3, [r7, #14]
 800d71e:	3b01      	subs	r3, #1
 800d720:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d722:	4a0e      	ldr	r2, [pc, #56]	; (800d75c <dec_lock+0x74>)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	011b      	lsls	r3, r3, #4
 800d728:	4413      	add	r3, r2
 800d72a:	330c      	adds	r3, #12
 800d72c:	89fa      	ldrh	r2, [r7, #14]
 800d72e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d730:	89fb      	ldrh	r3, [r7, #14]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d105      	bne.n	800d742 <dec_lock+0x5a>
 800d736:	4a09      	ldr	r2, [pc, #36]	; (800d75c <dec_lock+0x74>)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	011b      	lsls	r3, r3, #4
 800d73c:	4413      	add	r3, r2
 800d73e:	2200      	movs	r2, #0
 800d740:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d742:	2300      	movs	r3, #0
 800d744:	737b      	strb	r3, [r7, #13]
 800d746:	e001      	b.n	800d74c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d748:	2302      	movs	r3, #2
 800d74a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d74c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3714      	adds	r7, #20
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	20000794 	.word	0x20000794

0800d760 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d760:	b480      	push	{r7}
 800d762:	b085      	sub	sp, #20
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d768:	2300      	movs	r3, #0
 800d76a:	60fb      	str	r3, [r7, #12]
 800d76c:	e010      	b.n	800d790 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d76e:	4a0d      	ldr	r2, [pc, #52]	; (800d7a4 <clear_lock+0x44>)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	011b      	lsls	r3, r3, #4
 800d774:	4413      	add	r3, r2
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d105      	bne.n	800d78a <clear_lock+0x2a>
 800d77e:	4a09      	ldr	r2, [pc, #36]	; (800d7a4 <clear_lock+0x44>)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	011b      	lsls	r3, r3, #4
 800d784:	4413      	add	r3, r2
 800d786:	2200      	movs	r2, #0
 800d788:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3301      	adds	r3, #1
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b01      	cmp	r3, #1
 800d794:	d9eb      	bls.n	800d76e <clear_lock+0xe>
	}
}
 800d796:	bf00      	nop
 800d798:	bf00      	nop
 800d79a:	3714      	adds	r7, #20
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr
 800d7a4:	20000794 	.word	0x20000794

0800d7a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b086      	sub	sp, #24
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	78db      	ldrb	r3, [r3, #3]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d034      	beq.n	800d826 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	7858      	ldrb	r0, [r3, #1]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	697a      	ldr	r2, [r7, #20]
 800d7d0:	f7ff fd0e 	bl	800d1f0 <disk_write>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d002      	beq.n	800d7e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	73fb      	strb	r3, [r7, #15]
 800d7de:	e022      	b.n	800d826 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ea:	697a      	ldr	r2, [r7, #20]
 800d7ec:	1ad2      	subs	r2, r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d217      	bcs.n	800d826 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	789b      	ldrb	r3, [r3, #2]
 800d7fa:	613b      	str	r3, [r7, #16]
 800d7fc:	e010      	b.n	800d820 <sync_window+0x78>
					wsect += fs->fsize;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d802:	697a      	ldr	r2, [r7, #20]
 800d804:	4413      	add	r3, r2
 800d806:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	7858      	ldrb	r0, [r3, #1]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d812:	2301      	movs	r3, #1
 800d814:	697a      	ldr	r2, [r7, #20]
 800d816:	f7ff fceb 	bl	800d1f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	3b01      	subs	r3, #1
 800d81e:	613b      	str	r3, [r7, #16]
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	2b01      	cmp	r3, #1
 800d824:	d8eb      	bhi.n	800d7fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d826:	7bfb      	ldrb	r3, [r7, #15]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3718      	adds	r7, #24
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d83a:	2300      	movs	r3, #0
 800d83c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d842:	683a      	ldr	r2, [r7, #0]
 800d844:	429a      	cmp	r2, r3
 800d846:	d01b      	beq.n	800d880 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7ff ffad 	bl	800d7a8 <sync_window>
 800d84e:	4603      	mov	r3, r0
 800d850:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d852:	7bfb      	ldrb	r3, [r7, #15]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d113      	bne.n	800d880 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	7858      	ldrb	r0, [r3, #1]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d862:	2301      	movs	r3, #1
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	f7ff fca3 	bl	800d1b0 <disk_read>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d004      	beq.n	800d87a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d874:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d876:	2301      	movs	r3, #1
 800d878:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800d880:	7bfb      	ldrb	r3, [r7, #15]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
	...

0800d88c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7ff ff87 	bl	800d7a8 <sync_window>
 800d89a:	4603      	mov	r3, r0
 800d89c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d89e:	7bfb      	ldrb	r3, [r7, #15]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d159      	bne.n	800d958 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	2b03      	cmp	r3, #3
 800d8aa:	d149      	bne.n	800d940 <sync_fs+0xb4>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	791b      	ldrb	r3, [r3, #4]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d145      	bne.n	800d940 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	899b      	ldrh	r3, [r3, #12]
 800d8be:	461a      	mov	r2, r3
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	f7ff fd76 	bl	800d3b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	333c      	adds	r3, #60	; 0x3c
 800d8ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d8ce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff fd05 	bl	800d2e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	333c      	adds	r3, #60	; 0x3c
 800d8dc:	4921      	ldr	r1, [pc, #132]	; (800d964 <sync_fs+0xd8>)
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff fd1a 	bl	800d318 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	333c      	adds	r3, #60	; 0x3c
 800d8e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d8ec:	491e      	ldr	r1, [pc, #120]	; (800d968 <sync_fs+0xdc>)
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7ff fd12 	bl	800d318 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	333c      	adds	r3, #60	; 0x3c
 800d8f8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	69db      	ldr	r3, [r3, #28]
 800d900:	4619      	mov	r1, r3
 800d902:	4610      	mov	r0, r2
 800d904:	f7ff fd08 	bl	800d318 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	333c      	adds	r3, #60	; 0x3c
 800d90c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	699b      	ldr	r3, [r3, #24]
 800d914:	4619      	mov	r1, r3
 800d916:	4610      	mov	r0, r2
 800d918:	f7ff fcfe 	bl	800d318 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d920:	1c5a      	adds	r2, r3, #1
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	7858      	ldrb	r0, [r3, #1]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d934:	2301      	movs	r3, #1
 800d936:	f7ff fc5b 	bl	800d1f0 <disk_write>
			fs->fsi_flag = 0;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	785b      	ldrb	r3, [r3, #1]
 800d944:	2200      	movs	r2, #0
 800d946:	2100      	movs	r1, #0
 800d948:	4618      	mov	r0, r3
 800d94a:	f7ff fc71 	bl	800d230 <disk_ioctl>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d001      	beq.n	800d958 <sync_fs+0xcc>
 800d954:	2301      	movs	r3, #1
 800d956:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d958:	7bfb      	ldrb	r3, [r7, #15]
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3710      	adds	r7, #16
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	41615252 	.word	0x41615252
 800d968:	61417272 	.word	0x61417272

0800d96c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	3b02      	subs	r3, #2
 800d97a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6a1b      	ldr	r3, [r3, #32]
 800d980:	3b02      	subs	r3, #2
 800d982:	683a      	ldr	r2, [r7, #0]
 800d984:	429a      	cmp	r2, r3
 800d986:	d301      	bcc.n	800d98c <clust2sect+0x20>
 800d988:	2300      	movs	r3, #0
 800d98a:	e008      	b.n	800d99e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	895b      	ldrh	r3, [r3, #10]
 800d990:	461a      	mov	r2, r3
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	fb03 f202 	mul.w	r2, r3, r2
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99c:	4413      	add	r3, r2
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	370c      	adds	r7, #12
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b086      	sub	sp, #24
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
 800d9b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d904      	bls.n	800d9ca <get_fat+0x20>
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	6a1b      	ldr	r3, [r3, #32]
 800d9c4:	683a      	ldr	r2, [r7, #0]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d302      	bcc.n	800d9d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	617b      	str	r3, [r7, #20]
 800d9ce:	e0bb      	b.n	800db48 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	2b03      	cmp	r3, #3
 800d9dc:	f000 8083 	beq.w	800dae6 <get_fat+0x13c>
 800d9e0:	2b03      	cmp	r3, #3
 800d9e2:	f300 80a7 	bgt.w	800db34 <get_fat+0x18a>
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d002      	beq.n	800d9f0 <get_fat+0x46>
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d056      	beq.n	800da9c <get_fat+0xf2>
 800d9ee:	e0a1      	b.n	800db34 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	085b      	lsrs	r3, r3, #1
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	899b      	ldrh	r3, [r3, #12]
 800da06:	4619      	mov	r1, r3
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800da0e:	4413      	add	r3, r2
 800da10:	4619      	mov	r1, r3
 800da12:	6938      	ldr	r0, [r7, #16]
 800da14:	f7ff ff0c 	bl	800d830 <move_window>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f040 808d 	bne.w	800db3a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	1c5a      	adds	r2, r3, #1
 800da24:	60fa      	str	r2, [r7, #12]
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	8992      	ldrh	r2, [r2, #12]
 800da2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800da2e:	fb02 f201 	mul.w	r2, r2, r1
 800da32:	1a9b      	subs	r3, r3, r2
 800da34:	693a      	ldr	r2, [r7, #16]
 800da36:	4413      	add	r3, r2
 800da38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	899b      	ldrh	r3, [r3, #12]
 800da46:	4619      	mov	r1, r3
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800da4e:	4413      	add	r3, r2
 800da50:	4619      	mov	r1, r3
 800da52:	6938      	ldr	r0, [r7, #16]
 800da54:	f7ff feec 	bl	800d830 <move_window>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d16f      	bne.n	800db3e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	899b      	ldrh	r3, [r3, #12]
 800da62:	461a      	mov	r2, r3
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	fbb3 f1f2 	udiv	r1, r3, r2
 800da6a:	fb02 f201 	mul.w	r2, r2, r1
 800da6e:	1a9b      	subs	r3, r3, r2
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	4413      	add	r3, r2
 800da74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da78:	021b      	lsls	r3, r3, #8
 800da7a:	461a      	mov	r2, r3
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	4313      	orrs	r3, r2
 800da80:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	f003 0301 	and.w	r3, r3, #1
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <get_fat+0xe8>
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	091b      	lsrs	r3, r3, #4
 800da90:	e002      	b.n	800da98 <get_fat+0xee>
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da98:	617b      	str	r3, [r7, #20]
			break;
 800da9a:	e055      	b.n	800db48 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	899b      	ldrh	r3, [r3, #12]
 800daa4:	085b      	lsrs	r3, r3, #1
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	4619      	mov	r1, r3
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	fbb3 f3f1 	udiv	r3, r3, r1
 800dab0:	4413      	add	r3, r2
 800dab2:	4619      	mov	r1, r3
 800dab4:	6938      	ldr	r0, [r7, #16]
 800dab6:	f7ff febb 	bl	800d830 <move_window>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d140      	bne.n	800db42 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	005b      	lsls	r3, r3, #1
 800daca:	693a      	ldr	r2, [r7, #16]
 800dacc:	8992      	ldrh	r2, [r2, #12]
 800dace:	fbb3 f0f2 	udiv	r0, r3, r2
 800dad2:	fb02 f200 	mul.w	r2, r2, r0
 800dad6:	1a9b      	subs	r3, r3, r2
 800dad8:	440b      	add	r3, r1
 800dada:	4618      	mov	r0, r3
 800dadc:	f7ff fbc6 	bl	800d26c <ld_word>
 800dae0:	4603      	mov	r3, r0
 800dae2:	617b      	str	r3, [r7, #20]
			break;
 800dae4:	e030      	b.n	800db48 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	899b      	ldrh	r3, [r3, #12]
 800daee:	089b      	lsrs	r3, r3, #2
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	4619      	mov	r1, r3
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800dafa:	4413      	add	r3, r2
 800dafc:	4619      	mov	r1, r3
 800dafe:	6938      	ldr	r0, [r7, #16]
 800db00:	f7ff fe96 	bl	800d830 <move_window>
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d11d      	bne.n	800db46 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	693a      	ldr	r2, [r7, #16]
 800db16:	8992      	ldrh	r2, [r2, #12]
 800db18:	fbb3 f0f2 	udiv	r0, r3, r2
 800db1c:	fb02 f200 	mul.w	r2, r2, r0
 800db20:	1a9b      	subs	r3, r3, r2
 800db22:	440b      	add	r3, r1
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff fbb9 	bl	800d29c <ld_dword>
 800db2a:	4603      	mov	r3, r0
 800db2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800db30:	617b      	str	r3, [r7, #20]
			break;
 800db32:	e009      	b.n	800db48 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800db34:	2301      	movs	r3, #1
 800db36:	617b      	str	r3, [r7, #20]
 800db38:	e006      	b.n	800db48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db3a:	bf00      	nop
 800db3c:	e004      	b.n	800db48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db3e:	bf00      	nop
 800db40:	e002      	b.n	800db48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db42:	bf00      	nop
 800db44:	e000      	b.n	800db48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db46:	bf00      	nop
		}
	}

	return val;
 800db48:	697b      	ldr	r3, [r7, #20]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3718      	adds	r7, #24
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800db52:	b590      	push	{r4, r7, lr}
 800db54:	b089      	sub	sp, #36	; 0x24
 800db56:	af00      	add	r7, sp, #0
 800db58:	60f8      	str	r0, [r7, #12]
 800db5a:	60b9      	str	r1, [r7, #8]
 800db5c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800db5e:	2302      	movs	r3, #2
 800db60:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	2b01      	cmp	r3, #1
 800db66:	f240 8102 	bls.w	800dd6e <put_fat+0x21c>
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6a1b      	ldr	r3, [r3, #32]
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	429a      	cmp	r2, r3
 800db72:	f080 80fc 	bcs.w	800dd6e <put_fat+0x21c>
		switch (fs->fs_type) {
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2b03      	cmp	r3, #3
 800db7c:	f000 80b6 	beq.w	800dcec <put_fat+0x19a>
 800db80:	2b03      	cmp	r3, #3
 800db82:	f300 80fd 	bgt.w	800dd80 <put_fat+0x22e>
 800db86:	2b01      	cmp	r3, #1
 800db88:	d003      	beq.n	800db92 <put_fat+0x40>
 800db8a:	2b02      	cmp	r3, #2
 800db8c:	f000 8083 	beq.w	800dc96 <put_fat+0x144>
 800db90:	e0f6      	b.n	800dd80 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	61bb      	str	r3, [r7, #24]
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	085b      	lsrs	r3, r3, #1
 800db9a:	69ba      	ldr	r2, [r7, #24]
 800db9c:	4413      	add	r3, r2
 800db9e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	899b      	ldrh	r3, [r3, #12]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbb0:	4413      	add	r3, r2
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	68f8      	ldr	r0, [r7, #12]
 800dbb6:	f7ff fe3b 	bl	800d830 <move_window>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dbbe:	7ffb      	ldrb	r3, [r7, #31]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f040 80d6 	bne.w	800dd72 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	1c5a      	adds	r2, r3, #1
 800dbd0:	61ba      	str	r2, [r7, #24]
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	8992      	ldrh	r2, [r2, #12]
 800dbd6:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbda:	fb02 f200 	mul.w	r2, r2, r0
 800dbde:	1a9b      	subs	r3, r3, r2
 800dbe0:	440b      	add	r3, r1
 800dbe2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	f003 0301 	and.w	r3, r3, #1
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00d      	beq.n	800dc0a <put_fat+0xb8>
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	b25b      	sxtb	r3, r3
 800dbf4:	f003 030f 	and.w	r3, r3, #15
 800dbf8:	b25a      	sxtb	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	011b      	lsls	r3, r3, #4
 800dc00:	b25b      	sxtb	r3, r3
 800dc02:	4313      	orrs	r3, r2
 800dc04:	b25b      	sxtb	r3, r3
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	e001      	b.n	800dc0e <put_fat+0xbc>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	697a      	ldr	r2, [r7, #20]
 800dc10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2201      	movs	r2, #1
 800dc16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	899b      	ldrh	r3, [r3, #12]
 800dc20:	4619      	mov	r1, r3
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc28:	4413      	add	r3, r2
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f7ff fdff 	bl	800d830 <move_window>
 800dc32:	4603      	mov	r3, r0
 800dc34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc36:	7ffb      	ldrb	r3, [r7, #31]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f040 809c 	bne.w	800dd76 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	899b      	ldrh	r3, [r3, #12]
 800dc48:	461a      	mov	r2, r3
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc50:	fb02 f200 	mul.w	r2, r2, r0
 800dc54:	1a9b      	subs	r3, r3, r2
 800dc56:	440b      	add	r3, r1
 800dc58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	f003 0301 	and.w	r3, r3, #1
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d003      	beq.n	800dc6c <put_fat+0x11a>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	091b      	lsrs	r3, r3, #4
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	e00e      	b.n	800dc8a <put_fat+0x138>
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	b25b      	sxtb	r3, r3
 800dc72:	f023 030f 	bic.w	r3, r3, #15
 800dc76:	b25a      	sxtb	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	0a1b      	lsrs	r3, r3, #8
 800dc7c:	b25b      	sxtb	r3, r3
 800dc7e:	f003 030f 	and.w	r3, r3, #15
 800dc82:	b25b      	sxtb	r3, r3
 800dc84:	4313      	orrs	r3, r2
 800dc86:	b25b      	sxtb	r3, r3
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	697a      	ldr	r2, [r7, #20]
 800dc8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2201      	movs	r2, #1
 800dc92:	70da      	strb	r2, [r3, #3]
			break;
 800dc94:	e074      	b.n	800dd80 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	899b      	ldrh	r3, [r3, #12]
 800dc9e:	085b      	lsrs	r3, r3, #1
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	4619      	mov	r1, r3
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcaa:	4413      	add	r3, r2
 800dcac:	4619      	mov	r1, r3
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	f7ff fdbe 	bl	800d830 <move_window>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcb8:	7ffb      	ldrb	r3, [r7, #31]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d15d      	bne.n	800dd7a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	005b      	lsls	r3, r3, #1
 800dcc8:	68fa      	ldr	r2, [r7, #12]
 800dcca:	8992      	ldrh	r2, [r2, #12]
 800dccc:	fbb3 f0f2 	udiv	r0, r3, r2
 800dcd0:	fb02 f200 	mul.w	r2, r2, r0
 800dcd4:	1a9b      	subs	r3, r3, r2
 800dcd6:	440b      	add	r3, r1
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	b292      	uxth	r2, r2
 800dcdc:	4611      	mov	r1, r2
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7ff faff 	bl	800d2e2 <st_word>
			fs->wflag = 1;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2201      	movs	r2, #1
 800dce8:	70da      	strb	r2, [r3, #3]
			break;
 800dcea:	e049      	b.n	800dd80 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	899b      	ldrh	r3, [r3, #12]
 800dcf4:	089b      	lsrs	r3, r3, #2
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd00:	4413      	add	r3, r2
 800dd02:	4619      	mov	r1, r3
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	f7ff fd93 	bl	800d830 <move_window>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd0e:	7ffb      	ldrb	r3, [r7, #31]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d134      	bne.n	800dd7e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	8992      	ldrh	r2, [r2, #12]
 800dd28:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd2c:	fb02 f200 	mul.w	r2, r2, r0
 800dd30:	1a9b      	subs	r3, r3, r2
 800dd32:	440b      	add	r3, r1
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7ff fab1 	bl	800d29c <ld_dword>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dd40:	4323      	orrs	r3, r4
 800dd42:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	8992      	ldrh	r2, [r2, #12]
 800dd52:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd56:	fb02 f200 	mul.w	r2, r2, r0
 800dd5a:	1a9b      	subs	r3, r3, r2
 800dd5c:	440b      	add	r3, r1
 800dd5e:	6879      	ldr	r1, [r7, #4]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7ff fad9 	bl	800d318 <st_dword>
			fs->wflag = 1;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2201      	movs	r2, #1
 800dd6a:	70da      	strb	r2, [r3, #3]
			break;
 800dd6c:	e008      	b.n	800dd80 <put_fat+0x22e>
		}
	}
 800dd6e:	bf00      	nop
 800dd70:	e006      	b.n	800dd80 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dd72:	bf00      	nop
 800dd74:	e004      	b.n	800dd80 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dd76:	bf00      	nop
 800dd78:	e002      	b.n	800dd80 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dd7a:	bf00      	nop
 800dd7c:	e000      	b.n	800dd80 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dd7e:	bf00      	nop
	return res;
 800dd80:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3724      	adds	r7, #36	; 0x24
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd90      	pop	{r4, r7, pc}

0800dd8a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b088      	sub	sp, #32
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	60f8      	str	r0, [r7, #12]
 800dd92:	60b9      	str	r1, [r7, #8]
 800dd94:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dd96:	2300      	movs	r3, #0
 800dd98:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d904      	bls.n	800ddb0 <remove_chain+0x26>
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	6a1b      	ldr	r3, [r3, #32]
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d301      	bcc.n	800ddb4 <remove_chain+0x2a>
 800ddb0:	2302      	movs	r3, #2
 800ddb2:	e04b      	b.n	800de4c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00c      	beq.n	800ddd4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ddba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddbe:	6879      	ldr	r1, [r7, #4]
 800ddc0:	69b8      	ldr	r0, [r7, #24]
 800ddc2:	f7ff fec6 	bl	800db52 <put_fat>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ddca:	7ffb      	ldrb	r3, [r7, #31]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d001      	beq.n	800ddd4 <remove_chain+0x4a>
 800ddd0:	7ffb      	ldrb	r3, [r7, #31]
 800ddd2:	e03b      	b.n	800de4c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ddd4:	68b9      	ldr	r1, [r7, #8]
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f7ff fde7 	bl	800d9aa <get_fat>
 800dddc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d031      	beq.n	800de48 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	d101      	bne.n	800ddee <remove_chain+0x64>
 800ddea:	2302      	movs	r3, #2
 800ddec:	e02e      	b.n	800de4c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddf4:	d101      	bne.n	800ddfa <remove_chain+0x70>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e028      	b.n	800de4c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	68b9      	ldr	r1, [r7, #8]
 800ddfe:	69b8      	ldr	r0, [r7, #24]
 800de00:	f7ff fea7 	bl	800db52 <put_fat>
 800de04:	4603      	mov	r3, r0
 800de06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800de08:	7ffb      	ldrb	r3, [r7, #31]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d001      	beq.n	800de12 <remove_chain+0x88>
 800de0e:	7ffb      	ldrb	r3, [r7, #31]
 800de10:	e01c      	b.n	800de4c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	69da      	ldr	r2, [r3, #28]
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	3b02      	subs	r3, #2
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d20b      	bcs.n	800de38 <remove_chain+0xae>
			fs->free_clst++;
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	69db      	ldr	r3, [r3, #28]
 800de24:	1c5a      	adds	r2, r3, #1
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	791b      	ldrb	r3, [r3, #4]
 800de2e:	f043 0301 	orr.w	r3, r3, #1
 800de32:	b2da      	uxtb	r2, r3
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	6a1b      	ldr	r3, [r3, #32]
 800de40:	68ba      	ldr	r2, [r7, #8]
 800de42:	429a      	cmp	r2, r3
 800de44:	d3c6      	bcc.n	800ddd4 <remove_chain+0x4a>
 800de46:	e000      	b.n	800de4a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800de48:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800de4a:	2300      	movs	r3, #0
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3720      	adds	r7, #32
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b088      	sub	sp, #32
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10d      	bne.n	800de86 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	699b      	ldr	r3, [r3, #24]
 800de6e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d004      	beq.n	800de80 <create_chain+0x2c>
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	6a1b      	ldr	r3, [r3, #32]
 800de7a:	69ba      	ldr	r2, [r7, #24]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d31b      	bcc.n	800deb8 <create_chain+0x64>
 800de80:	2301      	movs	r3, #1
 800de82:	61bb      	str	r3, [r7, #24]
 800de84:	e018      	b.n	800deb8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800de86:	6839      	ldr	r1, [r7, #0]
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7ff fd8e 	bl	800d9aa <get_fat>
 800de8e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2b01      	cmp	r3, #1
 800de94:	d801      	bhi.n	800de9a <create_chain+0x46>
 800de96:	2301      	movs	r3, #1
 800de98:	e070      	b.n	800df7c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dea0:	d101      	bne.n	800dea6 <create_chain+0x52>
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	e06a      	b.n	800df7c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	6a1b      	ldr	r3, [r3, #32]
 800deaa:	68fa      	ldr	r2, [r7, #12]
 800deac:	429a      	cmp	r2, r3
 800deae:	d201      	bcs.n	800deb4 <create_chain+0x60>
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	e063      	b.n	800df7c <create_chain+0x128>
		scl = clst;
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	3301      	adds	r3, #1
 800dec0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	6a1b      	ldr	r3, [r3, #32]
 800dec6:	69fa      	ldr	r2, [r7, #28]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d307      	bcc.n	800dedc <create_chain+0x88>
				ncl = 2;
 800decc:	2302      	movs	r3, #2
 800dece:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ded0:	69fa      	ldr	r2, [r7, #28]
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d901      	bls.n	800dedc <create_chain+0x88>
 800ded8:	2300      	movs	r3, #0
 800deda:	e04f      	b.n	800df7c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dedc:	69f9      	ldr	r1, [r7, #28]
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7ff fd63 	bl	800d9aa <get_fat>
 800dee4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00e      	beq.n	800df0a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d003      	beq.n	800defa <create_chain+0xa6>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800def8:	d101      	bne.n	800defe <create_chain+0xaa>
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	e03e      	b.n	800df7c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800defe:	69fa      	ldr	r2, [r7, #28]
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	429a      	cmp	r2, r3
 800df04:	d1da      	bne.n	800debc <create_chain+0x68>
 800df06:	2300      	movs	r3, #0
 800df08:	e038      	b.n	800df7c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800df0a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800df0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df10:	69f9      	ldr	r1, [r7, #28]
 800df12:	6938      	ldr	r0, [r7, #16]
 800df14:	f7ff fe1d 	bl	800db52 <put_fat>
 800df18:	4603      	mov	r3, r0
 800df1a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800df1c:	7dfb      	ldrb	r3, [r7, #23]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d109      	bne.n	800df36 <create_chain+0xe2>
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d006      	beq.n	800df36 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800df28:	69fa      	ldr	r2, [r7, #28]
 800df2a:	6839      	ldr	r1, [r7, #0]
 800df2c:	6938      	ldr	r0, [r7, #16]
 800df2e:	f7ff fe10 	bl	800db52 <put_fat>
 800df32:	4603      	mov	r3, r0
 800df34:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800df36:	7dfb      	ldrb	r3, [r7, #23]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d116      	bne.n	800df6a <create_chain+0x116>
		fs->last_clst = ncl;
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	69fa      	ldr	r2, [r7, #28]
 800df40:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	69da      	ldr	r2, [r3, #28]
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	6a1b      	ldr	r3, [r3, #32]
 800df4a:	3b02      	subs	r3, #2
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d804      	bhi.n	800df5a <create_chain+0x106>
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	69db      	ldr	r3, [r3, #28]
 800df54:	1e5a      	subs	r2, r3, #1
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	791b      	ldrb	r3, [r3, #4]
 800df5e:	f043 0301 	orr.w	r3, r3, #1
 800df62:	b2da      	uxtb	r2, r3
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	711a      	strb	r2, [r3, #4]
 800df68:	e007      	b.n	800df7a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d102      	bne.n	800df76 <create_chain+0x122>
 800df70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df74:	e000      	b.n	800df78 <create_chain+0x124>
 800df76:	2301      	movs	r3, #1
 800df78:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800df7a:	69fb      	ldr	r3, [r7, #28]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3720      	adds	r7, #32
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800df84:	b480      	push	{r7}
 800df86:	b087      	sub	sp, #28
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df98:	3304      	adds	r3, #4
 800df9a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	899b      	ldrh	r3, [r3, #12]
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	8952      	ldrh	r2, [r2, #10]
 800dfac:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	1d1a      	adds	r2, r3, #4
 800dfb6:	613a      	str	r2, [r7, #16]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d101      	bne.n	800dfc6 <clmt_clust+0x42>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	e010      	b.n	800dfe8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800dfc6:	697a      	ldr	r2, [r7, #20]
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d307      	bcc.n	800dfde <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800dfce:	697a      	ldr	r2, [r7, #20]
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	1ad3      	subs	r3, r2, r3
 800dfd4:	617b      	str	r3, [r7, #20]
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	3304      	adds	r3, #4
 800dfda:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfdc:	e7e9      	b.n	800dfb2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800dfde:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	4413      	add	r3, r2
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	371c      	adds	r7, #28
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e00a:	d204      	bcs.n	800e016 <dir_sdi+0x22>
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	f003 031f 	and.w	r3, r3, #31
 800e012:	2b00      	cmp	r3, #0
 800e014:	d001      	beq.n	800e01a <dir_sdi+0x26>
		return FR_INT_ERR;
 800e016:	2302      	movs	r3, #2
 800e018:	e071      	b.n	800e0fe <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	683a      	ldr	r2, [r7, #0]
 800e01e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d106      	bne.n	800e03a <dir_sdi+0x46>
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	2b02      	cmp	r3, #2
 800e032:	d902      	bls.n	800e03a <dir_sdi+0x46>
		clst = fs->dirbase;
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e038:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10c      	bne.n	800e05a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	095b      	lsrs	r3, r3, #5
 800e044:	693a      	ldr	r2, [r7, #16]
 800e046:	8912      	ldrh	r2, [r2, #8]
 800e048:	4293      	cmp	r3, r2
 800e04a:	d301      	bcc.n	800e050 <dir_sdi+0x5c>
 800e04c:	2302      	movs	r3, #2
 800e04e:	e056      	b.n	800e0fe <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	61da      	str	r2, [r3, #28]
 800e058:	e02d      	b.n	800e0b6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	895b      	ldrh	r3, [r3, #10]
 800e05e:	461a      	mov	r2, r3
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	899b      	ldrh	r3, [r3, #12]
 800e064:	fb03 f302 	mul.w	r3, r3, r2
 800e068:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e06a:	e019      	b.n	800e0a0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6979      	ldr	r1, [r7, #20]
 800e070:	4618      	mov	r0, r3
 800e072:	f7ff fc9a 	bl	800d9aa <get_fat>
 800e076:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e07e:	d101      	bne.n	800e084 <dir_sdi+0x90>
 800e080:	2301      	movs	r3, #1
 800e082:	e03c      	b.n	800e0fe <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	2b01      	cmp	r3, #1
 800e088:	d904      	bls.n	800e094 <dir_sdi+0xa0>
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	6a1b      	ldr	r3, [r3, #32]
 800e08e:	697a      	ldr	r2, [r7, #20]
 800e090:	429a      	cmp	r2, r3
 800e092:	d301      	bcc.n	800e098 <dir_sdi+0xa4>
 800e094:	2302      	movs	r3, #2
 800e096:	e032      	b.n	800e0fe <dir_sdi+0x10a>
			ofs -= csz;
 800e098:	683a      	ldr	r2, [r7, #0]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e0a0:	683a      	ldr	r2, [r7, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d2e1      	bcs.n	800e06c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e0a8:	6979      	ldr	r1, [r7, #20]
 800e0aa:	6938      	ldr	r0, [r7, #16]
 800e0ac:	f7ff fc5e 	bl	800d96c <clust2sect>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	697a      	ldr	r2, [r7, #20]
 800e0ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	69db      	ldr	r3, [r3, #28]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <dir_sdi+0xd4>
 800e0c4:	2302      	movs	r3, #2
 800e0c6:	e01a      	b.n	800e0fe <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	69da      	ldr	r2, [r3, #28]
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	899b      	ldrh	r3, [r3, #12]
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0d8:	441a      	add	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	899b      	ldrh	r3, [r3, #12]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0f0:	fb02 f200 	mul.w	r2, r2, r0
 800e0f4:	1a9b      	subs	r3, r3, r2
 800e0f6:	18ca      	adds	r2, r1, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e0fc:	2300      	movs	r3, #0
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3718      	adds	r7, #24
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e106:	b580      	push	{r7, lr}
 800e108:	b086      	sub	sp, #24
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
 800e10e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	695b      	ldr	r3, [r3, #20]
 800e11a:	3320      	adds	r3, #32
 800e11c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	69db      	ldr	r3, [r3, #28]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d003      	beq.n	800e12e <dir_next+0x28>
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e12c:	d301      	bcc.n	800e132 <dir_next+0x2c>
 800e12e:	2304      	movs	r3, #4
 800e130:	e0bb      	b.n	800e2aa <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	899b      	ldrh	r3, [r3, #12]
 800e136:	461a      	mov	r2, r3
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e13e:	fb02 f201 	mul.w	r2, r2, r1
 800e142:	1a9b      	subs	r3, r3, r2
 800e144:	2b00      	cmp	r3, #0
 800e146:	f040 809d 	bne.w	800e284 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	69db      	ldr	r3, [r3, #28]
 800e14e:	1c5a      	adds	r2, r3, #1
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	699b      	ldr	r3, [r3, #24]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d10b      	bne.n	800e174 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	095b      	lsrs	r3, r3, #5
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	8912      	ldrh	r2, [r2, #8]
 800e164:	4293      	cmp	r3, r2
 800e166:	f0c0 808d 	bcc.w	800e284 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2200      	movs	r2, #0
 800e16e:	61da      	str	r2, [r3, #28]
 800e170:	2304      	movs	r3, #4
 800e172:	e09a      	b.n	800e2aa <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	899b      	ldrh	r3, [r3, #12]
 800e178:	461a      	mov	r2, r3
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	8952      	ldrh	r2, [r2, #10]
 800e184:	3a01      	subs	r2, #1
 800e186:	4013      	ands	r3, r2
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d17b      	bne.n	800e284 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	699b      	ldr	r3, [r3, #24]
 800e192:	4619      	mov	r1, r3
 800e194:	4610      	mov	r0, r2
 800e196:	f7ff fc08 	bl	800d9aa <get_fat>
 800e19a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d801      	bhi.n	800e1a6 <dir_next+0xa0>
 800e1a2:	2302      	movs	r3, #2
 800e1a4:	e081      	b.n	800e2aa <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1ac:	d101      	bne.n	800e1b2 <dir_next+0xac>
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	e07b      	b.n	800e2aa <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6a1b      	ldr	r3, [r3, #32]
 800e1b6:	697a      	ldr	r2, [r7, #20]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d359      	bcc.n	800e270 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d104      	bne.n	800e1cc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	61da      	str	r2, [r3, #28]
 800e1c8:	2304      	movs	r3, #4
 800e1ca:	e06e      	b.n	800e2aa <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	699b      	ldr	r3, [r3, #24]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	f7ff fe3d 	bl	800de54 <create_chain>
 800e1da:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d101      	bne.n	800e1e6 <dir_next+0xe0>
 800e1e2:	2307      	movs	r3, #7
 800e1e4:	e061      	b.n	800e2aa <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d101      	bne.n	800e1f0 <dir_next+0xea>
 800e1ec:	2302      	movs	r3, #2
 800e1ee:	e05c      	b.n	800e2aa <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1f6:	d101      	bne.n	800e1fc <dir_next+0xf6>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	e056      	b.n	800e2aa <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f7ff fad3 	bl	800d7a8 <sync_window>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <dir_next+0x106>
 800e208:	2301      	movs	r3, #1
 800e20a:	e04e      	b.n	800e2aa <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	899b      	ldrh	r3, [r3, #12]
 800e216:	461a      	mov	r2, r3
 800e218:	2100      	movs	r1, #0
 800e21a:	f7ff f8ca 	bl	800d3b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e21e:	2300      	movs	r3, #0
 800e220:	613b      	str	r3, [r7, #16]
 800e222:	6979      	ldr	r1, [r7, #20]
 800e224:	68f8      	ldr	r0, [r7, #12]
 800e226:	f7ff fba1 	bl	800d96c <clust2sect>
 800e22a:	4602      	mov	r2, r0
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	639a      	str	r2, [r3, #56]	; 0x38
 800e230:	e012      	b.n	800e258 <dir_next+0x152>
						fs->wflag = 1;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2201      	movs	r2, #1
 800e236:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f7ff fab5 	bl	800d7a8 <sync_window>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d001      	beq.n	800e248 <dir_next+0x142>
 800e244:	2301      	movs	r3, #1
 800e246:	e030      	b.n	800e2aa <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	3301      	adds	r3, #1
 800e24c:	613b      	str	r3, [r7, #16]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e252:	1c5a      	adds	r2, r3, #1
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	639a      	str	r2, [r3, #56]	; 0x38
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	895b      	ldrh	r3, [r3, #10]
 800e25c:	461a      	mov	r2, r3
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	4293      	cmp	r3, r2
 800e262:	d3e6      	bcc.n	800e232 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	1ad2      	subs	r2, r2, r3
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	697a      	ldr	r2, [r7, #20]
 800e274:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e276:	6979      	ldr	r1, [r7, #20]
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f7ff fb77 	bl	800d96c <clust2sect>
 800e27e:	4602      	mov	r2, r0
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	68ba      	ldr	r2, [r7, #8]
 800e288:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	899b      	ldrh	r3, [r3, #12]
 800e294:	461a      	mov	r2, r3
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	fbb3 f0f2 	udiv	r0, r3, r2
 800e29c:	fb02 f200 	mul.w	r2, r2, r0
 800e2a0:	1a9b      	subs	r3, r3, r2
 800e2a2:	18ca      	adds	r2, r1, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e2a8:	2300      	movs	r3, #0
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3718      	adds	r7, #24
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b086      	sub	sp, #24
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7ff fe95 	bl	800dff4 <dir_sdi>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e2ce:	7dfb      	ldrb	r3, [r7, #23]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d12b      	bne.n	800e32c <dir_alloc+0x7a>
		n = 0;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	69db      	ldr	r3, [r3, #28]
 800e2dc:	4619      	mov	r1, r3
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f7ff faa6 	bl	800d830 <move_window>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e2e8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d11d      	bne.n	800e32a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6a1b      	ldr	r3, [r3, #32]
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	2be5      	cmp	r3, #229	; 0xe5
 800e2f6:	d004      	beq.n	800e302 <dir_alloc+0x50>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6a1b      	ldr	r3, [r3, #32]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d107      	bne.n	800e312 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	3301      	adds	r3, #1
 800e306:	613b      	str	r3, [r7, #16]
 800e308:	693a      	ldr	r2, [r7, #16]
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d102      	bne.n	800e316 <dir_alloc+0x64>
 800e310:	e00c      	b.n	800e32c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e312:	2300      	movs	r3, #0
 800e314:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e316:	2101      	movs	r1, #1
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f7ff fef4 	bl	800e106 <dir_next>
 800e31e:	4603      	mov	r3, r0
 800e320:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e322:	7dfb      	ldrb	r3, [r7, #23]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d0d7      	beq.n	800e2d8 <dir_alloc+0x26>
 800e328:	e000      	b.n	800e32c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e32a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e32c:	7dfb      	ldrb	r3, [r7, #23]
 800e32e:	2b04      	cmp	r3, #4
 800e330:	d101      	bne.n	800e336 <dir_alloc+0x84>
 800e332:	2307      	movs	r3, #7
 800e334:	75fb      	strb	r3, [r7, #23]
	return res;
 800e336:	7dfb      	ldrb	r3, [r7, #23]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	331a      	adds	r3, #26
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fe ff8c 	bl	800d26c <ld_word>
 800e354:	4603      	mov	r3, r0
 800e356:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	2b03      	cmp	r3, #3
 800e35e:	d109      	bne.n	800e374 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	3314      	adds	r3, #20
 800e364:	4618      	mov	r0, r3
 800e366:	f7fe ff81 	bl	800d26c <ld_word>
 800e36a:	4603      	mov	r3, r0
 800e36c:	041b      	lsls	r3, r3, #16
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	4313      	orrs	r3, r2
 800e372:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e374:	68fb      	ldr	r3, [r7, #12]
}
 800e376:	4618      	mov	r0, r3
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}

0800e37e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b084      	sub	sp, #16
 800e382:	af00      	add	r7, sp, #0
 800e384:	60f8      	str	r0, [r7, #12]
 800e386:	60b9      	str	r1, [r7, #8]
 800e388:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	331a      	adds	r3, #26
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	b292      	uxth	r2, r2
 800e392:	4611      	mov	r1, r2
 800e394:	4618      	mov	r0, r3
 800e396:	f7fe ffa4 	bl	800d2e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	2b03      	cmp	r3, #3
 800e3a0:	d109      	bne.n	800e3b6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f103 0214 	add.w	r2, r3, #20
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	0c1b      	lsrs	r3, r3, #16
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	4610      	mov	r0, r2
 800e3b2:	f7fe ff96 	bl	800d2e2 <st_word>
	}
}
 800e3b6:	bf00      	nop
 800e3b8:	3710      	adds	r7, #16
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
	...

0800e3c0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e3c0:	b590      	push	{r4, r7, lr}
 800e3c2:	b087      	sub	sp, #28
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	331a      	adds	r3, #26
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fe ff4c 	bl	800d26c <ld_word>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d001      	beq.n	800e3de <cmp_lfn+0x1e>
 800e3da:	2300      	movs	r3, #0
 800e3dc:	e059      	b.n	800e492 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3e6:	1e5a      	subs	r2, r3, #1
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	4413      	add	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4413      	add	r3, r2
 800e3f2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	81fb      	strh	r3, [r7, #14]
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	613b      	str	r3, [r7, #16]
 800e3fc:	e033      	b.n	800e466 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e3fe:	4a27      	ldr	r2, [pc, #156]	; (800e49c <cmp_lfn+0xdc>)
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	4413      	add	r3, r2
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	461a      	mov	r2, r3
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	4413      	add	r3, r2
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fe ff2d 	bl	800d26c <ld_word>
 800e412:	4603      	mov	r3, r0
 800e414:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e416:	89fb      	ldrh	r3, [r7, #14]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d01a      	beq.n	800e452 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	2bfe      	cmp	r3, #254	; 0xfe
 800e420:	d812      	bhi.n	800e448 <cmp_lfn+0x88>
 800e422:	89bb      	ldrh	r3, [r7, #12]
 800e424:	4618      	mov	r0, r3
 800e426:	f002 f909 	bl	801063c <ff_wtoupper>
 800e42a:	4603      	mov	r3, r0
 800e42c:	461c      	mov	r4, r3
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	1c5a      	adds	r2, r3, #1
 800e432:	617a      	str	r2, [r7, #20]
 800e434:	005b      	lsls	r3, r3, #1
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	4413      	add	r3, r2
 800e43a:	881b      	ldrh	r3, [r3, #0]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f002 f8fd 	bl	801063c <ff_wtoupper>
 800e442:	4603      	mov	r3, r0
 800e444:	429c      	cmp	r4, r3
 800e446:	d001      	beq.n	800e44c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e448:	2300      	movs	r3, #0
 800e44a:	e022      	b.n	800e492 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e44c:	89bb      	ldrh	r3, [r7, #12]
 800e44e:	81fb      	strh	r3, [r7, #14]
 800e450:	e006      	b.n	800e460 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e452:	89bb      	ldrh	r3, [r7, #12]
 800e454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e458:	4293      	cmp	r3, r2
 800e45a:	d001      	beq.n	800e460 <cmp_lfn+0xa0>
 800e45c:	2300      	movs	r3, #0
 800e45e:	e018      	b.n	800e492 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	3301      	adds	r3, #1
 800e464:	613b      	str	r3, [r7, #16]
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	2b0c      	cmp	r3, #12
 800e46a:	d9c8      	bls.n	800e3fe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00b      	beq.n	800e490 <cmp_lfn+0xd0>
 800e478:	89fb      	ldrh	r3, [r7, #14]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d008      	beq.n	800e490 <cmp_lfn+0xd0>
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	005b      	lsls	r3, r3, #1
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	4413      	add	r3, r2
 800e486:	881b      	ldrh	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d001      	beq.n	800e490 <cmp_lfn+0xd0>
 800e48c:	2300      	movs	r3, #0
 800e48e:	e000      	b.n	800e492 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e490:	2301      	movs	r3, #1
}
 800e492:	4618      	mov	r0, r3
 800e494:	371c      	adds	r7, #28
 800e496:	46bd      	mov	sp, r7
 800e498:	bd90      	pop	{r4, r7, pc}
 800e49a:	bf00      	nop
 800e49c:	0801898c 	.word	0x0801898c

0800e4a0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b088      	sub	sp, #32
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	71fb      	strb	r3, [r7, #7]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	330d      	adds	r3, #13
 800e4ba:	79ba      	ldrb	r2, [r7, #6]
 800e4bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	330b      	adds	r3, #11
 800e4c2:	220f      	movs	r2, #15
 800e4c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	330c      	adds	r3, #12
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	331a      	adds	r3, #26
 800e4d2:	2100      	movs	r1, #0
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7fe ff04 	bl	800d2e2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e4da:	79fb      	ldrb	r3, [r7, #7]
 800e4dc:	1e5a      	subs	r2, r3, #1
 800e4de:	4613      	mov	r3, r2
 800e4e0:	005b      	lsls	r3, r3, #1
 800e4e2:	4413      	add	r3, r2
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	4413      	add	r3, r2
 800e4e8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	82fb      	strh	r3, [r7, #22]
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e4f2:	8afb      	ldrh	r3, [r7, #22]
 800e4f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d007      	beq.n	800e50c <put_lfn+0x6c>
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	1c5a      	adds	r2, r3, #1
 800e500:	61fa      	str	r2, [r7, #28]
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	68fa      	ldr	r2, [r7, #12]
 800e506:	4413      	add	r3, r2
 800e508:	881b      	ldrh	r3, [r3, #0]
 800e50a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e50c:	4a17      	ldr	r2, [pc, #92]	; (800e56c <put_lfn+0xcc>)
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	4413      	add	r3, r2
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	461a      	mov	r2, r3
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	4413      	add	r3, r2
 800e51a:	8afa      	ldrh	r2, [r7, #22]
 800e51c:	4611      	mov	r1, r2
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fe fedf 	bl	800d2e2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e524:	8afb      	ldrh	r3, [r7, #22]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d102      	bne.n	800e530 <put_lfn+0x90>
 800e52a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e52e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	3301      	adds	r3, #1
 800e534:	61bb      	str	r3, [r7, #24]
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	2b0c      	cmp	r3, #12
 800e53a:	d9da      	bls.n	800e4f2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e53c:	8afb      	ldrh	r3, [r7, #22]
 800e53e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e542:	4293      	cmp	r3, r2
 800e544:	d006      	beq.n	800e554 <put_lfn+0xb4>
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	005b      	lsls	r3, r3, #1
 800e54a:	68fa      	ldr	r2, [r7, #12]
 800e54c:	4413      	add	r3, r2
 800e54e:	881b      	ldrh	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d103      	bne.n	800e55c <put_lfn+0xbc>
 800e554:	79fb      	ldrb	r3, [r7, #7]
 800e556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e55a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	79fa      	ldrb	r2, [r7, #7]
 800e560:	701a      	strb	r2, [r3, #0]
}
 800e562:	bf00      	nop
 800e564:	3720      	adds	r7, #32
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	bf00      	nop
 800e56c:	0801898c 	.word	0x0801898c

0800e570 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b08c      	sub	sp, #48	; 0x30
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
 800e57c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e57e:	220b      	movs	r2, #11
 800e580:	68b9      	ldr	r1, [r7, #8]
 800e582:	68f8      	ldr	r0, [r7, #12]
 800e584:	f7fe fef4 	bl	800d370 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	2b05      	cmp	r3, #5
 800e58c:	d92b      	bls.n	800e5e6 <gen_numname+0x76>
		sr = seq;
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e592:	e022      	b.n	800e5da <gen_numname+0x6a>
			wc = *lfn++;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	1c9a      	adds	r2, r3, #2
 800e598:	607a      	str	r2, [r7, #4]
 800e59a:	881b      	ldrh	r3, [r3, #0]
 800e59c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e59e:	2300      	movs	r3, #0
 800e5a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5a2:	e017      	b.n	800e5d4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	005a      	lsls	r2, r3, #1
 800e5a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5aa:	f003 0301 	and.w	r3, r3, #1
 800e5ae:	4413      	add	r3, r2
 800e5b0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e5b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5b4:	085b      	lsrs	r3, r3, #1
 800e5b6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d005      	beq.n	800e5ce <gen_numname+0x5e>
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e5c8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e5cc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d6:	2b0f      	cmp	r3, #15
 800e5d8:	d9e4      	bls.n	800e5a4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	881b      	ldrh	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1d8      	bne.n	800e594 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e5e6:	2307      	movs	r3, #7
 800e5e8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	f003 030f 	and.w	r3, r3, #15
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	3330      	adds	r3, #48	; 0x30
 800e5f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e5fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5fe:	2b39      	cmp	r3, #57	; 0x39
 800e600:	d904      	bls.n	800e60c <gen_numname+0x9c>
 800e602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e606:	3307      	adds	r3, #7
 800e608:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60e:	1e5a      	subs	r2, r3, #1
 800e610:	62ba      	str	r2, [r7, #40]	; 0x28
 800e612:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e616:	4413      	add	r3, r2
 800e618:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e61c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	091b      	lsrs	r3, r3, #4
 800e624:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d1de      	bne.n	800e5ea <gen_numname+0x7a>
	ns[i] = '~';
 800e62c:	f107 0214 	add.w	r2, r7, #20
 800e630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e632:	4413      	add	r3, r2
 800e634:	227e      	movs	r2, #126	; 0x7e
 800e636:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e638:	2300      	movs	r3, #0
 800e63a:	627b      	str	r3, [r7, #36]	; 0x24
 800e63c:	e002      	b.n	800e644 <gen_numname+0xd4>
 800e63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e640:	3301      	adds	r3, #1
 800e642:	627b      	str	r3, [r7, #36]	; 0x24
 800e644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e648:	429a      	cmp	r2, r3
 800e64a:	d205      	bcs.n	800e658 <gen_numname+0xe8>
 800e64c:	68fa      	ldr	r2, [r7, #12]
 800e64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e650:	4413      	add	r3, r2
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	2b20      	cmp	r3, #32
 800e656:	d1f2      	bne.n	800e63e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65a:	2b07      	cmp	r3, #7
 800e65c:	d808      	bhi.n	800e670 <gen_numname+0x100>
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	62ba      	str	r2, [r7, #40]	; 0x28
 800e664:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e668:	4413      	add	r3, r2
 800e66a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e66e:	e000      	b.n	800e672 <gen_numname+0x102>
 800e670:	2120      	movs	r1, #32
 800e672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e674:	1c5a      	adds	r2, r3, #1
 800e676:	627a      	str	r2, [r7, #36]	; 0x24
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	4413      	add	r3, r2
 800e67c:	460a      	mov	r2, r1
 800e67e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	2b07      	cmp	r3, #7
 800e684:	d9e8      	bls.n	800e658 <gen_numname+0xe8>
}
 800e686:	bf00      	nop
 800e688:	bf00      	nop
 800e68a:	3730      	adds	r7, #48	; 0x30
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e690:	b480      	push	{r7}
 800e692:	b085      	sub	sp, #20
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e698:	2300      	movs	r3, #0
 800e69a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e69c:	230b      	movs	r3, #11
 800e69e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e6a0:	7bfb      	ldrb	r3, [r7, #15]
 800e6a2:	b2da      	uxtb	r2, r3
 800e6a4:	0852      	lsrs	r2, r2, #1
 800e6a6:	01db      	lsls	r3, r3, #7
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	b2da      	uxtb	r2, r3
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	1c59      	adds	r1, r3, #1
 800e6b0:	6079      	str	r1, [r7, #4]
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	60bb      	str	r3, [r7, #8]
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d1ed      	bne.n	800e6a0 <sum_sfn+0x10>
	return sum;
 800e6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3714      	adds	r7, #20
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e6d2:	b580      	push	{r7, lr}
 800e6d4:	b086      	sub	sp, #24
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f7ff fc86 	bl	800dff4 <dir_sdi>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e6ec:	7dfb      	ldrb	r3, [r7, #23]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d001      	beq.n	800e6f6 <dir_find+0x24>
 800e6f2:	7dfb      	ldrb	r3, [r7, #23]
 800e6f4:	e0a9      	b.n	800e84a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e6f6:	23ff      	movs	r3, #255	; 0xff
 800e6f8:	753b      	strb	r3, [r7, #20]
 800e6fa:	7d3b      	ldrb	r3, [r7, #20]
 800e6fc:	757b      	strb	r3, [r7, #21]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e704:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	69db      	ldr	r3, [r3, #28]
 800e70a:	4619      	mov	r1, r3
 800e70c:	6938      	ldr	r0, [r7, #16]
 800e70e:	f7ff f88f 	bl	800d830 <move_window>
 800e712:	4603      	mov	r3, r0
 800e714:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e716:	7dfb      	ldrb	r3, [r7, #23]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f040 8090 	bne.w	800e83e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a1b      	ldr	r3, [r3, #32]
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e726:	7dbb      	ldrb	r3, [r7, #22]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d102      	bne.n	800e732 <dir_find+0x60>
 800e72c:	2304      	movs	r3, #4
 800e72e:	75fb      	strb	r3, [r7, #23]
 800e730:	e08a      	b.n	800e848 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6a1b      	ldr	r3, [r3, #32]
 800e736:	330b      	adds	r3, #11
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e73e:	73fb      	strb	r3, [r7, #15]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	7bfa      	ldrb	r2, [r7, #15]
 800e744:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e746:	7dbb      	ldrb	r3, [r7, #22]
 800e748:	2be5      	cmp	r3, #229	; 0xe5
 800e74a:	d007      	beq.n	800e75c <dir_find+0x8a>
 800e74c:	7bfb      	ldrb	r3, [r7, #15]
 800e74e:	f003 0308 	and.w	r3, r3, #8
 800e752:	2b00      	cmp	r3, #0
 800e754:	d009      	beq.n	800e76a <dir_find+0x98>
 800e756:	7bfb      	ldrb	r3, [r7, #15]
 800e758:	2b0f      	cmp	r3, #15
 800e75a:	d006      	beq.n	800e76a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e75c:	23ff      	movs	r3, #255	; 0xff
 800e75e:	757b      	strb	r3, [r7, #21]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e766:	631a      	str	r2, [r3, #48]	; 0x30
 800e768:	e05e      	b.n	800e828 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e76a:	7bfb      	ldrb	r3, [r7, #15]
 800e76c:	2b0f      	cmp	r3, #15
 800e76e:	d136      	bne.n	800e7de <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d154      	bne.n	800e828 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e77e:	7dbb      	ldrb	r3, [r7, #22]
 800e780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00d      	beq.n	800e7a4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a1b      	ldr	r3, [r3, #32]
 800e78c:	7b5b      	ldrb	r3, [r3, #13]
 800e78e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e790:	7dbb      	ldrb	r3, [r7, #22]
 800e792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e796:	75bb      	strb	r3, [r7, #22]
 800e798:	7dbb      	ldrb	r3, [r7, #22]
 800e79a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	695a      	ldr	r2, [r3, #20]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e7a4:	7dba      	ldrb	r2, [r7, #22]
 800e7a6:	7d7b      	ldrb	r3, [r7, #21]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d115      	bne.n	800e7d8 <dir_find+0x106>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6a1b      	ldr	r3, [r3, #32]
 800e7b0:	330d      	adds	r3, #13
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	7d3a      	ldrb	r2, [r7, #20]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d10e      	bne.n	800e7d8 <dir_find+0x106>
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	691a      	ldr	r2, [r3, #16]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6a1b      	ldr	r3, [r3, #32]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4610      	mov	r0, r2
 800e7c6:	f7ff fdfb 	bl	800e3c0 <cmp_lfn>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d003      	beq.n	800e7d8 <dir_find+0x106>
 800e7d0:	7d7b      	ldrb	r3, [r7, #21]
 800e7d2:	3b01      	subs	r3, #1
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	e000      	b.n	800e7da <dir_find+0x108>
 800e7d8:	23ff      	movs	r3, #255	; 0xff
 800e7da:	757b      	strb	r3, [r7, #21]
 800e7dc:	e024      	b.n	800e828 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e7de:	7d7b      	ldrb	r3, [r7, #21]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d109      	bne.n	800e7f8 <dir_find+0x126>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6a1b      	ldr	r3, [r3, #32]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7ff ff51 	bl	800e690 <sum_sfn>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	7d3b      	ldrb	r3, [r7, #20]
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d024      	beq.n	800e842 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e7fe:	f003 0301 	and.w	r3, r3, #1
 800e802:	2b00      	cmp	r3, #0
 800e804:	d10a      	bne.n	800e81c <dir_find+0x14a>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6a18      	ldr	r0, [r3, #32]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	3324      	adds	r3, #36	; 0x24
 800e80e:	220b      	movs	r2, #11
 800e810:	4619      	mov	r1, r3
 800e812:	f7fe fde9 	bl	800d3e8 <mem_cmp>
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d014      	beq.n	800e846 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e81c:	23ff      	movs	r3, #255	; 0xff
 800e81e:	757b      	strb	r3, [r7, #21]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e826:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e828:	2100      	movs	r1, #0
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7ff fc6b 	bl	800e106 <dir_next>
 800e830:	4603      	mov	r3, r0
 800e832:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e834:	7dfb      	ldrb	r3, [r7, #23]
 800e836:	2b00      	cmp	r3, #0
 800e838:	f43f af65 	beq.w	800e706 <dir_find+0x34>
 800e83c:	e004      	b.n	800e848 <dir_find+0x176>
		if (res != FR_OK) break;
 800e83e:	bf00      	nop
 800e840:	e002      	b.n	800e848 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e842:	bf00      	nop
 800e844:	e000      	b.n	800e848 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e846:	bf00      	nop

	return res;
 800e848:	7dfb      	ldrb	r3, [r7, #23]
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3718      	adds	r7, #24
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
	...

0800e854 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b08c      	sub	sp, #48	; 0x30
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e868:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d001      	beq.n	800e874 <dir_register+0x20>
 800e870:	2306      	movs	r3, #6
 800e872:	e0e0      	b.n	800ea36 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e874:	2300      	movs	r3, #0
 800e876:	627b      	str	r3, [r7, #36]	; 0x24
 800e878:	e002      	b.n	800e880 <dir_register+0x2c>
 800e87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87c:	3301      	adds	r3, #1
 800e87e:	627b      	str	r3, [r7, #36]	; 0x24
 800e880:	69fb      	ldr	r3, [r7, #28]
 800e882:	691a      	ldr	r2, [r3, #16]
 800e884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	4413      	add	r3, r2
 800e88a:	881b      	ldrh	r3, [r3, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d1f4      	bne.n	800e87a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e896:	f107 030c 	add.w	r3, r7, #12
 800e89a:	220c      	movs	r2, #12
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7fe fd67 	bl	800d370 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e8a2:	7dfb      	ldrb	r3, [r7, #23]
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d032      	beq.n	800e912 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2240      	movs	r2, #64	; 0x40
 800e8b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8b8:	e016      	b.n	800e8e8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	691a      	ldr	r2, [r3, #16]
 800e8c4:	f107 010c 	add.w	r1, r7, #12
 800e8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ca:	f7ff fe51 	bl	800e570 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f7ff feff 	bl	800e6d2 <dir_find>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e8da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d106      	bne.n	800e8f0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ea:	2b63      	cmp	r3, #99	; 0x63
 800e8ec:	d9e5      	bls.n	800e8ba <dir_register+0x66>
 800e8ee:	e000      	b.n	800e8f2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e8f0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f4:	2b64      	cmp	r3, #100	; 0x64
 800e8f6:	d101      	bne.n	800e8fc <dir_register+0xa8>
 800e8f8:	2307      	movs	r3, #7
 800e8fa:	e09c      	b.n	800ea36 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e8fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e900:	2b04      	cmp	r3, #4
 800e902:	d002      	beq.n	800e90a <dir_register+0xb6>
 800e904:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e908:	e095      	b.n	800ea36 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e90a:	7dfa      	ldrb	r2, [r7, #23]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e912:	7dfb      	ldrb	r3, [r7, #23]
 800e914:	f003 0302 	and.w	r3, r3, #2
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d007      	beq.n	800e92c <dir_register+0xd8>
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	330c      	adds	r3, #12
 800e920:	4a47      	ldr	r2, [pc, #284]	; (800ea40 <dir_register+0x1ec>)
 800e922:	fba2 2303 	umull	r2, r3, r2, r3
 800e926:	089b      	lsrs	r3, r3, #2
 800e928:	3301      	adds	r3, #1
 800e92a:	e000      	b.n	800e92e <dir_register+0xda>
 800e92c:	2301      	movs	r3, #1
 800e92e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e930:	6a39      	ldr	r1, [r7, #32]
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff fcbd 	bl	800e2b2 <dir_alloc>
 800e938:	4603      	mov	r3, r0
 800e93a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e93e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e942:	2b00      	cmp	r3, #0
 800e944:	d148      	bne.n	800e9d8 <dir_register+0x184>
 800e946:	6a3b      	ldr	r3, [r7, #32]
 800e948:	3b01      	subs	r3, #1
 800e94a:	623b      	str	r3, [r7, #32]
 800e94c:	6a3b      	ldr	r3, [r7, #32]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d042      	beq.n	800e9d8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	695a      	ldr	r2, [r3, #20]
 800e956:	6a3b      	ldr	r3, [r7, #32]
 800e958:	015b      	lsls	r3, r3, #5
 800e95a:	1ad3      	subs	r3, r2, r3
 800e95c:	4619      	mov	r1, r3
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f7ff fb48 	bl	800dff4 <dir_sdi>
 800e964:	4603      	mov	r3, r0
 800e966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e96a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d132      	bne.n	800e9d8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	3324      	adds	r3, #36	; 0x24
 800e976:	4618      	mov	r0, r3
 800e978:	f7ff fe8a 	bl	800e690 <sum_sfn>
 800e97c:	4603      	mov	r3, r0
 800e97e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	69db      	ldr	r3, [r3, #28]
 800e984:	4619      	mov	r1, r3
 800e986:	69f8      	ldr	r0, [r7, #28]
 800e988:	f7fe ff52 	bl	800d830 <move_window>
 800e98c:	4603      	mov	r3, r0
 800e98e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e996:	2b00      	cmp	r3, #0
 800e998:	d11d      	bne.n	800e9d6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	6918      	ldr	r0, [r3, #16]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6a19      	ldr	r1, [r3, #32]
 800e9a2:	6a3b      	ldr	r3, [r7, #32]
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	7efb      	ldrb	r3, [r7, #27]
 800e9a8:	f7ff fd7a 	bl	800e4a0 <put_lfn>
				fs->wflag = 1;
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7ff fba6 	bl	800e106 <dir_next>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e9c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d107      	bne.n	800e9d8 <dir_register+0x184>
 800e9c8:	6a3b      	ldr	r3, [r7, #32]
 800e9ca:	3b01      	subs	r3, #1
 800e9cc:	623b      	str	r3, [r7, #32]
 800e9ce:	6a3b      	ldr	r3, [r7, #32]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d1d5      	bne.n	800e980 <dir_register+0x12c>
 800e9d4:	e000      	b.n	800e9d8 <dir_register+0x184>
				if (res != FR_OK) break;
 800e9d6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e9d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d128      	bne.n	800ea32 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	69db      	ldr	r3, [r3, #28]
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	69f8      	ldr	r0, [r7, #28]
 800e9e8:	f7fe ff22 	bl	800d830 <move_window>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e9f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d11b      	bne.n	800ea32 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6a1b      	ldr	r3, [r3, #32]
 800e9fe:	2220      	movs	r2, #32
 800ea00:	2100      	movs	r1, #0
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fe fcd5 	bl	800d3b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6a18      	ldr	r0, [r3, #32]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3324      	adds	r3, #36	; 0x24
 800ea10:	220b      	movs	r2, #11
 800ea12:	4619      	mov	r1, r3
 800ea14:	f7fe fcac 	bl	800d370 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6a1b      	ldr	r3, [r3, #32]
 800ea22:	330c      	adds	r3, #12
 800ea24:	f002 0218 	and.w	r2, r2, #24
 800ea28:	b2d2      	uxtb	r2, r2
 800ea2a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ea32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3730      	adds	r7, #48	; 0x30
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	4ec4ec4f 	.word	0x4ec4ec4f

0800ea44 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b088      	sub	sp, #32
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2200      	movs	r2, #0
 800ea58:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	69db      	ldr	r3, [r3, #28]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	f000 80c9 	beq.w	800ebf6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea6c:	d032      	beq.n	800ead4 <get_fileinfo+0x90>
			i = j = 0;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	61bb      	str	r3, [r7, #24]
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ea76:	e01b      	b.n	800eab0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ea78:	89fb      	ldrh	r3, [r7, #14]
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f001 fda1 	bl	80105c4 <ff_convert>
 800ea82:	4603      	mov	r3, r0
 800ea84:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ea86:	89fb      	ldrh	r3, [r7, #14]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d102      	bne.n	800ea92 <get_fileinfo+0x4e>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	61fb      	str	r3, [r7, #28]
 800ea90:	e01a      	b.n	800eac8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	2bfe      	cmp	r3, #254	; 0xfe
 800ea96:	d902      	bls.n	800ea9e <get_fileinfo+0x5a>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	61fb      	str	r3, [r7, #28]
 800ea9c:	e014      	b.n	800eac8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	1c5a      	adds	r2, r3, #1
 800eaa2:	61fa      	str	r2, [r7, #28]
 800eaa4:	89fa      	ldrh	r2, [r7, #14]
 800eaa6:	b2d1      	uxtb	r1, r2
 800eaa8:	683a      	ldr	r2, [r7, #0]
 800eaaa:	4413      	add	r3, r2
 800eaac:	460a      	mov	r2, r1
 800eaae:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	691a      	ldr	r2, [r3, #16]
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	1c59      	adds	r1, r3, #1
 800eab8:	61b9      	str	r1, [r7, #24]
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	4413      	add	r3, r2
 800eabe:	881b      	ldrh	r3, [r3, #0]
 800eac0:	81fb      	strh	r3, [r7, #14]
 800eac2:	89fb      	ldrh	r3, [r7, #14]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1d7      	bne.n	800ea78 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800eac8:	683a      	ldr	r2, [r7, #0]
 800eaca:	69fb      	ldr	r3, [r7, #28]
 800eacc:	4413      	add	r3, r2
 800eace:	3316      	adds	r3, #22
 800ead0:	2200      	movs	r2, #0
 800ead2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	61bb      	str	r3, [r7, #24]
 800ead8:	69bb      	ldr	r3, [r7, #24]
 800eada:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800eadc:	683a      	ldr	r2, [r7, #0]
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	4413      	add	r3, r2
 800eae2:	3316      	adds	r3, #22
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800eae8:	e04c      	b.n	800eb84 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a1a      	ldr	r2, [r3, #32]
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	1c59      	adds	r1, r3, #1
 800eaf2:	61f9      	str	r1, [r7, #28]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800eafa:	7dfb      	ldrb	r3, [r7, #23]
 800eafc:	2b20      	cmp	r3, #32
 800eafe:	d100      	bne.n	800eb02 <get_fileinfo+0xbe>
 800eb00:	e040      	b.n	800eb84 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800eb02:	7dfb      	ldrb	r3, [r7, #23]
 800eb04:	2b05      	cmp	r3, #5
 800eb06:	d101      	bne.n	800eb0c <get_fileinfo+0xc8>
 800eb08:	23e5      	movs	r3, #229	; 0xe5
 800eb0a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	2b09      	cmp	r3, #9
 800eb10:	d10f      	bne.n	800eb32 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800eb12:	89bb      	ldrh	r3, [r7, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d105      	bne.n	800eb24 <get_fileinfo+0xe0>
 800eb18:	683a      	ldr	r2, [r7, #0]
 800eb1a:	69bb      	ldr	r3, [r7, #24]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	3316      	adds	r3, #22
 800eb20:	222e      	movs	r2, #46	; 0x2e
 800eb22:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800eb24:	69bb      	ldr	r3, [r7, #24]
 800eb26:	1c5a      	adds	r2, r3, #1
 800eb28:	61ba      	str	r2, [r7, #24]
 800eb2a:	683a      	ldr	r2, [r7, #0]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	222e      	movs	r2, #46	; 0x2e
 800eb30:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800eb32:	683a      	ldr	r2, [r7, #0]
 800eb34:	69bb      	ldr	r3, [r7, #24]
 800eb36:	4413      	add	r3, r2
 800eb38:	3309      	adds	r3, #9
 800eb3a:	7dfa      	ldrb	r2, [r7, #23]
 800eb3c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800eb3e:	89bb      	ldrh	r3, [r7, #12]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d11c      	bne.n	800eb7e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800eb44:	7dfb      	ldrb	r3, [r7, #23]
 800eb46:	2b40      	cmp	r3, #64	; 0x40
 800eb48:	d913      	bls.n	800eb72 <get_fileinfo+0x12e>
 800eb4a:	7dfb      	ldrb	r3, [r7, #23]
 800eb4c:	2b5a      	cmp	r3, #90	; 0x5a
 800eb4e:	d810      	bhi.n	800eb72 <get_fileinfo+0x12e>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6a1b      	ldr	r3, [r3, #32]
 800eb54:	330c      	adds	r3, #12
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	461a      	mov	r2, r3
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	2b08      	cmp	r3, #8
 800eb5e:	d901      	bls.n	800eb64 <get_fileinfo+0x120>
 800eb60:	2310      	movs	r3, #16
 800eb62:	e000      	b.n	800eb66 <get_fileinfo+0x122>
 800eb64:	2308      	movs	r3, #8
 800eb66:	4013      	ands	r3, r2
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d002      	beq.n	800eb72 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800eb6c:	7dfb      	ldrb	r3, [r7, #23]
 800eb6e:	3320      	adds	r3, #32
 800eb70:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800eb72:	683a      	ldr	r2, [r7, #0]
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	4413      	add	r3, r2
 800eb78:	3316      	adds	r3, #22
 800eb7a:	7dfa      	ldrb	r2, [r7, #23]
 800eb7c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800eb7e:	69bb      	ldr	r3, [r7, #24]
 800eb80:	3301      	adds	r3, #1
 800eb82:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	2b0a      	cmp	r3, #10
 800eb88:	d9af      	bls.n	800eaea <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800eb8a:	89bb      	ldrh	r3, [r7, #12]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d10d      	bne.n	800ebac <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800eb90:	683a      	ldr	r2, [r7, #0]
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	4413      	add	r3, r2
 800eb96:	3316      	adds	r3, #22
 800eb98:	2200      	movs	r2, #0
 800eb9a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6a1b      	ldr	r3, [r3, #32]
 800eba0:	330c      	adds	r3, #12
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d101      	bne.n	800ebac <get_fileinfo+0x168>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ebac:	683a      	ldr	r2, [r7, #0]
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	3309      	adds	r3, #9
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6a1b      	ldr	r3, [r3, #32]
 800ebbc:	7ada      	ldrb	r2, [r3, #11]
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6a1b      	ldr	r3, [r3, #32]
 800ebc6:	331c      	adds	r3, #28
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7fe fb67 	bl	800d29c <ld_dword>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a1b      	ldr	r3, [r3, #32]
 800ebd8:	3316      	adds	r3, #22
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7fe fb5e 	bl	800d29c <ld_dword>
 800ebe0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	80da      	strh	r2, [r3, #6]
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	0c1b      	lsrs	r3, r3, #16
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	809a      	strh	r2, [r3, #4]
 800ebf4:	e000      	b.n	800ebf8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ebf6:	bf00      	nop
}
 800ebf8:	3720      	adds	r7, #32
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
	...

0800ec00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b08a      	sub	sp, #40	; 0x28
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	613b      	str	r3, [r7, #16]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	691b      	ldr	r3, [r3, #16]
 800ec16:	60fb      	str	r3, [r7, #12]
 800ec18:	2300      	movs	r3, #0
 800ec1a:	617b      	str	r3, [r7, #20]
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	1c5a      	adds	r2, r3, #1
 800ec24:	61ba      	str	r2, [r7, #24]
 800ec26:	693a      	ldr	r2, [r7, #16]
 800ec28:	4413      	add	r3, r2
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ec2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec30:	2b1f      	cmp	r3, #31
 800ec32:	d940      	bls.n	800ecb6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ec34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec36:	2b2f      	cmp	r3, #47	; 0x2f
 800ec38:	d006      	beq.n	800ec48 <create_name+0x48>
 800ec3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec3c:	2b5c      	cmp	r3, #92	; 0x5c
 800ec3e:	d110      	bne.n	800ec62 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ec40:	e002      	b.n	800ec48 <create_name+0x48>
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	3301      	adds	r3, #1
 800ec46:	61bb      	str	r3, [r7, #24]
 800ec48:	693a      	ldr	r2, [r7, #16]
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	2b2f      	cmp	r3, #47	; 0x2f
 800ec52:	d0f6      	beq.n	800ec42 <create_name+0x42>
 800ec54:	693a      	ldr	r2, [r7, #16]
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	4413      	add	r3, r2
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	2b5c      	cmp	r3, #92	; 0x5c
 800ec5e:	d0f0      	beq.n	800ec42 <create_name+0x42>
			break;
 800ec60:	e02a      	b.n	800ecb8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	2bfe      	cmp	r3, #254	; 0xfe
 800ec66:	d901      	bls.n	800ec6c <create_name+0x6c>
 800ec68:	2306      	movs	r3, #6
 800ec6a:	e177      	b.n	800ef5c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ec6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ec72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec74:	2101      	movs	r1, #1
 800ec76:	4618      	mov	r0, r3
 800ec78:	f001 fca4 	bl	80105c4 <ff_convert>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ec80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d101      	bne.n	800ec8a <create_name+0x8a>
 800ec86:	2306      	movs	r3, #6
 800ec88:	e168      	b.n	800ef5c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ec8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec8c:	2b7f      	cmp	r3, #127	; 0x7f
 800ec8e:	d809      	bhi.n	800eca4 <create_name+0xa4>
 800ec90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec92:	4619      	mov	r1, r3
 800ec94:	48b3      	ldr	r0, [pc, #716]	; (800ef64 <create_name+0x364>)
 800ec96:	f7fe fbce 	bl	800d436 <chk_chr>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d001      	beq.n	800eca4 <create_name+0xa4>
 800eca0:	2306      	movs	r3, #6
 800eca2:	e15b      	b.n	800ef5c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	1c5a      	adds	r2, r3, #1
 800eca8:	617a      	str	r2, [r7, #20]
 800ecaa:	005b      	lsls	r3, r3, #1
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	4413      	add	r3, r2
 800ecb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ecb2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ecb4:	e7b4      	b.n	800ec20 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ecb6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ecb8:	693a      	ldr	r2, [r7, #16]
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	441a      	add	r2, r3
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ecc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecc4:	2b1f      	cmp	r3, #31
 800ecc6:	d801      	bhi.n	800eccc <create_name+0xcc>
 800ecc8:	2304      	movs	r3, #4
 800ecca:	e000      	b.n	800ecce <create_name+0xce>
 800eccc:	2300      	movs	r3, #0
 800ecce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ecd2:	e011      	b.n	800ecf8 <create_name+0xf8>
		w = lfn[di - 1];
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	005b      	lsls	r3, r3, #1
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	4413      	add	r3, r2
 800ece2:	881b      	ldrh	r3, [r3, #0]
 800ece4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ece6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ece8:	2b20      	cmp	r3, #32
 800ecea:	d002      	beq.n	800ecf2 <create_name+0xf2>
 800ecec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecee:	2b2e      	cmp	r3, #46	; 0x2e
 800ecf0:	d106      	bne.n	800ed00 <create_name+0x100>
		di--;
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	3b01      	subs	r3, #1
 800ecf6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1ea      	bne.n	800ecd4 <create_name+0xd4>
 800ecfe:	e000      	b.n	800ed02 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ed00:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	68fa      	ldr	r2, [r7, #12]
 800ed08:	4413      	add	r3, r2
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d101      	bne.n	800ed18 <create_name+0x118>
 800ed14:	2306      	movs	r3, #6
 800ed16:	e121      	b.n	800ef5c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	3324      	adds	r3, #36	; 0x24
 800ed1c:	220b      	movs	r2, #11
 800ed1e:	2120      	movs	r1, #32
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fe fb46 	bl	800d3b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ed26:	2300      	movs	r3, #0
 800ed28:	61bb      	str	r3, [r7, #24]
 800ed2a:	e002      	b.n	800ed32 <create_name+0x132>
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	61bb      	str	r3, [r7, #24]
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	005b      	lsls	r3, r3, #1
 800ed36:	68fa      	ldr	r2, [r7, #12]
 800ed38:	4413      	add	r3, r2
 800ed3a:	881b      	ldrh	r3, [r3, #0]
 800ed3c:	2b20      	cmp	r3, #32
 800ed3e:	d0f5      	beq.n	800ed2c <create_name+0x12c>
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	005b      	lsls	r3, r3, #1
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	4413      	add	r3, r2
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ed4c:	d0ee      	beq.n	800ed2c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ed4e:	69bb      	ldr	r3, [r7, #24]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d009      	beq.n	800ed68 <create_name+0x168>
 800ed54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed58:	f043 0303 	orr.w	r3, r3, #3
 800ed5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ed60:	e002      	b.n	800ed68 <create_name+0x168>
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	3b01      	subs	r3, #1
 800ed66:	617b      	str	r3, [r7, #20]
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d009      	beq.n	800ed82 <create_name+0x182>
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ed74:	3b01      	subs	r3, #1
 800ed76:	005b      	lsls	r3, r3, #1
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	881b      	ldrh	r3, [r3, #0]
 800ed7e:	2b2e      	cmp	r3, #46	; 0x2e
 800ed80:	d1ef      	bne.n	800ed62 <create_name+0x162>

	i = b = 0; ni = 8;
 800ed82:	2300      	movs	r3, #0
 800ed84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed88:	2300      	movs	r3, #0
 800ed8a:	623b      	str	r3, [r7, #32]
 800ed8c:	2308      	movs	r3, #8
 800ed8e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	1c5a      	adds	r2, r3, #1
 800ed94:	61ba      	str	r2, [r7, #24]
 800ed96:	005b      	lsls	r3, r3, #1
 800ed98:	68fa      	ldr	r2, [r7, #12]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	881b      	ldrh	r3, [r3, #0]
 800ed9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800eda0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f000 8090 	beq.w	800eec8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800eda8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edaa:	2b20      	cmp	r3, #32
 800edac:	d006      	beq.n	800edbc <create_name+0x1bc>
 800edae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edb0:	2b2e      	cmp	r3, #46	; 0x2e
 800edb2:	d10a      	bne.n	800edca <create_name+0x1ca>
 800edb4:	69ba      	ldr	r2, [r7, #24]
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d006      	beq.n	800edca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800edbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edc0:	f043 0303 	orr.w	r3, r3, #3
 800edc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edc8:	e07d      	b.n	800eec6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800edca:	6a3a      	ldr	r2, [r7, #32]
 800edcc:	69fb      	ldr	r3, [r7, #28]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d203      	bcs.n	800edda <create_name+0x1da>
 800edd2:	69ba      	ldr	r2, [r7, #24]
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d123      	bne.n	800ee22 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	2b0b      	cmp	r3, #11
 800edde:	d106      	bne.n	800edee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ede0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ede4:	f043 0303 	orr.w	r3, r3, #3
 800ede8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edec:	e06f      	b.n	800eece <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800edee:	69ba      	ldr	r2, [r7, #24]
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d005      	beq.n	800ee02 <create_name+0x202>
 800edf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edfa:	f043 0303 	orr.w	r3, r3, #3
 800edfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ee02:	69ba      	ldr	r2, [r7, #24]
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d860      	bhi.n	800eecc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	61bb      	str	r3, [r7, #24]
 800ee0e:	2308      	movs	r3, #8
 800ee10:	623b      	str	r3, [r7, #32]
 800ee12:	230b      	movs	r3, #11
 800ee14:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ee16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee20:	e051      	b.n	800eec6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ee22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee24:	2b7f      	cmp	r3, #127	; 0x7f
 800ee26:	d914      	bls.n	800ee52 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ee28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee2a:	2100      	movs	r1, #0
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f001 fbc9 	bl	80105c4 <ff_convert>
 800ee32:	4603      	mov	r3, r0
 800ee34:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ee36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d004      	beq.n	800ee46 <create_name+0x246>
 800ee3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee3e:	3b80      	subs	r3, #128	; 0x80
 800ee40:	4a49      	ldr	r2, [pc, #292]	; (800ef68 <create_name+0x368>)
 800ee42:	5cd3      	ldrb	r3, [r2, r3]
 800ee44:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ee46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee4a:	f043 0302 	orr.w	r3, r3, #2
 800ee4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ee52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d007      	beq.n	800ee68 <create_name+0x268>
 800ee58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	4843      	ldr	r0, [pc, #268]	; (800ef6c <create_name+0x36c>)
 800ee5e:	f7fe faea 	bl	800d436 <chk_chr>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d008      	beq.n	800ee7a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ee68:	235f      	movs	r3, #95	; 0x5f
 800ee6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ee6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee70:	f043 0303 	orr.w	r3, r3, #3
 800ee74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee78:	e01b      	b.n	800eeb2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ee7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee7c:	2b40      	cmp	r3, #64	; 0x40
 800ee7e:	d909      	bls.n	800ee94 <create_name+0x294>
 800ee80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee82:	2b5a      	cmp	r3, #90	; 0x5a
 800ee84:	d806      	bhi.n	800ee94 <create_name+0x294>
					b |= 2;
 800ee86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee8a:	f043 0302 	orr.w	r3, r3, #2
 800ee8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee92:	e00e      	b.n	800eeb2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ee94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee96:	2b60      	cmp	r3, #96	; 0x60
 800ee98:	d90b      	bls.n	800eeb2 <create_name+0x2b2>
 800ee9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee9c:	2b7a      	cmp	r3, #122	; 0x7a
 800ee9e:	d808      	bhi.n	800eeb2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800eea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eea4:	f043 0301 	orr.w	r3, r3, #1
 800eea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eeac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeae:	3b20      	subs	r3, #32
 800eeb0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800eeb2:	6a3b      	ldr	r3, [r7, #32]
 800eeb4:	1c5a      	adds	r2, r3, #1
 800eeb6:	623a      	str	r2, [r7, #32]
 800eeb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eeba:	b2d1      	uxtb	r1, r2
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	4413      	add	r3, r2
 800eec0:	460a      	mov	r2, r1
 800eec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800eec6:	e763      	b.n	800ed90 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800eec8:	bf00      	nop
 800eeca:	e000      	b.n	800eece <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800eecc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eed4:	2be5      	cmp	r3, #229	; 0xe5
 800eed6:	d103      	bne.n	800eee0 <create_name+0x2e0>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2205      	movs	r2, #5
 800eedc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	2b08      	cmp	r3, #8
 800eee4:	d104      	bne.n	800eef0 <create_name+0x2f0>
 800eee6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800eef0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eef4:	f003 030c 	and.w	r3, r3, #12
 800eef8:	2b0c      	cmp	r3, #12
 800eefa:	d005      	beq.n	800ef08 <create_name+0x308>
 800eefc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef00:	f003 0303 	and.w	r3, r3, #3
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	d105      	bne.n	800ef14 <create_name+0x314>
 800ef08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef0c:	f043 0302 	orr.w	r3, r3, #2
 800ef10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ef14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef18:	f003 0302 	and.w	r3, r3, #2
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d117      	bne.n	800ef50 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ef20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef24:	f003 0303 	and.w	r3, r3, #3
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d105      	bne.n	800ef38 <create_name+0x338>
 800ef2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef30:	f043 0310 	orr.w	r3, r3, #16
 800ef34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ef38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef3c:	f003 030c 	and.w	r3, r3, #12
 800ef40:	2b04      	cmp	r3, #4
 800ef42:	d105      	bne.n	800ef50 <create_name+0x350>
 800ef44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef48:	f043 0308 	orr.w	r3, r3, #8
 800ef4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ef56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ef5a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3728      	adds	r7, #40	; 0x28
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	08018710 	.word	0x08018710
 800ef68:	0801890c 	.word	0x0801890c
 800ef6c:	0801871c 	.word	0x0801871c

0800ef70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ef84:	e002      	b.n	800ef8c <follow_path+0x1c>
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	603b      	str	r3, [r7, #0]
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	2b2f      	cmp	r3, #47	; 0x2f
 800ef92:	d0f8      	beq.n	800ef86 <follow_path+0x16>
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	2b5c      	cmp	r3, #92	; 0x5c
 800ef9a:	d0f4      	beq.n	800ef86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	2b1f      	cmp	r3, #31
 800efa8:	d80a      	bhi.n	800efc0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2280      	movs	r2, #128	; 0x80
 800efae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800efb2:	2100      	movs	r1, #0
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f7ff f81d 	bl	800dff4 <dir_sdi>
 800efba:	4603      	mov	r3, r0
 800efbc:	75fb      	strb	r3, [r7, #23]
 800efbe:	e048      	b.n	800f052 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800efc0:	463b      	mov	r3, r7
 800efc2:	4619      	mov	r1, r3
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f7ff fe1b 	bl	800ec00 <create_name>
 800efca:	4603      	mov	r3, r0
 800efcc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800efce:	7dfb      	ldrb	r3, [r7, #23]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d139      	bne.n	800f048 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7ff fb7c 	bl	800e6d2 <dir_find>
 800efda:	4603      	mov	r3, r0
 800efdc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800efe4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800efe6:	7dfb      	ldrb	r3, [r7, #23]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00a      	beq.n	800f002 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800efec:	7dfb      	ldrb	r3, [r7, #23]
 800efee:	2b04      	cmp	r3, #4
 800eff0:	d12c      	bne.n	800f04c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eff2:	7afb      	ldrb	r3, [r7, #11]
 800eff4:	f003 0304 	and.w	r3, r3, #4
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d127      	bne.n	800f04c <follow_path+0xdc>
 800effc:	2305      	movs	r3, #5
 800effe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f000:	e024      	b.n	800f04c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f002:	7afb      	ldrb	r3, [r7, #11]
 800f004:	f003 0304 	and.w	r3, r3, #4
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d121      	bne.n	800f050 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	799b      	ldrb	r3, [r3, #6]
 800f010:	f003 0310 	and.w	r3, r3, #16
 800f014:	2b00      	cmp	r3, #0
 800f016:	d102      	bne.n	800f01e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f018:	2305      	movs	r3, #5
 800f01a:	75fb      	strb	r3, [r7, #23]
 800f01c:	e019      	b.n	800f052 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	695b      	ldr	r3, [r3, #20]
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	8992      	ldrh	r2, [r2, #12]
 800f02c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f030:	fb02 f200 	mul.w	r2, r2, r0
 800f034:	1a9b      	subs	r3, r3, r2
 800f036:	440b      	add	r3, r1
 800f038:	4619      	mov	r1, r3
 800f03a:	68f8      	ldr	r0, [r7, #12]
 800f03c:	f7ff f980 	bl	800e340 <ld_clust>
 800f040:	4602      	mov	r2, r0
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f046:	e7bb      	b.n	800efc0 <follow_path+0x50>
			if (res != FR_OK) break;
 800f048:	bf00      	nop
 800f04a:	e002      	b.n	800f052 <follow_path+0xe2>
				break;
 800f04c:	bf00      	nop
 800f04e:	e000      	b.n	800f052 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f050:	bf00      	nop
			}
		}
	}

	return res;
 800f052:	7dfb      	ldrb	r3, [r7, #23]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3718      	adds	r7, #24
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b087      	sub	sp, #28
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f068:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d031      	beq.n	800f0d6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	617b      	str	r3, [r7, #20]
 800f078:	e002      	b.n	800f080 <get_ldnumber+0x24>
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	3301      	adds	r3, #1
 800f07e:	617b      	str	r3, [r7, #20]
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	2b1f      	cmp	r3, #31
 800f086:	d903      	bls.n	800f090 <get_ldnumber+0x34>
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	2b3a      	cmp	r3, #58	; 0x3a
 800f08e:	d1f4      	bne.n	800f07a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	2b3a      	cmp	r3, #58	; 0x3a
 800f096:	d11c      	bne.n	800f0d2 <get_ldnumber+0x76>
			tp = *path;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	1c5a      	adds	r2, r3, #1
 800f0a2:	60fa      	str	r2, [r7, #12]
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	3b30      	subs	r3, #48	; 0x30
 800f0a8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	2b09      	cmp	r3, #9
 800f0ae:	d80e      	bhi.n	800f0ce <get_ldnumber+0x72>
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d10a      	bne.n	800f0ce <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d107      	bne.n	800f0ce <get_ldnumber+0x72>
					vol = (int)i;
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	617b      	str	r3, [r7, #20]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	697a      	ldr	r2, [r7, #20]
 800f0cc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	e002      	b.n	800f0d8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f0d6:	693b      	ldr	r3, [r7, #16]
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	371c      	adds	r7, #28
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	70da      	strb	r2, [r3, #3]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0fa:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f0fc:	6839      	ldr	r1, [r7, #0]
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f7fe fb96 	bl	800d830 <move_window>
 800f104:	4603      	mov	r3, r0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d001      	beq.n	800f10e <check_fs+0x2a>
 800f10a:	2304      	movs	r3, #4
 800f10c:	e038      	b.n	800f180 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	333c      	adds	r3, #60	; 0x3c
 800f112:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f116:	4618      	mov	r0, r3
 800f118:	f7fe f8a8 	bl	800d26c <ld_word>
 800f11c:	4603      	mov	r3, r0
 800f11e:	461a      	mov	r2, r3
 800f120:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f124:	429a      	cmp	r2, r3
 800f126:	d001      	beq.n	800f12c <check_fs+0x48>
 800f128:	2303      	movs	r3, #3
 800f12a:	e029      	b.n	800f180 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f132:	2be9      	cmp	r3, #233	; 0xe9
 800f134:	d009      	beq.n	800f14a <check_fs+0x66>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f13c:	2beb      	cmp	r3, #235	; 0xeb
 800f13e:	d11e      	bne.n	800f17e <check_fs+0x9a>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f146:	2b90      	cmp	r3, #144	; 0x90
 800f148:	d119      	bne.n	800f17e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	333c      	adds	r3, #60	; 0x3c
 800f14e:	3336      	adds	r3, #54	; 0x36
 800f150:	4618      	mov	r0, r3
 800f152:	f7fe f8a3 	bl	800d29c <ld_dword>
 800f156:	4603      	mov	r3, r0
 800f158:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f15c:	4a0a      	ldr	r2, [pc, #40]	; (800f188 <check_fs+0xa4>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d101      	bne.n	800f166 <check_fs+0x82>
 800f162:	2300      	movs	r3, #0
 800f164:	e00c      	b.n	800f180 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	333c      	adds	r3, #60	; 0x3c
 800f16a:	3352      	adds	r3, #82	; 0x52
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7fe f895 	bl	800d29c <ld_dword>
 800f172:	4603      	mov	r3, r0
 800f174:	4a05      	ldr	r2, [pc, #20]	; (800f18c <check_fs+0xa8>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d101      	bne.n	800f17e <check_fs+0x9a>
 800f17a:	2300      	movs	r3, #0
 800f17c:	e000      	b.n	800f180 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f17e:	2302      	movs	r3, #2
}
 800f180:	4618      	mov	r0, r3
 800f182:	3708      	adds	r7, #8
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	00544146 	.word	0x00544146
 800f18c:	33544146 	.word	0x33544146

0800f190 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b096      	sub	sp, #88	; 0x58
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	4613      	mov	r3, r2
 800f19c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f7ff ff59 	bl	800f05c <get_ldnumber>
 800f1aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	da01      	bge.n	800f1b6 <find_volume+0x26>
 800f1b2:	230b      	movs	r3, #11
 800f1b4:	e26c      	b.n	800f690 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f1b6:	4aa4      	ldr	r2, [pc, #656]	; (800f448 <find_volume+0x2b8>)
 800f1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d101      	bne.n	800f1ca <find_volume+0x3a>
 800f1c6:	230c      	movs	r3, #12
 800f1c8:	e262      	b.n	800f690 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800f1ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f1cc:	f7fe f94e 	bl	800d46c <lock_fs>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d101      	bne.n	800f1da <find_volume+0x4a>
 800f1d6:	230f      	movs	r3, #15
 800f1d8:	e25a      	b.n	800f690 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f1e0:	79fb      	ldrb	r3, [r7, #7]
 800f1e2:	f023 0301 	bic.w	r3, r3, #1
 800f1e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d01a      	beq.n	800f226 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f2:	785b      	ldrb	r3, [r3, #1]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7fd ff9b 	bl	800d130 <disk_status>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f200:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f204:	f003 0301 	and.w	r3, r3, #1
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d10c      	bne.n	800f226 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f20c:	79fb      	ldrb	r3, [r7, #7]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d007      	beq.n	800f222 <find_volume+0x92>
 800f212:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f216:	f003 0304 	and.w	r3, r3, #4
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d001      	beq.n	800f222 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800f21e:	230a      	movs	r3, #10
 800f220:	e236      	b.n	800f690 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800f222:	2300      	movs	r3, #0
 800f224:	e234      	b.n	800f690 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f228:	2200      	movs	r2, #0
 800f22a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f22e:	b2da      	uxtb	r2, r3
 800f230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f232:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f236:	785b      	ldrb	r3, [r3, #1]
 800f238:	4618      	mov	r0, r3
 800f23a:	f7fd ff93 	bl	800d164 <disk_initialize>
 800f23e:	4603      	mov	r3, r0
 800f240:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f244:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f248:	f003 0301 	and.w	r3, r3, #1
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d001      	beq.n	800f254 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f250:	2303      	movs	r3, #3
 800f252:	e21d      	b.n	800f690 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f254:	79fb      	ldrb	r3, [r7, #7]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d007      	beq.n	800f26a <find_volume+0xda>
 800f25a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f25e:	f003 0304 	and.w	r3, r3, #4
 800f262:	2b00      	cmp	r3, #0
 800f264:	d001      	beq.n	800f26a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800f266:	230a      	movs	r3, #10
 800f268:	e212      	b.n	800f690 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26c:	7858      	ldrb	r0, [r3, #1]
 800f26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f270:	330c      	adds	r3, #12
 800f272:	461a      	mov	r2, r3
 800f274:	2102      	movs	r1, #2
 800f276:	f7fd ffdb 	bl	800d230 <disk_ioctl>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d001      	beq.n	800f284 <find_volume+0xf4>
 800f280:	2301      	movs	r3, #1
 800f282:	e205      	b.n	800f690 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f286:	899b      	ldrh	r3, [r3, #12]
 800f288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f28c:	d80d      	bhi.n	800f2aa <find_volume+0x11a>
 800f28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f290:	899b      	ldrh	r3, [r3, #12]
 800f292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f296:	d308      	bcc.n	800f2aa <find_volume+0x11a>
 800f298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f29a:	899b      	ldrh	r3, [r3, #12]
 800f29c:	461a      	mov	r2, r3
 800f29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a0:	899b      	ldrh	r3, [r3, #12]
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	4013      	ands	r3, r2
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d001      	beq.n	800f2ae <find_volume+0x11e>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e1f0      	b.n	800f690 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f2b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f2b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f2b6:	f7ff ff15 	bl	800f0e4 <check_fs>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f2c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2c4:	2b02      	cmp	r3, #2
 800f2c6:	d14b      	bne.n	800f360 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	643b      	str	r3, [r7, #64]	; 0x40
 800f2cc:	e01f      	b.n	800f30e <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2d6:	011b      	lsls	r3, r3, #4
 800f2d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f2dc:	4413      	add	r3, r2
 800f2de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e2:	3304      	adds	r3, #4
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d006      	beq.n	800f2f8 <find_volume+0x168>
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ec:	3308      	adds	r3, #8
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fd ffd4 	bl	800d29c <ld_dword>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	e000      	b.n	800f2fa <find_volume+0x16a>
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2fc:	009b      	lsls	r3, r3, #2
 800f2fe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f302:	440b      	add	r3, r1
 800f304:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f30a:	3301      	adds	r3, #1
 800f30c:	643b      	str	r3, [r7, #64]	; 0x40
 800f30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f310:	2b03      	cmp	r3, #3
 800f312:	d9dc      	bls.n	800f2ce <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f314:	2300      	movs	r3, #0
 800f316:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d002      	beq.n	800f324 <find_volume+0x194>
 800f31e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f320:	3b01      	subs	r3, #1
 800f322:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f32c:	4413      	add	r3, r2
 800f32e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f332:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f336:	2b00      	cmp	r3, #0
 800f338:	d005      	beq.n	800f346 <find_volume+0x1b6>
 800f33a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f33c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f33e:	f7ff fed1 	bl	800f0e4 <check_fs>
 800f342:	4603      	mov	r3, r0
 800f344:	e000      	b.n	800f348 <find_volume+0x1b8>
 800f346:	2303      	movs	r3, #3
 800f348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f34c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f350:	2b01      	cmp	r3, #1
 800f352:	d905      	bls.n	800f360 <find_volume+0x1d0>
 800f354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f356:	3301      	adds	r3, #1
 800f358:	643b      	str	r3, [r7, #64]	; 0x40
 800f35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f35c:	2b03      	cmp	r3, #3
 800f35e:	d9e1      	bls.n	800f324 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f364:	2b04      	cmp	r3, #4
 800f366:	d101      	bne.n	800f36c <find_volume+0x1dc>
 800f368:	2301      	movs	r3, #1
 800f36a:	e191      	b.n	800f690 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f36c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f370:	2b01      	cmp	r3, #1
 800f372:	d901      	bls.n	800f378 <find_volume+0x1e8>
 800f374:	230d      	movs	r3, #13
 800f376:	e18b      	b.n	800f690 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f37a:	333c      	adds	r3, #60	; 0x3c
 800f37c:	330b      	adds	r3, #11
 800f37e:	4618      	mov	r0, r3
 800f380:	f7fd ff74 	bl	800d26c <ld_word>
 800f384:	4603      	mov	r3, r0
 800f386:	461a      	mov	r2, r3
 800f388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38a:	899b      	ldrh	r3, [r3, #12]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d001      	beq.n	800f394 <find_volume+0x204>
 800f390:	230d      	movs	r3, #13
 800f392:	e17d      	b.n	800f690 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f396:	333c      	adds	r3, #60	; 0x3c
 800f398:	3316      	adds	r3, #22
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fd ff66 	bl	800d26c <ld_word>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d106      	bne.n	800f3b8 <find_volume+0x228>
 800f3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ac:	333c      	adds	r3, #60	; 0x3c
 800f3ae:	3324      	adds	r3, #36	; 0x24
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7fd ff73 	bl	800d29c <ld_dword>
 800f3b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f3bc:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ca:	789b      	ldrb	r3, [r3, #2]
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d005      	beq.n	800f3dc <find_volume+0x24c>
 800f3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d2:	789b      	ldrb	r3, [r3, #2]
 800f3d4:	2b02      	cmp	r3, #2
 800f3d6:	d001      	beq.n	800f3dc <find_volume+0x24c>
 800f3d8:	230d      	movs	r3, #13
 800f3da:	e159      	b.n	800f690 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3de:	789b      	ldrb	r3, [r3, #2]
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3e4:	fb02 f303 	mul.w	r3, r2, r3
 800f3e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ec:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f3f0:	b29a      	uxth	r2, r3
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f8:	895b      	ldrh	r3, [r3, #10]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d008      	beq.n	800f410 <find_volume+0x280>
 800f3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f400:	895b      	ldrh	r3, [r3, #10]
 800f402:	461a      	mov	r2, r3
 800f404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f406:	895b      	ldrh	r3, [r3, #10]
 800f408:	3b01      	subs	r3, #1
 800f40a:	4013      	ands	r3, r2
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d001      	beq.n	800f414 <find_volume+0x284>
 800f410:	230d      	movs	r3, #13
 800f412:	e13d      	b.n	800f690 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f416:	333c      	adds	r3, #60	; 0x3c
 800f418:	3311      	adds	r3, #17
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fd ff26 	bl	800d26c <ld_word>
 800f420:	4603      	mov	r3, r0
 800f422:	461a      	mov	r2, r3
 800f424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f426:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42a:	891b      	ldrh	r3, [r3, #8]
 800f42c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f42e:	8992      	ldrh	r2, [r2, #12]
 800f430:	0952      	lsrs	r2, r2, #5
 800f432:	b292      	uxth	r2, r2
 800f434:	fbb3 f1f2 	udiv	r1, r3, r2
 800f438:	fb02 f201 	mul.w	r2, r2, r1
 800f43c:	1a9b      	subs	r3, r3, r2
 800f43e:	b29b      	uxth	r3, r3
 800f440:	2b00      	cmp	r3, #0
 800f442:	d003      	beq.n	800f44c <find_volume+0x2bc>
 800f444:	230d      	movs	r3, #13
 800f446:	e123      	b.n	800f690 <find_volume+0x500>
 800f448:	2000078c 	.word	0x2000078c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44e:	333c      	adds	r3, #60	; 0x3c
 800f450:	3313      	adds	r3, #19
 800f452:	4618      	mov	r0, r3
 800f454:	f7fd ff0a 	bl	800d26c <ld_word>
 800f458:	4603      	mov	r3, r0
 800f45a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f45c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d106      	bne.n	800f470 <find_volume+0x2e0>
 800f462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f464:	333c      	adds	r3, #60	; 0x3c
 800f466:	3320      	adds	r3, #32
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fd ff17 	bl	800d29c <ld_dword>
 800f46e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f472:	333c      	adds	r3, #60	; 0x3c
 800f474:	330e      	adds	r3, #14
 800f476:	4618      	mov	r0, r3
 800f478:	f7fd fef8 	bl	800d26c <ld_word>
 800f47c:	4603      	mov	r3, r0
 800f47e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f480:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f482:	2b00      	cmp	r3, #0
 800f484:	d101      	bne.n	800f48a <find_volume+0x2fa>
 800f486:	230d      	movs	r3, #13
 800f488:	e102      	b.n	800f690 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f48a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f48c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f48e:	4413      	add	r3, r2
 800f490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f492:	8911      	ldrh	r1, [r2, #8]
 800f494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f496:	8992      	ldrh	r2, [r2, #12]
 800f498:	0952      	lsrs	r2, r2, #5
 800f49a:	b292      	uxth	r2, r2
 800f49c:	fbb1 f2f2 	udiv	r2, r1, r2
 800f4a0:	b292      	uxth	r2, r2
 800f4a2:	4413      	add	r3, r2
 800f4a4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f4a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d201      	bcs.n	800f4b2 <find_volume+0x322>
 800f4ae:	230d      	movs	r3, #13
 800f4b0:	e0ee      	b.n	800f690 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f4b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	1ad3      	subs	r3, r2, r3
 800f4b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4ba:	8952      	ldrh	r2, [r2, #10]
 800f4bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d101      	bne.n	800f4cc <find_volume+0x33c>
 800f4c8:	230d      	movs	r3, #13
 800f4ca:	e0e1      	b.n	800f690 <find_volume+0x500>
		fmt = FS_FAT32;
 800f4cc:	2303      	movs	r3, #3
 800f4ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d802      	bhi.n	800f4e2 <find_volume+0x352>
 800f4dc:	2302      	movs	r3, #2
 800f4de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d802      	bhi.n	800f4f2 <find_volume+0x362>
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f4:	1c9a      	adds	r2, r3, #2
 800f4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f8:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f4fe:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f500:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f504:	441a      	add	r2, r3
 800f506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f508:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f50a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50e:	441a      	add	r2, r3
 800f510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f512:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800f514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f518:	2b03      	cmp	r3, #3
 800f51a:	d11e      	bne.n	800f55a <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51e:	333c      	adds	r3, #60	; 0x3c
 800f520:	332a      	adds	r3, #42	; 0x2a
 800f522:	4618      	mov	r0, r3
 800f524:	f7fd fea2 	bl	800d26c <ld_word>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d001      	beq.n	800f532 <find_volume+0x3a2>
 800f52e:	230d      	movs	r3, #13
 800f530:	e0ae      	b.n	800f690 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f534:	891b      	ldrh	r3, [r3, #8]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <find_volume+0x3ae>
 800f53a:	230d      	movs	r3, #13
 800f53c:	e0a8      	b.n	800f690 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f540:	333c      	adds	r3, #60	; 0x3c
 800f542:	332c      	adds	r3, #44	; 0x2c
 800f544:	4618      	mov	r0, r3
 800f546:	f7fd fea9 	bl	800d29c <ld_dword>
 800f54a:	4602      	mov	r2, r0
 800f54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54e:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f552:	6a1b      	ldr	r3, [r3, #32]
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	647b      	str	r3, [r7, #68]	; 0x44
 800f558:	e01f      	b.n	800f59a <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55c:	891b      	ldrh	r3, [r3, #8]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d101      	bne.n	800f566 <find_volume+0x3d6>
 800f562:	230d      	movs	r3, #13
 800f564:	e094      	b.n	800f690 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f56c:	441a      	add	r2, r3
 800f56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f570:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f572:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f576:	2b02      	cmp	r3, #2
 800f578:	d103      	bne.n	800f582 <find_volume+0x3f2>
 800f57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57c:	6a1b      	ldr	r3, [r3, #32]
 800f57e:	005b      	lsls	r3, r3, #1
 800f580:	e00a      	b.n	800f598 <find_volume+0x408>
 800f582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f584:	6a1a      	ldr	r2, [r3, #32]
 800f586:	4613      	mov	r3, r2
 800f588:	005b      	lsls	r3, r3, #1
 800f58a:	4413      	add	r3, r2
 800f58c:	085a      	lsrs	r2, r3, #1
 800f58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f590:	6a1b      	ldr	r3, [r3, #32]
 800f592:	f003 0301 	and.w	r3, r3, #1
 800f596:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f598:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a0:	899b      	ldrh	r3, [r3, #12]
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5a6:	440b      	add	r3, r1
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f5ac:	8989      	ldrh	r1, [r1, #12]
 800f5ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d201      	bcs.n	800f5ba <find_volume+0x42a>
 800f5b6:	230d      	movs	r3, #13
 800f5b8:	e06a      	b.n	800f690 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5c0:	61da      	str	r2, [r3, #28]
 800f5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c4:	69da      	ldr	r2, [r3, #28]
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800f5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5cc:	2280      	movs	r2, #128	; 0x80
 800f5ce:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f5d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5d4:	2b03      	cmp	r3, #3
 800f5d6:	d149      	bne.n	800f66c <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5da:	333c      	adds	r3, #60	; 0x3c
 800f5dc:	3330      	adds	r3, #48	; 0x30
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7fd fe44 	bl	800d26c <ld_word>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d140      	bne.n	800f66c <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f5ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f5f2:	f7fe f91d 	bl	800d830 <move_window>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d137      	bne.n	800f66c <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800f5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fe:	2200      	movs	r2, #0
 800f600:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f604:	333c      	adds	r3, #60	; 0x3c
 800f606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fd fe2e 	bl	800d26c <ld_word>
 800f610:	4603      	mov	r3, r0
 800f612:	461a      	mov	r2, r3
 800f614:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f618:	429a      	cmp	r2, r3
 800f61a:	d127      	bne.n	800f66c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61e:	333c      	adds	r3, #60	; 0x3c
 800f620:	4618      	mov	r0, r3
 800f622:	f7fd fe3b 	bl	800d29c <ld_dword>
 800f626:	4603      	mov	r3, r0
 800f628:	4a1b      	ldr	r2, [pc, #108]	; (800f698 <find_volume+0x508>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d11e      	bne.n	800f66c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f630:	333c      	adds	r3, #60	; 0x3c
 800f632:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f636:	4618      	mov	r0, r3
 800f638:	f7fd fe30 	bl	800d29c <ld_dword>
 800f63c:	4603      	mov	r3, r0
 800f63e:	4a17      	ldr	r2, [pc, #92]	; (800f69c <find_volume+0x50c>)
 800f640:	4293      	cmp	r3, r2
 800f642:	d113      	bne.n	800f66c <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f646:	333c      	adds	r3, #60	; 0x3c
 800f648:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fd fe25 	bl	800d29c <ld_dword>
 800f652:	4602      	mov	r2, r0
 800f654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f656:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	333c      	adds	r3, #60	; 0x3c
 800f65c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f660:	4618      	mov	r0, r3
 800f662:	f7fd fe1b 	bl	800d29c <ld_dword>
 800f666:	4602      	mov	r2, r0
 800f668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66a:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f672:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f674:	4b0a      	ldr	r3, [pc, #40]	; (800f6a0 <find_volume+0x510>)
 800f676:	881b      	ldrh	r3, [r3, #0]
 800f678:	3301      	adds	r3, #1
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	4b08      	ldr	r3, [pc, #32]	; (800f6a0 <find_volume+0x510>)
 800f67e:	801a      	strh	r2, [r3, #0]
 800f680:	4b07      	ldr	r3, [pc, #28]	; (800f6a0 <find_volume+0x510>)
 800f682:	881a      	ldrh	r2, [r3, #0]
 800f684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f686:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f688:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f68a:	f7fe f869 	bl	800d760 <clear_lock>
#endif
	return FR_OK;
 800f68e:	2300      	movs	r3, #0
}
 800f690:	4618      	mov	r0, r3
 800f692:	3758      	adds	r7, #88	; 0x58
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	41615252 	.word	0x41615252
 800f69c:	61417272 	.word	0x61417272
 800f6a0:	20000790 	.word	0x20000790

0800f6a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f6ae:	2309      	movs	r3, #9
 800f6b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d02e      	beq.n	800f716 <validate+0x72>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d02a      	beq.n	800f716 <validate+0x72>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d025      	beq.n	800f716 <validate+0x72>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	889a      	ldrh	r2, [r3, #4]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	88db      	ldrh	r3, [r3, #6]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d11e      	bne.n	800f716 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7fd fec5 	bl	800d46c <lock_fs>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d014      	beq.n	800f712 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	785b      	ldrb	r3, [r3, #1]
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fd fd1e 	bl	800d130 <disk_status>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	f003 0301 	and.w	r3, r3, #1
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d102      	bne.n	800f704 <validate+0x60>
				res = FR_OK;
 800f6fe:	2300      	movs	r3, #0
 800f700:	73fb      	strb	r3, [r7, #15]
 800f702:	e008      	b.n	800f716 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2100      	movs	r1, #0
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7fd fec4 	bl	800d498 <unlock_fs>
 800f710:	e001      	b.n	800f716 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f712:	230f      	movs	r3, #15
 800f714:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f716:	7bfb      	ldrb	r3, [r7, #15]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d102      	bne.n	800f722 <validate+0x7e>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	e000      	b.n	800f724 <validate+0x80>
 800f722:	2300      	movs	r3, #0
 800f724:	683a      	ldr	r2, [r7, #0]
 800f726:	6013      	str	r3, [r2, #0]
	return res;
 800f728:	7bfb      	ldrb	r3, [r7, #15]
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3710      	adds	r7, #16
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
	...

0800f734 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b088      	sub	sp, #32
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	4613      	mov	r3, r2
 800f740:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f746:	f107 0310 	add.w	r3, r7, #16
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7ff fc86 	bl	800f05c <get_ldnumber>
 800f750:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	2b00      	cmp	r3, #0
 800f756:	da01      	bge.n	800f75c <f_mount+0x28>
 800f758:	230b      	movs	r3, #11
 800f75a:	e048      	b.n	800f7ee <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f75c:	4a26      	ldr	r2, [pc, #152]	; (800f7f8 <f_mount+0xc4>)
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f764:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00f      	beq.n	800f78c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f76c:	69b8      	ldr	r0, [r7, #24]
 800f76e:	f7fd fff7 	bl	800d760 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f772:	69bb      	ldr	r3, [r7, #24]
 800f774:	695b      	ldr	r3, [r3, #20]
 800f776:	4618      	mov	r0, r3
 800f778:	f001 f805 	bl	8010786 <ff_del_syncobj>
 800f77c:	4603      	mov	r3, r0
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d101      	bne.n	800f786 <f_mount+0x52>
 800f782:	2302      	movs	r3, #2
 800f784:	e033      	b.n	800f7ee <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	2200      	movs	r2, #0
 800f78a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d00f      	beq.n	800f7b2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2200      	movs	r2, #0
 800f796:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	3314      	adds	r3, #20
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	4610      	mov	r0, r2
 800f7a4:	f000 ffd4 	bl	8010750 <ff_cre_syncobj>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d101      	bne.n	800f7b2 <f_mount+0x7e>
 800f7ae:	2302      	movs	r3, #2
 800f7b0:	e01d      	b.n	800f7ee <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f7b2:	68fa      	ldr	r2, [r7, #12]
 800f7b4:	4910      	ldr	r1, [pc, #64]	; (800f7f8 <f_mount+0xc4>)
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d002      	beq.n	800f7c8 <f_mount+0x94>
 800f7c2:	79fb      	ldrb	r3, [r7, #7]
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d001      	beq.n	800f7cc <f_mount+0x98>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	e010      	b.n	800f7ee <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f7cc:	f107 010c 	add.w	r1, r7, #12
 800f7d0:	f107 0308 	add.w	r3, r7, #8
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7ff fcda 	bl	800f190 <find_volume>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	7dfa      	ldrb	r2, [r7, #23]
 800f7e4:	4611      	mov	r1, r2
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fd fe56 	bl	800d498 <unlock_fs>
 800f7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3720      	adds	r7, #32
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	2000078c 	.word	0x2000078c

0800f7fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800f802:	af00      	add	r7, sp, #0
 800f804:	f107 030c 	add.w	r3, r7, #12
 800f808:	6018      	str	r0, [r3, #0]
 800f80a:	f107 0308 	add.w	r3, r7, #8
 800f80e:	6019      	str	r1, [r3, #0]
 800f810:	1dfb      	adds	r3, r7, #7
 800f812:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f814:	f107 030c 	add.w	r3, r7, #12
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d101      	bne.n	800f822 <f_open+0x26>
 800f81e:	2309      	movs	r3, #9
 800f820:	e24a      	b.n	800fcb8 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f822:	1dfb      	adds	r3, r7, #7
 800f824:	1dfa      	adds	r2, r7, #7
 800f826:	7812      	ldrb	r2, [r2, #0]
 800f828:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f82c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800f82e:	1dfb      	adds	r3, r7, #7
 800f830:	781a      	ldrb	r2, [r3, #0]
 800f832:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800f836:	f107 0308 	add.w	r3, r7, #8
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7ff fca8 	bl	800f190 <find_volume>
 800f840:	4603      	mov	r3, r0
 800f842:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800f846:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f040 8221 	bne.w	800fc92 <f_open+0x496>
		dj.obj.fs = fs;
 800f850:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f854:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800f858:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f85c:	f107 0214 	add.w	r2, r7, #20
 800f860:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f862:	f107 0308 	add.w	r3, r7, #8
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f86c:	4611      	mov	r1, r2
 800f86e:	4618      	mov	r0, r3
 800f870:	f7ff fb7e 	bl	800ef70 <follow_path>
 800f874:	4603      	mov	r3, r0
 800f876:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f87a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d11b      	bne.n	800f8ba <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f882:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800f886:	b25b      	sxtb	r3, r3
 800f888:	2b00      	cmp	r3, #0
 800f88a:	da03      	bge.n	800f894 <f_open+0x98>
				res = FR_INVALID_NAME;
 800f88c:	2306      	movs	r3, #6
 800f88e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800f892:	e012      	b.n	800f8ba <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f894:	1dfb      	adds	r3, r7, #7
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	f023 0301 	bic.w	r3, r3, #1
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	bf14      	ite	ne
 800f8a0:	2301      	movne	r3, #1
 800f8a2:	2300      	moveq	r3, #0
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f8ac:	4611      	mov	r1, r2
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fd fe0e 	bl	800d4d0 <chk_lock>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f8ba:	1dfb      	adds	r3, r7, #7
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	f003 031c 	and.w	r3, r3, #28
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f000 809b 	beq.w	800f9fe <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800f8c8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d019      	beq.n	800f904 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f8d0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f8d4:	2b04      	cmp	r3, #4
 800f8d6:	d10e      	bne.n	800f8f6 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f8d8:	f7fd fe56 	bl	800d588 <enq_lock>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d006      	beq.n	800f8f0 <f_open+0xf4>
 800f8e2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fe ffb4 	bl	800e854 <dir_register>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	e000      	b.n	800f8f2 <f_open+0xf6>
 800f8f0:	2312      	movs	r3, #18
 800f8f2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f8f6:	1dfb      	adds	r3, r7, #7
 800f8f8:	1dfa      	adds	r2, r7, #7
 800f8fa:	7812      	ldrb	r2, [r2, #0]
 800f8fc:	f042 0208 	orr.w	r2, r2, #8
 800f900:	701a      	strb	r2, [r3, #0]
 800f902:	e012      	b.n	800f92a <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f904:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800f908:	f003 0311 	and.w	r3, r3, #17
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d003      	beq.n	800f918 <f_open+0x11c>
					res = FR_DENIED;
 800f910:	2307      	movs	r3, #7
 800f912:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800f916:	e008      	b.n	800f92a <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f918:	1dfb      	adds	r3, r7, #7
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	f003 0304 	and.w	r3, r3, #4
 800f920:	2b00      	cmp	r3, #0
 800f922:	d002      	beq.n	800f92a <f_open+0x12e>
 800f924:	2308      	movs	r3, #8
 800f926:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f92a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f92e:	2b00      	cmp	r3, #0
 800f930:	f040 8082 	bne.w	800fa38 <f_open+0x23c>
 800f934:	1dfb      	adds	r3, r7, #7
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	f003 0308 	and.w	r3, r3, #8
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d07b      	beq.n	800fa38 <f_open+0x23c>
				dw = GET_FATTIME();
 800f940:	f7fb ff04 	bl	800b74c <get_fattime>
 800f944:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f948:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f94c:	330e      	adds	r3, #14
 800f94e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800f952:	4618      	mov	r0, r3
 800f954:	f7fd fce0 	bl	800d318 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f958:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f95c:	3316      	adds	r3, #22
 800f95e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800f962:	4618      	mov	r0, r3
 800f964:	f7fd fcd8 	bl	800d318 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f968:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f96c:	330b      	adds	r3, #11
 800f96e:	2220      	movs	r2, #32
 800f970:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f972:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f976:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800f97a:	4611      	mov	r1, r2
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fe fcdf 	bl	800e340 <ld_clust>
 800f982:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f986:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f98a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800f98e:	2200      	movs	r2, #0
 800f990:	4618      	mov	r0, r3
 800f992:	f7fe fcf4 	bl	800e37e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f996:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f99a:	331c      	adds	r3, #28
 800f99c:	2100      	movs	r1, #0
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fd fcba 	bl	800d318 <st_dword>
					fs->wflag = 1;
 800f9a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f9ac:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d041      	beq.n	800fa38 <f_open+0x23c>
						dw = fs->winsect;
 800f9b4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9ba:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800f9be:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fe f9de 	bl	800dd8a <remove_chain>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800f9d4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d12d      	bne.n	800fa38 <f_open+0x23c>
							res = move_window(fs, dw);
 800f9dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f9e0:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7fd ff23 	bl	800d830 <move_window>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f9f0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f9f4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800f9f8:	3a01      	subs	r2, #1
 800f9fa:	619a      	str	r2, [r3, #24]
 800f9fc:	e01c      	b.n	800fa38 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f9fe:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d118      	bne.n	800fa38 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fa06:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800fa0a:	f003 0310 	and.w	r3, r3, #16
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d003      	beq.n	800fa1a <f_open+0x21e>
					res = FR_NO_FILE;
 800fa12:	2304      	movs	r3, #4
 800fa14:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800fa18:	e00e      	b.n	800fa38 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fa1a:	1dfb      	adds	r3, r7, #7
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	f003 0302 	and.w	r3, r3, #2
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d008      	beq.n	800fa38 <f_open+0x23c>
 800fa26:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800fa2a:	f003 0301 	and.w	r3, r3, #1
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d002      	beq.n	800fa38 <f_open+0x23c>
						res = FR_DENIED;
 800fa32:	2307      	movs	r3, #7
 800fa34:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800fa38:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d136      	bne.n	800faae <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fa40:	1dfb      	adds	r3, r7, #7
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	f003 0308 	and.w	r3, r3, #8
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d005      	beq.n	800fa58 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800fa4c:	1dfb      	adds	r3, r7, #7
 800fa4e:	1dfa      	adds	r2, r7, #7
 800fa50:	7812      	ldrb	r2, [r2, #0]
 800fa52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fa56:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fa58:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fa5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa5e:	f107 030c 	add.w	r3, r7, #12
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fa66:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800fa6a:	f107 030c 	add.w	r3, r7, #12
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fa72:	1dfb      	adds	r3, r7, #7
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	f023 0301 	bic.w	r3, r3, #1
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	bf14      	ite	ne
 800fa7e:	2301      	movne	r3, #1
 800fa80:	2300      	moveq	r3, #0
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	461a      	mov	r2, r3
 800fa86:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fa8a:	4611      	mov	r1, r2
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fd fd9d 	bl	800d5cc <inc_lock>
 800fa92:	4602      	mov	r2, r0
 800fa94:	f107 030c 	add.w	r3, r7, #12
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fa9c:	f107 030c 	add.w	r3, r7, #12
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	691b      	ldr	r3, [r3, #16]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d102      	bne.n	800faae <f_open+0x2b2>
 800faa8:	2302      	movs	r3, #2
 800faaa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800faae:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f040 80ed 	bne.w	800fc92 <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fab8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fabc:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800fac0:	4611      	mov	r1, r2
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fe fc3c 	bl	800e340 <ld_clust>
 800fac8:	4602      	mov	r2, r0
 800faca:	f107 030c 	add.w	r3, r7, #12
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fad2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800fad6:	331c      	adds	r3, #28
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fd fbdf 	bl	800d29c <ld_dword>
 800fade:	4602      	mov	r2, r0
 800fae0:	f107 030c 	add.w	r3, r7, #12
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fae8:	f107 030c 	add.w	r3, r7, #12
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2200      	movs	r2, #0
 800faf0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800faf2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800faf6:	f107 030c 	add.w	r3, r7, #12
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fafe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fb02:	88da      	ldrh	r2, [r3, #6]
 800fb04:	f107 030c 	add.w	r3, r7, #12
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fb0c:	f107 030c 	add.w	r3, r7, #12
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	1dfa      	adds	r2, r7, #7
 800fb14:	7812      	ldrb	r2, [r2, #0]
 800fb16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fb18:	f107 030c 	add.w	r3, r7, #12
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fb22:	f107 030c 	add.w	r3, r7, #12
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fb2c:	f107 030c 	add.w	r3, r7, #12
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	2200      	movs	r2, #0
 800fb34:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fb36:	f107 030c 	add.w	r3, r7, #12
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	3330      	adds	r3, #48	; 0x30
 800fb3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb42:	2100      	movs	r1, #0
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7fd fc34 	bl	800d3b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fb4a:	1dfb      	adds	r3, r7, #7
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	f003 0320 	and.w	r3, r3, #32
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	f000 809d 	beq.w	800fc92 <f_open+0x496>
 800fb58:	f107 030c 	add.w	r3, r7, #12
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	68db      	ldr	r3, [r3, #12]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	f000 8096 	beq.w	800fc92 <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fb66:	f107 030c 	add.w	r3, r7, #12
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	68da      	ldr	r2, [r3, #12]
 800fb6e:	f107 030c 	add.w	r3, r7, #12
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fb76:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fb7a:	895b      	ldrh	r3, [r3, #10]
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fb82:	899b      	ldrh	r3, [r3, #12]
 800fb84:	fb03 f302 	mul.w	r3, r3, r2
 800fb88:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fb8c:	f107 030c 	add.w	r3, r7, #12
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fb98:	f107 030c 	add.w	r3, r7, #12
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800fba4:	e01f      	b.n	800fbe6 <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 800fba6:	f107 030c 	add.w	r3, r7, #12
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7fd fefa 	bl	800d9aa <get_fat>
 800fbb6:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800fbba:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800fbbe:	2b01      	cmp	r3, #1
 800fbc0:	d802      	bhi.n	800fbc8 <f_open+0x3cc>
 800fbc2:	2302      	movs	r3, #2
 800fbc4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fbc8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800fbcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbd0:	d102      	bne.n	800fbd8 <f_open+0x3dc>
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fbd8:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800fbdc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800fbe0:	1ad3      	subs	r3, r2, r3
 800fbe2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800fbe6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d105      	bne.n	800fbfa <f_open+0x3fe>
 800fbee:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800fbf2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d8d5      	bhi.n	800fba6 <f_open+0x3aa>
				}
				fp->clust = clst;
 800fbfa:	f107 030c 	add.w	r3, r7, #12
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800fc04:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fc06:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d141      	bne.n	800fc92 <f_open+0x496>
 800fc0e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fc12:	899b      	ldrh	r3, [r3, #12]
 800fc14:	461a      	mov	r2, r3
 800fc16:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800fc1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc1e:	fb02 f201 	mul.w	r2, r2, r1
 800fc22:	1a9b      	subs	r3, r3, r2
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d034      	beq.n	800fc92 <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fc28:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fc2c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7fd fe9b 	bl	800d96c <clust2sect>
 800fc36:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800fc3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d103      	bne.n	800fc4a <f_open+0x44e>
						res = FR_INT_ERR;
 800fc42:	2302      	movs	r3, #2
 800fc44:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800fc48:	e023      	b.n	800fc92 <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fc4a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fc4e:	899b      	ldrh	r3, [r3, #12]
 800fc50:	461a      	mov	r2, r3
 800fc52:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800fc56:	fbb3 f2f2 	udiv	r2, r3, r2
 800fc5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800fc5e:	441a      	add	r2, r3
 800fc60:	f107 030c 	add.w	r3, r7, #12
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fc68:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fc6c:	7858      	ldrb	r0, [r3, #1]
 800fc6e:	f107 030c 	add.w	r3, r7, #12
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc78:	f107 030c 	add.w	r3, r7, #12
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	6a1a      	ldr	r2, [r3, #32]
 800fc80:	2301      	movs	r3, #1
 800fc82:	f7fd fa95 	bl	800d1b0 <disk_read>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d002      	beq.n	800fc92 <f_open+0x496>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fc92:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d004      	beq.n	800fca4 <f_open+0x4a8>
 800fc9a:	f107 030c 	add.w	r3, r7, #12
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2200      	movs	r2, #0
 800fca2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fca4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fca8:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800fcac:	4611      	mov	r1, r2
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7fd fbf2 	bl	800d498 <unlock_fs>
 800fcb4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b08c      	sub	sp, #48	; 0x30
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	60f8      	str	r0, [r7, #12]
 800fcca:	60b9      	str	r1, [r7, #8]
 800fccc:	607a      	str	r2, [r7, #4]
 800fcce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f107 0210 	add.w	r2, r7, #16
 800fce0:	4611      	mov	r1, r2
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7ff fcde 	bl	800f6a4 <validate>
 800fce8:	4603      	mov	r3, r0
 800fcea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fcee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d107      	bne.n	800fd06 <f_write+0x44>
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	7d5b      	ldrb	r3, [r3, #21]
 800fcfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fcfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d009      	beq.n	800fd1a <f_write+0x58>
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fd0c:	4611      	mov	r1, r2
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7fd fbc2 	bl	800d498 <unlock_fs>
 800fd14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd18:	e192      	b.n	8010040 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	7d1b      	ldrb	r3, [r3, #20]
 800fd1e:	f003 0302 	and.w	r3, r3, #2
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d106      	bne.n	800fd34 <f_write+0x72>
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	2107      	movs	r1, #7
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fd fbb4 	bl	800d498 <unlock_fs>
 800fd30:	2307      	movs	r3, #7
 800fd32:	e185      	b.n	8010040 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	699a      	ldr	r2, [r3, #24]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	441a      	add	r2, r3
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	699b      	ldr	r3, [r3, #24]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	f080 816a 	bcs.w	801001a <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	699b      	ldr	r3, [r3, #24]
 800fd4a:	43db      	mvns	r3, r3
 800fd4c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fd4e:	e164      	b.n	801001a <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	699b      	ldr	r3, [r3, #24]
 800fd54:	693a      	ldr	r2, [r7, #16]
 800fd56:	8992      	ldrh	r2, [r2, #12]
 800fd58:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd5c:	fb02 f201 	mul.w	r2, r2, r1
 800fd60:	1a9b      	subs	r3, r3, r2
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	f040 810f 	bne.w	800ff86 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	699b      	ldr	r3, [r3, #24]
 800fd6c:	693a      	ldr	r2, [r7, #16]
 800fd6e:	8992      	ldrh	r2, [r2, #12]
 800fd70:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd74:	693a      	ldr	r2, [r7, #16]
 800fd76:	8952      	ldrh	r2, [r2, #10]
 800fd78:	3a01      	subs	r2, #1
 800fd7a:	4013      	ands	r3, r2
 800fd7c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d14d      	bne.n	800fe20 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	699b      	ldr	r3, [r3, #24]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d10c      	bne.n	800fda6 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	689b      	ldr	r3, [r3, #8]
 800fd90:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d11a      	bne.n	800fdce <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7fe f859 	bl	800de54 <create_chain>
 800fda2:	62b8      	str	r0, [r7, #40]	; 0x28
 800fda4:	e013      	b.n	800fdce <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d007      	beq.n	800fdbe <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	699b      	ldr	r3, [r3, #24]
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	68f8      	ldr	r0, [r7, #12]
 800fdb6:	f7fe f8e5 	bl	800df84 <clmt_clust>
 800fdba:	62b8      	str	r0, [r7, #40]	; 0x28
 800fdbc:	e007      	b.n	800fdce <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fdbe:	68fa      	ldr	r2, [r7, #12]
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	69db      	ldr	r3, [r3, #28]
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	f7fe f844 	bl	800de54 <create_chain>
 800fdcc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	f000 8127 	beq.w	8010024 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	d109      	bne.n	800fdf0 <f_write+0x12e>
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2202      	movs	r2, #2
 800fde0:	755a      	strb	r2, [r3, #21]
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	2102      	movs	r1, #2
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fd fb56 	bl	800d498 <unlock_fs>
 800fdec:	2302      	movs	r3, #2
 800fdee:	e127      	b.n	8010040 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdf6:	d109      	bne.n	800fe0c <f_write+0x14a>
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	755a      	strb	r2, [r3, #21]
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	2101      	movs	r1, #1
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fd fb48 	bl	800d498 <unlock_fs>
 800fe08:	2301      	movs	r3, #1
 800fe0a:	e119      	b.n	8010040 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe10:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d102      	bne.n	800fe20 <f_write+0x15e>
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe1e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	7d1b      	ldrb	r3, [r3, #20]
 800fe24:	b25b      	sxtb	r3, r3
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	da1d      	bge.n	800fe66 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	7858      	ldrb	r0, [r3, #1]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	6a1a      	ldr	r2, [r3, #32]
 800fe38:	2301      	movs	r3, #1
 800fe3a:	f7fd f9d9 	bl	800d1f0 <disk_write>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d009      	beq.n	800fe58 <f_write+0x196>
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2201      	movs	r2, #1
 800fe48:	755a      	strb	r2, [r3, #21]
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	2101      	movs	r1, #1
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7fd fb22 	bl	800d498 <unlock_fs>
 800fe54:	2301      	movs	r3, #1
 800fe56:	e0f3      	b.n	8010040 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	7d1b      	ldrb	r3, [r3, #20]
 800fe5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe60:	b2da      	uxtb	r2, r3
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fe66:	693a      	ldr	r2, [r7, #16]
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	69db      	ldr	r3, [r3, #28]
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	4610      	mov	r0, r2
 800fe70:	f7fd fd7c 	bl	800d96c <clust2sect>
 800fe74:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d109      	bne.n	800fe90 <f_write+0x1ce>
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2202      	movs	r2, #2
 800fe80:	755a      	strb	r2, [r3, #21]
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	2102      	movs	r1, #2
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fd fb06 	bl	800d498 <unlock_fs>
 800fe8c:	2302      	movs	r3, #2
 800fe8e:	e0d7      	b.n	8010040 <f_write+0x37e>
			sect += csect;
 800fe90:	697a      	ldr	r2, [r7, #20]
 800fe92:	69bb      	ldr	r3, [r7, #24]
 800fe94:	4413      	add	r3, r2
 800fe96:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	899b      	ldrh	r3, [r3, #12]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fea4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fea6:	6a3b      	ldr	r3, [r7, #32]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d048      	beq.n	800ff3e <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800feac:	69ba      	ldr	r2, [r7, #24]
 800feae:	6a3b      	ldr	r3, [r7, #32]
 800feb0:	4413      	add	r3, r2
 800feb2:	693a      	ldr	r2, [r7, #16]
 800feb4:	8952      	ldrh	r2, [r2, #10]
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d905      	bls.n	800fec6 <f_write+0x204>
					cc = fs->csize - csect;
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	895b      	ldrh	r3, [r3, #10]
 800febe:	461a      	mov	r2, r3
 800fec0:	69bb      	ldr	r3, [r7, #24]
 800fec2:	1ad3      	subs	r3, r2, r3
 800fec4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	7858      	ldrb	r0, [r3, #1]
 800feca:	6a3b      	ldr	r3, [r7, #32]
 800fecc:	697a      	ldr	r2, [r7, #20]
 800fece:	69f9      	ldr	r1, [r7, #28]
 800fed0:	f7fd f98e 	bl	800d1f0 <disk_write>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d009      	beq.n	800feee <f_write+0x22c>
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2201      	movs	r2, #1
 800fede:	755a      	strb	r2, [r3, #21]
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	2101      	movs	r1, #1
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fd fad7 	bl	800d498 <unlock_fs>
 800feea:	2301      	movs	r3, #1
 800feec:	e0a8      	b.n	8010040 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	6a1a      	ldr	r2, [r3, #32]
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	1ad3      	subs	r3, r2, r3
 800fef6:	6a3a      	ldr	r2, [r7, #32]
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d918      	bls.n	800ff2e <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	6a1a      	ldr	r2, [r3, #32]
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	693a      	ldr	r2, [r7, #16]
 800ff0c:	8992      	ldrh	r2, [r2, #12]
 800ff0e:	fb02 f303 	mul.w	r3, r2, r3
 800ff12:	69fa      	ldr	r2, [r7, #28]
 800ff14:	18d1      	adds	r1, r2, r3
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	899b      	ldrh	r3, [r3, #12]
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	f7fd fa28 	bl	800d370 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	7d1b      	ldrb	r3, [r3, #20]
 800ff24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff28:	b2da      	uxtb	r2, r3
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	899b      	ldrh	r3, [r3, #12]
 800ff32:	461a      	mov	r2, r3
 800ff34:	6a3b      	ldr	r3, [r7, #32]
 800ff36:	fb02 f303 	mul.w	r3, r2, r3
 800ff3a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ff3c:	e050      	b.n	800ffe0 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	6a1b      	ldr	r3, [r3, #32]
 800ff42:	697a      	ldr	r2, [r7, #20]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d01b      	beq.n	800ff80 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	699a      	ldr	r2, [r3, #24]
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d215      	bcs.n	800ff80 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	7858      	ldrb	r0, [r3, #1]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff5e:	2301      	movs	r3, #1
 800ff60:	697a      	ldr	r2, [r7, #20]
 800ff62:	f7fd f925 	bl	800d1b0 <disk_read>
 800ff66:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d009      	beq.n	800ff80 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	755a      	strb	r2, [r3, #21]
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	2101      	movs	r1, #1
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fd fa8e 	bl	800d498 <unlock_fs>
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	e05f      	b.n	8010040 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	697a      	ldr	r2, [r7, #20]
 800ff84:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	899b      	ldrh	r3, [r3, #12]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	699b      	ldr	r3, [r3, #24]
 800ff90:	693a      	ldr	r2, [r7, #16]
 800ff92:	8992      	ldrh	r2, [r2, #12]
 800ff94:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff98:	fb02 f201 	mul.w	r2, r2, r1
 800ff9c:	1a9b      	subs	r3, r3, r2
 800ff9e:	1ac3      	subs	r3, r0, r3
 800ffa0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ffa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d901      	bls.n	800ffae <f_write+0x2ec>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	699b      	ldr	r3, [r3, #24]
 800ffb8:	693a      	ldr	r2, [r7, #16]
 800ffba:	8992      	ldrh	r2, [r2, #12]
 800ffbc:	fbb3 f0f2 	udiv	r0, r3, r2
 800ffc0:	fb02 f200 	mul.w	r2, r2, r0
 800ffc4:	1a9b      	subs	r3, r3, r2
 800ffc6:	440b      	add	r3, r1
 800ffc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffca:	69f9      	ldr	r1, [r7, #28]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7fd f9cf 	bl	800d370 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	7d1b      	ldrb	r3, [r3, #20]
 800ffd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ffda:	b2da      	uxtb	r2, r3
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ffe0:	69fa      	ldr	r2, [r7, #28]
 800ffe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe4:	4413      	add	r3, r2
 800ffe6:	61fb      	str	r3, [r7, #28]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	699a      	ldr	r2, [r3, #24]
 800ffec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffee:	441a      	add	r2, r3
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	619a      	str	r2, [r3, #24]
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	68da      	ldr	r2, [r3, #12]
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	699b      	ldr	r3, [r3, #24]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	bf38      	it	cc
 8010000:	461a      	movcc	r2, r3
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	60da      	str	r2, [r3, #12]
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000c:	441a      	add	r2, r3
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	601a      	str	r2, [r3, #0]
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	f47f ae97 	bne.w	800fd50 <f_write+0x8e>
 8010022:	e000      	b.n	8010026 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010024:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	7d1b      	ldrb	r3, [r3, #20]
 801002a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801002e:	b2da      	uxtb	r2, r3
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	2100      	movs	r1, #0
 8010038:	4618      	mov	r0, r3
 801003a:	f7fd fa2d 	bl	800d498 <unlock_fs>
 801003e:	2300      	movs	r3, #0
}
 8010040:	4618      	mov	r0, r3
 8010042:	3730      	adds	r7, #48	; 0x30
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b086      	sub	sp, #24
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f107 0208 	add.w	r2, r7, #8
 8010056:	4611      	mov	r1, r2
 8010058:	4618      	mov	r0, r3
 801005a:	f7ff fb23 	bl	800f6a4 <validate>
 801005e:	4603      	mov	r3, r0
 8010060:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010062:	7dfb      	ldrb	r3, [r7, #23]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d16d      	bne.n	8010144 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	7d1b      	ldrb	r3, [r3, #20]
 801006c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010070:	2b00      	cmp	r3, #0
 8010072:	d067      	beq.n	8010144 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	7d1b      	ldrb	r3, [r3, #20]
 8010078:	b25b      	sxtb	r3, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	da1a      	bge.n	80100b4 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	7858      	ldrb	r0, [r3, #1]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6a1a      	ldr	r2, [r3, #32]
 801008c:	2301      	movs	r3, #1
 801008e:	f7fd f8af 	bl	800d1f0 <disk_write>
 8010092:	4603      	mov	r3, r0
 8010094:	2b00      	cmp	r3, #0
 8010096:	d006      	beq.n	80100a6 <f_sync+0x5e>
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	2101      	movs	r1, #1
 801009c:	4618      	mov	r0, r3
 801009e:	f7fd f9fb 	bl	800d498 <unlock_fs>
 80100a2:	2301      	movs	r3, #1
 80100a4:	e055      	b.n	8010152 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	7d1b      	ldrb	r3, [r3, #20]
 80100aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80100b4:	f7fb fb4a 	bl	800b74c <get_fattime>
 80100b8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80100ba:	68ba      	ldr	r2, [r7, #8]
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c0:	4619      	mov	r1, r3
 80100c2:	4610      	mov	r0, r2
 80100c4:	f7fd fbb4 	bl	800d830 <move_window>
 80100c8:	4603      	mov	r3, r0
 80100ca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80100cc:	7dfb      	ldrb	r3, [r7, #23]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d138      	bne.n	8010144 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100d6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	330b      	adds	r3, #11
 80100dc:	781a      	ldrb	r2, [r3, #0]
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	330b      	adds	r3, #11
 80100e2:	f042 0220 	orr.w	r2, r2, #32
 80100e6:	b2d2      	uxtb	r2, r2
 80100e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6818      	ldr	r0, [r3, #0]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	689b      	ldr	r3, [r3, #8]
 80100f2:	461a      	mov	r2, r3
 80100f4:	68f9      	ldr	r1, [r7, #12]
 80100f6:	f7fe f942 	bl	800e37e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	f103 021c 	add.w	r2, r3, #28
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	4619      	mov	r1, r3
 8010106:	4610      	mov	r0, r2
 8010108:	f7fd f906 	bl	800d318 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	3316      	adds	r3, #22
 8010110:	6939      	ldr	r1, [r7, #16]
 8010112:	4618      	mov	r0, r3
 8010114:	f7fd f900 	bl	800d318 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	3312      	adds	r3, #18
 801011c:	2100      	movs	r1, #0
 801011e:	4618      	mov	r0, r3
 8010120:	f7fd f8df 	bl	800d2e2 <st_word>
					fs->wflag = 1;
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	2201      	movs	r2, #1
 8010128:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	4618      	mov	r0, r3
 801012e:	f7fd fbad 	bl	800d88c <sync_fs>
 8010132:	4603      	mov	r3, r0
 8010134:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	7d1b      	ldrb	r3, [r3, #20]
 801013a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801013e:	b2da      	uxtb	r2, r3
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	7dfa      	ldrb	r2, [r7, #23]
 8010148:	4611      	mov	r1, r2
 801014a:	4618      	mov	r0, r3
 801014c:	f7fd f9a4 	bl	800d498 <unlock_fs>
 8010150:	7dfb      	ldrb	r3, [r7, #23]
}
 8010152:	4618      	mov	r0, r3
 8010154:	3718      	adds	r7, #24
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}

0801015a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801015a:	b580      	push	{r7, lr}
 801015c:	b084      	sub	sp, #16
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f7ff ff70 	bl	8010048 <f_sync>
 8010168:	4603      	mov	r3, r0
 801016a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801016c:	7bfb      	ldrb	r3, [r7, #15]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d11d      	bne.n	80101ae <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f107 0208 	add.w	r2, r7, #8
 8010178:	4611      	mov	r1, r2
 801017a:	4618      	mov	r0, r3
 801017c:	f7ff fa92 	bl	800f6a4 <validate>
 8010180:	4603      	mov	r3, r0
 8010182:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010184:	7bfb      	ldrb	r3, [r7, #15]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d111      	bne.n	80101ae <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	691b      	ldr	r3, [r3, #16]
 801018e:	4618      	mov	r0, r3
 8010190:	f7fd faaa 	bl	800d6e8 <dec_lock>
 8010194:	4603      	mov	r3, r0
 8010196:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010198:	7bfb      	ldrb	r3, [r7, #15]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d102      	bne.n	80101a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2200      	movs	r2, #0
 80101a2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	2100      	movs	r1, #0
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7fd f975 	bl	800d498 <unlock_fs>
#endif
		}
	}
	return res;
 80101ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	3710      	adds	r7, #16
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80101be:	af00      	add	r7, sp, #0
 80101c0:	1d3b      	adds	r3, r7, #4
 80101c2:	6018      	str	r0, [r3, #0]
 80101c4:	463b      	mov	r3, r7
 80101c6:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80101c8:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80101cc:	1d3b      	adds	r3, r7, #4
 80101ce:	2200      	movs	r2, #0
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fe ffdd 	bl	800f190 <find_volume>
 80101d6:	4603      	mov	r3, r0
 80101d8:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 80101dc:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d127      	bne.n	8010234 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 80101e4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80101e8:	f107 0208 	add.w	r2, r7, #8
 80101ec:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80101ee:	1d3b      	adds	r3, r7, #4
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80101f6:	4611      	mov	r1, r2
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fe feb9 	bl	800ef70 <follow_path>
 80101fe:	4603      	mov	r3, r0
 8010200:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8010204:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8010208:	2b00      	cmp	r3, #0
 801020a:	d113      	bne.n	8010234 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801020c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8010210:	b25b      	sxtb	r3, r3
 8010212:	2b00      	cmp	r3, #0
 8010214:	da03      	bge.n	801021e <f_stat+0x66>
				res = FR_INVALID_NAME;
 8010216:	2306      	movs	r3, #6
 8010218:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 801021c:	e00a      	b.n	8010234 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801021e:	463b      	mov	r3, r7
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d006      	beq.n	8010234 <f_stat+0x7c>
 8010226:	463b      	mov	r3, r7
 8010228:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801022c:	6819      	ldr	r1, [r3, #0]
 801022e:	4610      	mov	r0, r2
 8010230:	f7fe fc08 	bl	800ea44 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8010234:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8010238:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 801023c:	4611      	mov	r1, r2
 801023e:	4618      	mov	r0, r3
 8010240:	f7fd f92a 	bl	800d498 <unlock_fs>
 8010244:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8010248:	4618      	mov	r0, r3
 801024a:	f507 7710 	add.w	r7, r7, #576	; 0x240
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}

08010252 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010252:	b580      	push	{r7, lr}
 8010254:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8010258:	af00      	add	r7, sp, #0
 801025a:	1d3b      	adds	r3, r7, #4
 801025c:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801025e:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8010262:	1d3b      	adds	r3, r7, #4
 8010264:	2202      	movs	r2, #2
 8010266:	4618      	mov	r0, r3
 8010268:	f7fe ff92 	bl	800f190 <find_volume>
 801026c:	4603      	mov	r3, r0
 801026e:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	dj.obj.fs = fs;
 8010272:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010276:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	if (res == FR_OK) {
 801027a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801027e:	2b00      	cmp	r3, #0
 8010280:	f040 8134 	bne.w	80104ec <f_mkdir+0x29a>
		INIT_NAMBUF(fs);
 8010284:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010288:	f107 020c 	add.w	r2, r7, #12
 801028c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 801028e:	1d3b      	adds	r3, r7, #4
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8010296:	4611      	mov	r1, r2
 8010298:	4618      	mov	r0, r3
 801029a:	f7fe fe69 	bl	800ef70 <follow_path>
 801029e:	4603      	mov	r3, r0
 80102a0:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80102a4:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d102      	bne.n	80102b2 <f_mkdir+0x60>
 80102ac:	2308      	movs	r3, #8
 80102ae:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80102b2:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80102b6:	2b04      	cmp	r3, #4
 80102b8:	f040 8118 	bne.w	80104ec <f_mkdir+0x29a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80102bc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80102c0:	2100      	movs	r1, #0
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fd fdc6 	bl	800de54 <create_chain>
 80102c8:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80102cc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80102d0:	895b      	ldrh	r3, [r3, #10]
 80102d2:	461a      	mov	r2, r3
 80102d4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80102d8:	899b      	ldrh	r3, [r3, #12]
 80102da:	fb03 f302 	mul.w	r3, r3, r2
 80102de:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			res = FR_OK;
 80102e2:	2300      	movs	r3, #0
 80102e4:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80102e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d102      	bne.n	80102f6 <f_mkdir+0xa4>
 80102f0:	2307      	movs	r3, #7
 80102f2:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 1) res = FR_INT_ERR;
 80102f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80102fa:	2b01      	cmp	r3, #1
 80102fc:	d102      	bne.n	8010304 <f_mkdir+0xb2>
 80102fe:	2302      	movs	r3, #2
 8010300:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010304:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801030c:	d102      	bne.n	8010314 <f_mkdir+0xc2>
 801030e:	2301      	movs	r3, #1
 8010310:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010314:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8010318:	2b00      	cmp	r3, #0
 801031a:	d107      	bne.n	801032c <f_mkdir+0xda>
 801031c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010320:	4618      	mov	r0, r3
 8010322:	f7fd fa41 	bl	800d7a8 <sync_window>
 8010326:	4603      	mov	r3, r0
 8010328:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			tm = GET_FATTIME();
 801032c:	f7fb fa0e 	bl	800b74c <get_fattime>
 8010330:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010334:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8010338:	2b00      	cmp	r3, #0
 801033a:	f040 8094 	bne.w	8010466 <f_mkdir+0x214>
				dsc = clust2sect(fs, dcl);
 801033e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010342:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8010346:	4618      	mov	r0, r3
 8010348:	f7fd fb10 	bl	800d96c <clust2sect>
 801034c:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				dir = fs->win;
 8010350:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010354:	333c      	adds	r3, #60	; 0x3c
 8010356:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				mem_set(dir, 0, SS(fs));
 801035a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801035e:	899b      	ldrh	r3, [r3, #12]
 8010360:	461a      	mov	r2, r3
 8010362:	2100      	movs	r1, #0
 8010364:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8010368:	f7fd f823 	bl	800d3b2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801036c:	220b      	movs	r2, #11
 801036e:	2120      	movs	r1, #32
 8010370:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8010374:	f7fd f81d 	bl	800d3b2 <mem_set>
					dir[DIR_Name] = '.';
 8010378:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801037c:	222e      	movs	r2, #46	; 0x2e
 801037e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010380:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8010384:	330b      	adds	r3, #11
 8010386:	2210      	movs	r2, #16
 8010388:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801038a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801038e:	3316      	adds	r3, #22
 8010390:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8010394:	4618      	mov	r0, r3
 8010396:	f7fc ffbf 	bl	800d318 <st_dword>
					st_clust(fs, dir, dcl);
 801039a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801039e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80103a2:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fd ffe9 	bl	800e37e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80103ac:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80103b0:	3320      	adds	r3, #32
 80103b2:	2220      	movs	r2, #32
 80103b4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fc ffd9 	bl	800d370 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80103be:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80103c2:	3321      	adds	r3, #33	; 0x21
 80103c4:	222e      	movs	r2, #46	; 0x2e
 80103c6:	701a      	strb	r2, [r3, #0]
 80103c8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80103cc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80103d0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	2b03      	cmp	r3, #3
 80103d8:	d109      	bne.n	80103ee <f_mkdir+0x19c>
 80103da:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80103de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103e0:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d102      	bne.n	80103ee <f_mkdir+0x19c>
 80103e8:	2300      	movs	r3, #0
 80103ea:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					st_clust(fs, dir + SZDIRE, pcl);
 80103ee:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80103f2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80103f6:	3320      	adds	r3, #32
 80103f8:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80103fc:	4619      	mov	r1, r3
 80103fe:	f7fd ffbe 	bl	800e37e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010402:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010406:	895b      	ldrh	r3, [r3, #10]
 8010408:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 801040c:	e025      	b.n	801045a <f_mkdir+0x208>
					fs->winsect = dsc++;
 801040e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8010412:	1c5a      	adds	r2, r3, #1
 8010414:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 8010418:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801041c:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 801041e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010422:	2201      	movs	r2, #1
 8010424:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8010426:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801042a:	4618      	mov	r0, r3
 801042c:	f7fd f9bc 	bl	800d7a8 <sync_window>
 8010430:	4603      	mov	r3, r0
 8010432:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					if (res != FR_OK) break;
 8010436:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801043a:	2b00      	cmp	r3, #0
 801043c:	d112      	bne.n	8010464 <f_mkdir+0x212>
					mem_set(dir, 0, SS(fs));
 801043e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010442:	899b      	ldrh	r3, [r3, #12]
 8010444:	461a      	mov	r2, r3
 8010446:	2100      	movs	r1, #0
 8010448:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 801044c:	f7fc ffb1 	bl	800d3b2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010450:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8010454:	3b01      	subs	r3, #1
 8010456:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 801045a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1d5      	bne.n	801040e <f_mkdir+0x1bc>
 8010462:	e000      	b.n	8010466 <f_mkdir+0x214>
					if (res != FR_OK) break;
 8010464:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010466:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801046a:	2b00      	cmp	r3, #0
 801046c:	d107      	bne.n	801047e <f_mkdir+0x22c>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801046e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8010472:	4618      	mov	r0, r3
 8010474:	f7fe f9ee 	bl	800e854 <dir_register>
 8010478:	4603      	mov	r3, r0
 801047a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			}
			if (res == FR_OK) {
 801047e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8010482:	2b00      	cmp	r3, #0
 8010484:	d12a      	bne.n	80104dc <f_mkdir+0x28a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8010486:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801048a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801048e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8010492:	3316      	adds	r3, #22
 8010494:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8010498:	4618      	mov	r0, r3
 801049a:	f7fc ff3d 	bl	800d318 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801049e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80104a2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80104a6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7fd ff67 	bl	800e37e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80104b0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80104b4:	330b      	adds	r3, #11
 80104b6:	2210      	movs	r2, #16
 80104b8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80104ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80104be:	2201      	movs	r2, #1
 80104c0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80104c2:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d110      	bne.n	80104ec <f_mkdir+0x29a>
					res = sync_fs(fs);
 80104ca:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7fd f9dc 	bl	800d88c <sync_fs>
 80104d4:	4603      	mov	r3, r0
 80104d6:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 80104da:	e007      	b.n	80104ec <f_mkdir+0x29a>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80104dc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80104e0:	2200      	movs	r2, #0
 80104e2:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7fd fc4f 	bl	800dd8a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80104ec:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80104f0:	f897 225f 	ldrb.w	r2, [r7, #607]	; 0x25f
 80104f4:	4611      	mov	r1, r2
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fc ffce 	bl	800d498 <unlock_fs>
 80104fc:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 8010500:	4618      	mov	r0, r3
 8010502:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}
	...

0801050c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801050c:	b480      	push	{r7}
 801050e:	b087      	sub	sp, #28
 8010510:	af00      	add	r7, sp, #0
 8010512:	60f8      	str	r0, [r7, #12]
 8010514:	60b9      	str	r1, [r7, #8]
 8010516:	4613      	mov	r3, r2
 8010518:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801051a:	2301      	movs	r3, #1
 801051c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801051e:	2300      	movs	r3, #0
 8010520:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010522:	4b1f      	ldr	r3, [pc, #124]	; (80105a0 <FATFS_LinkDriverEx+0x94>)
 8010524:	7a5b      	ldrb	r3, [r3, #9]
 8010526:	b2db      	uxtb	r3, r3
 8010528:	2b00      	cmp	r3, #0
 801052a:	d131      	bne.n	8010590 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801052c:	4b1c      	ldr	r3, [pc, #112]	; (80105a0 <FATFS_LinkDriverEx+0x94>)
 801052e:	7a5b      	ldrb	r3, [r3, #9]
 8010530:	b2db      	uxtb	r3, r3
 8010532:	461a      	mov	r2, r3
 8010534:	4b1a      	ldr	r3, [pc, #104]	; (80105a0 <FATFS_LinkDriverEx+0x94>)
 8010536:	2100      	movs	r1, #0
 8010538:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801053a:	4b19      	ldr	r3, [pc, #100]	; (80105a0 <FATFS_LinkDriverEx+0x94>)
 801053c:	7a5b      	ldrb	r3, [r3, #9]
 801053e:	b2db      	uxtb	r3, r3
 8010540:	4a17      	ldr	r2, [pc, #92]	; (80105a0 <FATFS_LinkDriverEx+0x94>)
 8010542:	009b      	lsls	r3, r3, #2
 8010544:	4413      	add	r3, r2
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801054a:	4b15      	ldr	r3, [pc, #84]	; (80105a0 <FATFS_LinkDriverEx+0x94>)
 801054c:	7a5b      	ldrb	r3, [r3, #9]
 801054e:	b2db      	uxtb	r3, r3
 8010550:	461a      	mov	r2, r3
 8010552:	4b13      	ldr	r3, [pc, #76]	; (80105a0 <FATFS_LinkDriverEx+0x94>)
 8010554:	4413      	add	r3, r2
 8010556:	79fa      	ldrb	r2, [r7, #7]
 8010558:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801055a:	4b11      	ldr	r3, [pc, #68]	; (80105a0 <FATFS_LinkDriverEx+0x94>)
 801055c:	7a5b      	ldrb	r3, [r3, #9]
 801055e:	b2db      	uxtb	r3, r3
 8010560:	1c5a      	adds	r2, r3, #1
 8010562:	b2d1      	uxtb	r1, r2
 8010564:	4a0e      	ldr	r2, [pc, #56]	; (80105a0 <FATFS_LinkDriverEx+0x94>)
 8010566:	7251      	strb	r1, [r2, #9]
 8010568:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801056a:	7dbb      	ldrb	r3, [r7, #22]
 801056c:	3330      	adds	r3, #48	; 0x30
 801056e:	b2da      	uxtb	r2, r3
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	3301      	adds	r3, #1
 8010578:	223a      	movs	r2, #58	; 0x3a
 801057a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	3302      	adds	r3, #2
 8010580:	222f      	movs	r2, #47	; 0x2f
 8010582:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	3303      	adds	r3, #3
 8010588:	2200      	movs	r2, #0
 801058a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801058c:	2300      	movs	r3, #0
 801058e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010590:	7dfb      	ldrb	r3, [r7, #23]
}
 8010592:	4618      	mov	r0, r3
 8010594:	371c      	adds	r7, #28
 8010596:	46bd      	mov	sp, r7
 8010598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059c:	4770      	bx	lr
 801059e:	bf00      	nop
 80105a0:	200007b4 	.word	0x200007b4

080105a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80105ae:	2200      	movs	r2, #0
 80105b0:	6839      	ldr	r1, [r7, #0]
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f7ff ffaa 	bl	801050c <FATFS_LinkDriverEx>
 80105b8:	4603      	mov	r3, r0
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3708      	adds	r7, #8
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
	...

080105c4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b085      	sub	sp, #20
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	4603      	mov	r3, r0
 80105cc:	6039      	str	r1, [r7, #0]
 80105ce:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80105d0:	88fb      	ldrh	r3, [r7, #6]
 80105d2:	2b7f      	cmp	r3, #127	; 0x7f
 80105d4:	d802      	bhi.n	80105dc <ff_convert+0x18>
		c = chr;
 80105d6:	88fb      	ldrh	r3, [r7, #6]
 80105d8:	81fb      	strh	r3, [r7, #14]
 80105da:	e025      	b.n	8010628 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d00b      	beq.n	80105fa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80105e2:	88fb      	ldrh	r3, [r7, #6]
 80105e4:	2bff      	cmp	r3, #255	; 0xff
 80105e6:	d805      	bhi.n	80105f4 <ff_convert+0x30>
 80105e8:	88fb      	ldrh	r3, [r7, #6]
 80105ea:	3b80      	subs	r3, #128	; 0x80
 80105ec:	4a12      	ldr	r2, [pc, #72]	; (8010638 <ff_convert+0x74>)
 80105ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105f2:	e000      	b.n	80105f6 <ff_convert+0x32>
 80105f4:	2300      	movs	r3, #0
 80105f6:	81fb      	strh	r3, [r7, #14]
 80105f8:	e016      	b.n	8010628 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80105fa:	2300      	movs	r3, #0
 80105fc:	81fb      	strh	r3, [r7, #14]
 80105fe:	e009      	b.n	8010614 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010600:	89fb      	ldrh	r3, [r7, #14]
 8010602:	4a0d      	ldr	r2, [pc, #52]	; (8010638 <ff_convert+0x74>)
 8010604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010608:	88fa      	ldrh	r2, [r7, #6]
 801060a:	429a      	cmp	r2, r3
 801060c:	d006      	beq.n	801061c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801060e:	89fb      	ldrh	r3, [r7, #14]
 8010610:	3301      	adds	r3, #1
 8010612:	81fb      	strh	r3, [r7, #14]
 8010614:	89fb      	ldrh	r3, [r7, #14]
 8010616:	2b7f      	cmp	r3, #127	; 0x7f
 8010618:	d9f2      	bls.n	8010600 <ff_convert+0x3c>
 801061a:	e000      	b.n	801061e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801061c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801061e:	89fb      	ldrh	r3, [r7, #14]
 8010620:	3380      	adds	r3, #128	; 0x80
 8010622:	b29b      	uxth	r3, r3
 8010624:	b2db      	uxtb	r3, r3
 8010626:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010628:	89fb      	ldrh	r3, [r7, #14]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3714      	adds	r7, #20
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr
 8010636:	bf00      	nop
 8010638:	0801899c 	.word	0x0801899c

0801063c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801063c:	b480      	push	{r7}
 801063e:	b087      	sub	sp, #28
 8010640:	af00      	add	r7, sp, #0
 8010642:	4603      	mov	r3, r0
 8010644:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010646:	88fb      	ldrh	r3, [r7, #6]
 8010648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801064c:	d201      	bcs.n	8010652 <ff_wtoupper+0x16>
 801064e:	4b3e      	ldr	r3, [pc, #248]	; (8010748 <ff_wtoupper+0x10c>)
 8010650:	e000      	b.n	8010654 <ff_wtoupper+0x18>
 8010652:	4b3e      	ldr	r3, [pc, #248]	; (801074c <ff_wtoupper+0x110>)
 8010654:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	1c9a      	adds	r2, r3, #2
 801065a:	617a      	str	r2, [r7, #20]
 801065c:	881b      	ldrh	r3, [r3, #0]
 801065e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010660:	8a7b      	ldrh	r3, [r7, #18]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d068      	beq.n	8010738 <ff_wtoupper+0xfc>
 8010666:	88fa      	ldrh	r2, [r7, #6]
 8010668:	8a7b      	ldrh	r3, [r7, #18]
 801066a:	429a      	cmp	r2, r3
 801066c:	d364      	bcc.n	8010738 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	1c9a      	adds	r2, r3, #2
 8010672:	617a      	str	r2, [r7, #20]
 8010674:	881b      	ldrh	r3, [r3, #0]
 8010676:	823b      	strh	r3, [r7, #16]
 8010678:	8a3b      	ldrh	r3, [r7, #16]
 801067a:	0a1b      	lsrs	r3, r3, #8
 801067c:	81fb      	strh	r3, [r7, #14]
 801067e:	8a3b      	ldrh	r3, [r7, #16]
 8010680:	b2db      	uxtb	r3, r3
 8010682:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010684:	88fa      	ldrh	r2, [r7, #6]
 8010686:	8a79      	ldrh	r1, [r7, #18]
 8010688:	8a3b      	ldrh	r3, [r7, #16]
 801068a:	440b      	add	r3, r1
 801068c:	429a      	cmp	r2, r3
 801068e:	da49      	bge.n	8010724 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010690:	89fb      	ldrh	r3, [r7, #14]
 8010692:	2b08      	cmp	r3, #8
 8010694:	d84f      	bhi.n	8010736 <ff_wtoupper+0xfa>
 8010696:	a201      	add	r2, pc, #4	; (adr r2, 801069c <ff_wtoupper+0x60>)
 8010698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801069c:	080106c1 	.word	0x080106c1
 80106a0:	080106d3 	.word	0x080106d3
 80106a4:	080106e9 	.word	0x080106e9
 80106a8:	080106f1 	.word	0x080106f1
 80106ac:	080106f9 	.word	0x080106f9
 80106b0:	08010701 	.word	0x08010701
 80106b4:	08010709 	.word	0x08010709
 80106b8:	08010711 	.word	0x08010711
 80106bc:	08010719 	.word	0x08010719
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80106c0:	88fa      	ldrh	r2, [r7, #6]
 80106c2:	8a7b      	ldrh	r3, [r7, #18]
 80106c4:	1ad3      	subs	r3, r2, r3
 80106c6:	005b      	lsls	r3, r3, #1
 80106c8:	697a      	ldr	r2, [r7, #20]
 80106ca:	4413      	add	r3, r2
 80106cc:	881b      	ldrh	r3, [r3, #0]
 80106ce:	80fb      	strh	r3, [r7, #6]
 80106d0:	e027      	b.n	8010722 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80106d2:	88fa      	ldrh	r2, [r7, #6]
 80106d4:	8a7b      	ldrh	r3, [r7, #18]
 80106d6:	1ad3      	subs	r3, r2, r3
 80106d8:	b29b      	uxth	r3, r3
 80106da:	f003 0301 	and.w	r3, r3, #1
 80106de:	b29b      	uxth	r3, r3
 80106e0:	88fa      	ldrh	r2, [r7, #6]
 80106e2:	1ad3      	subs	r3, r2, r3
 80106e4:	80fb      	strh	r3, [r7, #6]
 80106e6:	e01c      	b.n	8010722 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80106e8:	88fb      	ldrh	r3, [r7, #6]
 80106ea:	3b10      	subs	r3, #16
 80106ec:	80fb      	strh	r3, [r7, #6]
 80106ee:	e018      	b.n	8010722 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80106f0:	88fb      	ldrh	r3, [r7, #6]
 80106f2:	3b20      	subs	r3, #32
 80106f4:	80fb      	strh	r3, [r7, #6]
 80106f6:	e014      	b.n	8010722 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80106f8:	88fb      	ldrh	r3, [r7, #6]
 80106fa:	3b30      	subs	r3, #48	; 0x30
 80106fc:	80fb      	strh	r3, [r7, #6]
 80106fe:	e010      	b.n	8010722 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010700:	88fb      	ldrh	r3, [r7, #6]
 8010702:	3b1a      	subs	r3, #26
 8010704:	80fb      	strh	r3, [r7, #6]
 8010706:	e00c      	b.n	8010722 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010708:	88fb      	ldrh	r3, [r7, #6]
 801070a:	3308      	adds	r3, #8
 801070c:	80fb      	strh	r3, [r7, #6]
 801070e:	e008      	b.n	8010722 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010710:	88fb      	ldrh	r3, [r7, #6]
 8010712:	3b50      	subs	r3, #80	; 0x50
 8010714:	80fb      	strh	r3, [r7, #6]
 8010716:	e004      	b.n	8010722 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010718:	88fb      	ldrh	r3, [r7, #6]
 801071a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801071e:	80fb      	strh	r3, [r7, #6]
 8010720:	bf00      	nop
			}
			break;
 8010722:	e008      	b.n	8010736 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010724:	89fb      	ldrh	r3, [r7, #14]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d195      	bne.n	8010656 <ff_wtoupper+0x1a>
 801072a:	8a3b      	ldrh	r3, [r7, #16]
 801072c:	005b      	lsls	r3, r3, #1
 801072e:	697a      	ldr	r2, [r7, #20]
 8010730:	4413      	add	r3, r2
 8010732:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010734:	e78f      	b.n	8010656 <ff_wtoupper+0x1a>
			break;
 8010736:	bf00      	nop
	}

	return chr;
 8010738:	88fb      	ldrh	r3, [r7, #6]
}
 801073a:	4618      	mov	r0, r3
 801073c:	371c      	adds	r7, #28
 801073e:	46bd      	mov	sp, r7
 8010740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop
 8010748:	08018a9c 	.word	0x08018a9c
 801074c:	08018c90 	.word	0x08018c90

08010750 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b084      	sub	sp, #16
 8010754:	af00      	add	r7, sp, #0
 8010756:	4603      	mov	r3, r0
 8010758:	6039      	str	r1, [r7, #0]
 801075a:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801075c:	2200      	movs	r2, #0
 801075e:	2101      	movs	r1, #1
 8010760:	2001      	movs	r0, #1
 8010762:	f000 f978 	bl	8010a56 <osSemaphoreNew>
 8010766:	4602      	mov	r2, r0
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	2b00      	cmp	r3, #0
 8010772:	bf14      	ite	ne
 8010774:	2301      	movne	r3, #1
 8010776:	2300      	moveq	r3, #0
 8010778:	b2db      	uxtb	r3, r3
 801077a:	60fb      	str	r3, [r7, #12]

    return ret;
 801077c:	68fb      	ldr	r3, [r7, #12]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3710      	adds	r7, #16
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010786:	b580      	push	{r7, lr}
 8010788:	b082      	sub	sp, #8
 801078a:	af00      	add	r7, sp, #0
 801078c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 fa80 	bl	8010c94 <osSemaphoreDelete>
#endif
    return 1;
 8010794:	2301      	movs	r3, #1
}
 8010796:	4618      	mov	r0, r3
 8010798:	3708      	adds	r7, #8
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}

0801079e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801079e:	b580      	push	{r7, lr}
 80107a0:	b084      	sub	sp, #16
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80107a6:	2300      	movs	r3, #0
 80107a8:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80107aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f000 f9da 	bl	8010b68 <osSemaphoreAcquire>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d101      	bne.n	80107be <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80107ba:	2301      	movs	r3, #1
 80107bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80107be:	68fb      	ldr	r3, [r7, #12]
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3710      	adds	r7, #16
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}

080107c8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f000 fa1b 	bl	8010c0c <osSemaphoreRelease>
#endif
}
 80107d6:	bf00      	nop
 80107d8:	3708      	adds	r7, #8
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
	...

080107e0 <__NVIC_SetPriority>:
{
 80107e0:	b480      	push	{r7}
 80107e2:	b083      	sub	sp, #12
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	4603      	mov	r3, r0
 80107e8:	6039      	str	r1, [r7, #0]
 80107ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80107ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	db0a      	blt.n	801080a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	b2da      	uxtb	r2, r3
 80107f8:	490c      	ldr	r1, [pc, #48]	; (801082c <__NVIC_SetPriority+0x4c>)
 80107fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107fe:	0112      	lsls	r2, r2, #4
 8010800:	b2d2      	uxtb	r2, r2
 8010802:	440b      	add	r3, r1
 8010804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010808:	e00a      	b.n	8010820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	b2da      	uxtb	r2, r3
 801080e:	4908      	ldr	r1, [pc, #32]	; (8010830 <__NVIC_SetPriority+0x50>)
 8010810:	79fb      	ldrb	r3, [r7, #7]
 8010812:	f003 030f 	and.w	r3, r3, #15
 8010816:	3b04      	subs	r3, #4
 8010818:	0112      	lsls	r2, r2, #4
 801081a:	b2d2      	uxtb	r2, r2
 801081c:	440b      	add	r3, r1
 801081e:	761a      	strb	r2, [r3, #24]
}
 8010820:	bf00      	nop
 8010822:	370c      	adds	r7, #12
 8010824:	46bd      	mov	sp, r7
 8010826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082a:	4770      	bx	lr
 801082c:	e000e100 	.word	0xe000e100
 8010830:	e000ed00 	.word	0xe000ed00

08010834 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010834:	b580      	push	{r7, lr}
 8010836:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010838:	4b05      	ldr	r3, [pc, #20]	; (8010850 <SysTick_Handler+0x1c>)
 801083a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801083c:	f002 fcae 	bl	801319c <xTaskGetSchedulerState>
 8010840:	4603      	mov	r3, r0
 8010842:	2b01      	cmp	r3, #1
 8010844:	d001      	beq.n	801084a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010846:	f003 fcd7 	bl	80141f8 <xPortSysTickHandler>
  }
}
 801084a:	bf00      	nop
 801084c:	bd80      	pop	{r7, pc}
 801084e:	bf00      	nop
 8010850:	e000e010 	.word	0xe000e010

08010854 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010854:	b580      	push	{r7, lr}
 8010856:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010858:	2100      	movs	r1, #0
 801085a:	f06f 0004 	mvn.w	r0, #4
 801085e:	f7ff ffbf 	bl	80107e0 <__NVIC_SetPriority>
#endif
}
 8010862:	bf00      	nop
 8010864:	bd80      	pop	{r7, pc}
	...

08010868 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801086e:	f3ef 8305 	mrs	r3, IPSR
 8010872:	603b      	str	r3, [r7, #0]
  return(result);
 8010874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010876:	2b00      	cmp	r3, #0
 8010878:	d003      	beq.n	8010882 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801087a:	f06f 0305 	mvn.w	r3, #5
 801087e:	607b      	str	r3, [r7, #4]
 8010880:	e00c      	b.n	801089c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010882:	4b0a      	ldr	r3, [pc, #40]	; (80108ac <osKernelInitialize+0x44>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d105      	bne.n	8010896 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801088a:	4b08      	ldr	r3, [pc, #32]	; (80108ac <osKernelInitialize+0x44>)
 801088c:	2201      	movs	r2, #1
 801088e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010890:	2300      	movs	r3, #0
 8010892:	607b      	str	r3, [r7, #4]
 8010894:	e002      	b.n	801089c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801089a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801089c:	687b      	ldr	r3, [r7, #4]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	370c      	adds	r7, #12
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop
 80108ac:	200007c0 	.word	0x200007c0

080108b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108b6:	f3ef 8305 	mrs	r3, IPSR
 80108ba:	603b      	str	r3, [r7, #0]
  return(result);
 80108bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d003      	beq.n	80108ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80108c2:	f06f 0305 	mvn.w	r3, #5
 80108c6:	607b      	str	r3, [r7, #4]
 80108c8:	e010      	b.n	80108ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80108ca:	4b0b      	ldr	r3, [pc, #44]	; (80108f8 <osKernelStart+0x48>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d109      	bne.n	80108e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80108d2:	f7ff ffbf 	bl	8010854 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80108d6:	4b08      	ldr	r3, [pc, #32]	; (80108f8 <osKernelStart+0x48>)
 80108d8:	2202      	movs	r2, #2
 80108da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80108dc:	f001 fe7c 	bl	80125d8 <vTaskStartScheduler>
      stat = osOK;
 80108e0:	2300      	movs	r3, #0
 80108e2:	607b      	str	r3, [r7, #4]
 80108e4:	e002      	b.n	80108ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80108e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80108ec:	687b      	ldr	r3, [r7, #4]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3708      	adds	r7, #8
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	200007c0 	.word	0x200007c0

080108fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b08e      	sub	sp, #56	; 0x38
 8010900:	af04      	add	r7, sp, #16
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010908:	2300      	movs	r3, #0
 801090a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801090c:	f3ef 8305 	mrs	r3, IPSR
 8010910:	617b      	str	r3, [r7, #20]
  return(result);
 8010912:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010914:	2b00      	cmp	r3, #0
 8010916:	d17e      	bne.n	8010a16 <osThreadNew+0x11a>
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d07b      	beq.n	8010a16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801091e:	2380      	movs	r3, #128	; 0x80
 8010920:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010922:	2318      	movs	r3, #24
 8010924:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010926:	2300      	movs	r3, #0
 8010928:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801092a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801092e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d045      	beq.n	80109c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d002      	beq.n	8010944 <osThreadNew+0x48>
        name = attr->name;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	699b      	ldr	r3, [r3, #24]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	699b      	ldr	r3, [r3, #24]
 8010950:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d008      	beq.n	801096a <osThreadNew+0x6e>
 8010958:	69fb      	ldr	r3, [r7, #28]
 801095a:	2b38      	cmp	r3, #56	; 0x38
 801095c:	d805      	bhi.n	801096a <osThreadNew+0x6e>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	f003 0301 	and.w	r3, r3, #1
 8010966:	2b00      	cmp	r3, #0
 8010968:	d001      	beq.n	801096e <osThreadNew+0x72>
        return (NULL);
 801096a:	2300      	movs	r3, #0
 801096c:	e054      	b.n	8010a18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	695b      	ldr	r3, [r3, #20]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d003      	beq.n	801097e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	695b      	ldr	r3, [r3, #20]
 801097a:	089b      	lsrs	r3, r3, #2
 801097c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	689b      	ldr	r3, [r3, #8]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d00e      	beq.n	80109a4 <osThreadNew+0xa8>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	68db      	ldr	r3, [r3, #12]
 801098a:	2bbf      	cmp	r3, #191	; 0xbf
 801098c:	d90a      	bls.n	80109a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010992:	2b00      	cmp	r3, #0
 8010994:	d006      	beq.n	80109a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	695b      	ldr	r3, [r3, #20]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d002      	beq.n	80109a4 <osThreadNew+0xa8>
        mem = 1;
 801099e:	2301      	movs	r3, #1
 80109a0:	61bb      	str	r3, [r7, #24]
 80109a2:	e010      	b.n	80109c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	689b      	ldr	r3, [r3, #8]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d10c      	bne.n	80109c6 <osThreadNew+0xca>
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d108      	bne.n	80109c6 <osThreadNew+0xca>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	691b      	ldr	r3, [r3, #16]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d104      	bne.n	80109c6 <osThreadNew+0xca>
          mem = 0;
 80109bc:	2300      	movs	r3, #0
 80109be:	61bb      	str	r3, [r7, #24]
 80109c0:	e001      	b.n	80109c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80109c6:	69bb      	ldr	r3, [r7, #24]
 80109c8:	2b01      	cmp	r3, #1
 80109ca:	d110      	bne.n	80109ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80109d4:	9202      	str	r2, [sp, #8]
 80109d6:	9301      	str	r3, [sp, #4]
 80109d8:	69fb      	ldr	r3, [r7, #28]
 80109da:	9300      	str	r3, [sp, #0]
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	6a3a      	ldr	r2, [r7, #32]
 80109e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109e2:	68f8      	ldr	r0, [r7, #12]
 80109e4:	f001 fba2 	bl	801212c <xTaskCreateStatic>
 80109e8:	4603      	mov	r3, r0
 80109ea:	613b      	str	r3, [r7, #16]
 80109ec:	e013      	b.n	8010a16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80109ee:	69bb      	ldr	r3, [r7, #24]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d110      	bne.n	8010a16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80109f4:	6a3b      	ldr	r3, [r7, #32]
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	f107 0310 	add.w	r3, r7, #16
 80109fc:	9301      	str	r3, [sp, #4]
 80109fe:	69fb      	ldr	r3, [r7, #28]
 8010a00:	9300      	str	r3, [sp, #0]
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a06:	68f8      	ldr	r0, [r7, #12]
 8010a08:	f001 fbed 	bl	80121e6 <xTaskCreate>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d001      	beq.n	8010a16 <osThreadNew+0x11a>
            hTask = NULL;
 8010a12:	2300      	movs	r3, #0
 8010a14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010a16:	693b      	ldr	r3, [r7, #16]
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3728      	adds	r7, #40	; 0x28
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a28:	f3ef 8305 	mrs	r3, IPSR
 8010a2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8010a2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d003      	beq.n	8010a3c <osDelay+0x1c>
    stat = osErrorISR;
 8010a34:	f06f 0305 	mvn.w	r3, #5
 8010a38:	60fb      	str	r3, [r7, #12]
 8010a3a:	e007      	b.n	8010a4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d002      	beq.n	8010a4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f001 fd2c 	bl	80124a4 <vTaskDelay>
    }
  }

  return (stat);
 8010a4c:	68fb      	ldr	r3, [r7, #12]
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3710      	adds	r7, #16
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}

08010a56 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010a56:	b580      	push	{r7, lr}
 8010a58:	b08a      	sub	sp, #40	; 0x28
 8010a5a:	af02      	add	r7, sp, #8
 8010a5c:	60f8      	str	r0, [r7, #12]
 8010a5e:	60b9      	str	r1, [r7, #8]
 8010a60:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010a62:	2300      	movs	r3, #0
 8010a64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a66:	f3ef 8305 	mrs	r3, IPSR
 8010a6a:	613b      	str	r3, [r7, #16]
  return(result);
 8010a6c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d175      	bne.n	8010b5e <osSemaphoreNew+0x108>
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d072      	beq.n	8010b5e <osSemaphoreNew+0x108>
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d86e      	bhi.n	8010b5e <osSemaphoreNew+0x108>
    mem = -1;
 8010a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d015      	beq.n	8010ab8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	689b      	ldr	r3, [r3, #8]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d006      	beq.n	8010aa2 <osSemaphoreNew+0x4c>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	2b4f      	cmp	r3, #79	; 0x4f
 8010a9a:	d902      	bls.n	8010aa2 <osSemaphoreNew+0x4c>
        mem = 1;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	61bb      	str	r3, [r7, #24]
 8010aa0:	e00c      	b.n	8010abc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	689b      	ldr	r3, [r3, #8]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d108      	bne.n	8010abc <osSemaphoreNew+0x66>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d104      	bne.n	8010abc <osSemaphoreNew+0x66>
          mem = 0;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	61bb      	str	r3, [r7, #24]
 8010ab6:	e001      	b.n	8010abc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ac2:	d04c      	beq.n	8010b5e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d128      	bne.n	8010b1c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8010aca:	69bb      	ldr	r3, [r7, #24]
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d10a      	bne.n	8010ae6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	689b      	ldr	r3, [r3, #8]
 8010ad4:	2203      	movs	r2, #3
 8010ad6:	9200      	str	r2, [sp, #0]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	2100      	movs	r1, #0
 8010adc:	2001      	movs	r0, #1
 8010ade:	f000 fb7f 	bl	80111e0 <xQueueGenericCreateStatic>
 8010ae2:	61f8      	str	r0, [r7, #28]
 8010ae4:	e005      	b.n	8010af2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8010ae6:	2203      	movs	r2, #3
 8010ae8:	2100      	movs	r1, #0
 8010aea:	2001      	movs	r0, #1
 8010aec:	f000 fbf0 	bl	80112d0 <xQueueGenericCreate>
 8010af0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010af2:	69fb      	ldr	r3, [r7, #28]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d022      	beq.n	8010b3e <osSemaphoreNew+0xe8>
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d01f      	beq.n	8010b3e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010afe:	2300      	movs	r3, #0
 8010b00:	2200      	movs	r2, #0
 8010b02:	2100      	movs	r1, #0
 8010b04:	69f8      	ldr	r0, [r7, #28]
 8010b06:	f000 fcab 	bl	8011460 <xQueueGenericSend>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2b01      	cmp	r3, #1
 8010b0e:	d016      	beq.n	8010b3e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010b10:	69f8      	ldr	r0, [r7, #28]
 8010b12:	f001 f937 	bl	8011d84 <vQueueDelete>
            hSemaphore = NULL;
 8010b16:	2300      	movs	r3, #0
 8010b18:	61fb      	str	r3, [r7, #28]
 8010b1a:	e010      	b.n	8010b3e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8010b1c:	69bb      	ldr	r3, [r7, #24]
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d108      	bne.n	8010b34 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	689b      	ldr	r3, [r3, #8]
 8010b26:	461a      	mov	r2, r3
 8010b28:	68b9      	ldr	r1, [r7, #8]
 8010b2a:	68f8      	ldr	r0, [r7, #12]
 8010b2c:	f000 fc2d 	bl	801138a <xQueueCreateCountingSemaphoreStatic>
 8010b30:	61f8      	str	r0, [r7, #28]
 8010b32:	e004      	b.n	8010b3e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010b34:	68b9      	ldr	r1, [r7, #8]
 8010b36:	68f8      	ldr	r0, [r7, #12]
 8010b38:	f000 fc5e 	bl	80113f8 <xQueueCreateCountingSemaphore>
 8010b3c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d00c      	beq.n	8010b5e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d003      	beq.n	8010b52 <osSemaphoreNew+0xfc>
          name = attr->name;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	617b      	str	r3, [r7, #20]
 8010b50:	e001      	b.n	8010b56 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8010b52:	2300      	movs	r3, #0
 8010b54:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010b56:	6979      	ldr	r1, [r7, #20]
 8010b58:	69f8      	ldr	r0, [r7, #28]
 8010b5a:	f001 fa5f 	bl	801201c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010b5e:	69fb      	ldr	r3, [r7, #28]
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3720      	adds	r7, #32
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b086      	sub	sp, #24
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010b76:	2300      	movs	r3, #0
 8010b78:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d103      	bne.n	8010b88 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010b80:	f06f 0303 	mvn.w	r3, #3
 8010b84:	617b      	str	r3, [r7, #20]
 8010b86:	e039      	b.n	8010bfc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b88:	f3ef 8305 	mrs	r3, IPSR
 8010b8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d022      	beq.n	8010bda <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d003      	beq.n	8010ba2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8010b9a:	f06f 0303 	mvn.w	r3, #3
 8010b9e:	617b      	str	r3, [r7, #20]
 8010ba0:	e02c      	b.n	8010bfc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010ba6:	f107 0308 	add.w	r3, r7, #8
 8010baa:	461a      	mov	r2, r3
 8010bac:	2100      	movs	r1, #0
 8010bae:	6938      	ldr	r0, [r7, #16]
 8010bb0:	f001 f868 	bl	8011c84 <xQueueReceiveFromISR>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2b01      	cmp	r3, #1
 8010bb8:	d003      	beq.n	8010bc2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8010bba:	f06f 0302 	mvn.w	r3, #2
 8010bbe:	617b      	str	r3, [r7, #20]
 8010bc0:	e01c      	b.n	8010bfc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d019      	beq.n	8010bfc <osSemaphoreAcquire+0x94>
 8010bc8:	4b0f      	ldr	r3, [pc, #60]	; (8010c08 <osSemaphoreAcquire+0xa0>)
 8010bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bce:	601a      	str	r2, [r3, #0]
 8010bd0:	f3bf 8f4f 	dsb	sy
 8010bd4:	f3bf 8f6f 	isb	sy
 8010bd8:	e010      	b.n	8010bfc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010bda:	6839      	ldr	r1, [r7, #0]
 8010bdc:	6938      	ldr	r0, [r7, #16]
 8010bde:	f000 ff45 	bl	8011a6c <xQueueSemaphoreTake>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	d009      	beq.n	8010bfc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d003      	beq.n	8010bf6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8010bee:	f06f 0301 	mvn.w	r3, #1
 8010bf2:	617b      	str	r3, [r7, #20]
 8010bf4:	e002      	b.n	8010bfc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8010bf6:	f06f 0302 	mvn.w	r3, #2
 8010bfa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8010bfc:	697b      	ldr	r3, [r7, #20]
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3718      	adds	r7, #24
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	e000ed04 	.word	0xe000ed04

08010c0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b086      	sub	sp, #24
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d103      	bne.n	8010c2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010c22:	f06f 0303 	mvn.w	r3, #3
 8010c26:	617b      	str	r3, [r7, #20]
 8010c28:	e02c      	b.n	8010c84 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c2a:	f3ef 8305 	mrs	r3, IPSR
 8010c2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c30:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d01a      	beq.n	8010c6c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8010c36:	2300      	movs	r3, #0
 8010c38:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010c3a:	f107 0308 	add.w	r3, r7, #8
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6938      	ldr	r0, [r7, #16]
 8010c42:	f000 fda6 	bl	8011792 <xQueueGiveFromISR>
 8010c46:	4603      	mov	r3, r0
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	d003      	beq.n	8010c54 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8010c4c:	f06f 0302 	mvn.w	r3, #2
 8010c50:	617b      	str	r3, [r7, #20]
 8010c52:	e017      	b.n	8010c84 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d014      	beq.n	8010c84 <osSemaphoreRelease+0x78>
 8010c5a:	4b0d      	ldr	r3, [pc, #52]	; (8010c90 <osSemaphoreRelease+0x84>)
 8010c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c60:	601a      	str	r2, [r3, #0]
 8010c62:	f3bf 8f4f 	dsb	sy
 8010c66:	f3bf 8f6f 	isb	sy
 8010c6a:	e00b      	b.n	8010c84 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	2200      	movs	r2, #0
 8010c70:	2100      	movs	r1, #0
 8010c72:	6938      	ldr	r0, [r7, #16]
 8010c74:	f000 fbf4 	bl	8011460 <xQueueGenericSend>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d002      	beq.n	8010c84 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8010c7e:	f06f 0302 	mvn.w	r3, #2
 8010c82:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8010c84:	697b      	ldr	r3, [r7, #20]
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3718      	adds	r7, #24
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	e000ed04 	.word	0xe000ed04

08010c94 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b086      	sub	sp, #24
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ca0:	f3ef 8305 	mrs	r3, IPSR
 8010ca4:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d003      	beq.n	8010cb4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8010cac:	f06f 0305 	mvn.w	r3, #5
 8010cb0:	617b      	str	r3, [r7, #20]
 8010cb2:	e00e      	b.n	8010cd2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d103      	bne.n	8010cc2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8010cba:	f06f 0303 	mvn.w	r3, #3
 8010cbe:	617b      	str	r3, [r7, #20]
 8010cc0:	e007      	b.n	8010cd2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8010cc2:	6938      	ldr	r0, [r7, #16]
 8010cc4:	f001 f9d4 	bl	8012070 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8010ccc:	6938      	ldr	r0, [r7, #16]
 8010cce:	f001 f859 	bl	8011d84 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8010cd2:	697b      	ldr	r3, [r7, #20]
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3718      	adds	r7, #24
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b08a      	sub	sp, #40	; 0x28
 8010ce0:	af02      	add	r7, sp, #8
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010cec:	f3ef 8305 	mrs	r3, IPSR
 8010cf0:	613b      	str	r3, [r7, #16]
  return(result);
 8010cf2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d15f      	bne.n	8010db8 <osMessageQueueNew+0xdc>
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d05c      	beq.n	8010db8 <osMessageQueueNew+0xdc>
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d059      	beq.n	8010db8 <osMessageQueueNew+0xdc>
    mem = -1;
 8010d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d029      	beq.n	8010d64 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	689b      	ldr	r3, [r3, #8]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d012      	beq.n	8010d3e <osMessageQueueNew+0x62>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	2b4f      	cmp	r3, #79	; 0x4f
 8010d1e:	d90e      	bls.n	8010d3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d00a      	beq.n	8010d3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	695a      	ldr	r2, [r3, #20]
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	68b9      	ldr	r1, [r7, #8]
 8010d30:	fb01 f303 	mul.w	r3, r1, r3
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d302      	bcc.n	8010d3e <osMessageQueueNew+0x62>
        mem = 1;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	61bb      	str	r3, [r7, #24]
 8010d3c:	e014      	b.n	8010d68 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	689b      	ldr	r3, [r3, #8]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d110      	bne.n	8010d68 <osMessageQueueNew+0x8c>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	68db      	ldr	r3, [r3, #12]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d10c      	bne.n	8010d68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d108      	bne.n	8010d68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	695b      	ldr	r3, [r3, #20]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d104      	bne.n	8010d68 <osMessageQueueNew+0x8c>
          mem = 0;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	61bb      	str	r3, [r7, #24]
 8010d62:	e001      	b.n	8010d68 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010d64:	2300      	movs	r3, #0
 8010d66:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010d68:	69bb      	ldr	r3, [r7, #24]
 8010d6a:	2b01      	cmp	r3, #1
 8010d6c:	d10b      	bne.n	8010d86 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	691a      	ldr	r2, [r3, #16]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	2100      	movs	r1, #0
 8010d78:	9100      	str	r1, [sp, #0]
 8010d7a:	68b9      	ldr	r1, [r7, #8]
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f000 fa2f 	bl	80111e0 <xQueueGenericCreateStatic>
 8010d82:	61f8      	str	r0, [r7, #28]
 8010d84:	e008      	b.n	8010d98 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8010d86:	69bb      	ldr	r3, [r7, #24]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d105      	bne.n	8010d98 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	68b9      	ldr	r1, [r7, #8]
 8010d90:	68f8      	ldr	r0, [r7, #12]
 8010d92:	f000 fa9d 	bl	80112d0 <xQueueGenericCreate>
 8010d96:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010d98:	69fb      	ldr	r3, [r7, #28]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00c      	beq.n	8010db8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d003      	beq.n	8010dac <osMessageQueueNew+0xd0>
        name = attr->name;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	617b      	str	r3, [r7, #20]
 8010daa:	e001      	b.n	8010db0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010dac:	2300      	movs	r3, #0
 8010dae:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010db0:	6979      	ldr	r1, [r7, #20]
 8010db2:	69f8      	ldr	r0, [r7, #28]
 8010db4:	f001 f932 	bl	801201c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010db8:	69fb      	ldr	r3, [r7, #28]
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3720      	adds	r7, #32
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
	...

08010dc4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b088      	sub	sp, #32
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	603b      	str	r3, [r7, #0]
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ddc:	f3ef 8305 	mrs	r3, IPSR
 8010de0:	617b      	str	r3, [r7, #20]
  return(result);
 8010de2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d028      	beq.n	8010e3a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d005      	beq.n	8010dfa <osMessageQueuePut+0x36>
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d002      	beq.n	8010dfa <osMessageQueuePut+0x36>
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d003      	beq.n	8010e02 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010dfa:	f06f 0303 	mvn.w	r3, #3
 8010dfe:	61fb      	str	r3, [r7, #28]
 8010e00:	e038      	b.n	8010e74 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8010e02:	2300      	movs	r3, #0
 8010e04:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010e06:	f107 0210 	add.w	r2, r7, #16
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	68b9      	ldr	r1, [r7, #8]
 8010e0e:	69b8      	ldr	r0, [r7, #24]
 8010e10:	f000 fc24 	bl	801165c <xQueueGenericSendFromISR>
 8010e14:	4603      	mov	r3, r0
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d003      	beq.n	8010e22 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010e1a:	f06f 0302 	mvn.w	r3, #2
 8010e1e:	61fb      	str	r3, [r7, #28]
 8010e20:	e028      	b.n	8010e74 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d025      	beq.n	8010e74 <osMessageQueuePut+0xb0>
 8010e28:	4b15      	ldr	r3, [pc, #84]	; (8010e80 <osMessageQueuePut+0xbc>)
 8010e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e2e:	601a      	str	r2, [r3, #0]
 8010e30:	f3bf 8f4f 	dsb	sy
 8010e34:	f3bf 8f6f 	isb	sy
 8010e38:	e01c      	b.n	8010e74 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010e3a:	69bb      	ldr	r3, [r7, #24]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <osMessageQueuePut+0x82>
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d103      	bne.n	8010e4e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8010e46:	f06f 0303 	mvn.w	r3, #3
 8010e4a:	61fb      	str	r3, [r7, #28]
 8010e4c:	e012      	b.n	8010e74 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010e4e:	2300      	movs	r3, #0
 8010e50:	683a      	ldr	r2, [r7, #0]
 8010e52:	68b9      	ldr	r1, [r7, #8]
 8010e54:	69b8      	ldr	r0, [r7, #24]
 8010e56:	f000 fb03 	bl	8011460 <xQueueGenericSend>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	d009      	beq.n	8010e74 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d003      	beq.n	8010e6e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8010e66:	f06f 0301 	mvn.w	r3, #1
 8010e6a:	61fb      	str	r3, [r7, #28]
 8010e6c:	e002      	b.n	8010e74 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8010e6e:	f06f 0302 	mvn.w	r3, #2
 8010e72:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010e74:	69fb      	ldr	r3, [r7, #28]
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3720      	adds	r7, #32
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	e000ed04 	.word	0xe000ed04

08010e84 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b088      	sub	sp, #32
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
 8010e90:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010e96:	2300      	movs	r3, #0
 8010e98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e9a:	f3ef 8305 	mrs	r3, IPSR
 8010e9e:	617b      	str	r3, [r7, #20]
  return(result);
 8010ea0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d028      	beq.n	8010ef8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d005      	beq.n	8010eb8 <osMessageQueueGet+0x34>
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d002      	beq.n	8010eb8 <osMessageQueueGet+0x34>
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d003      	beq.n	8010ec0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010eb8:	f06f 0303 	mvn.w	r3, #3
 8010ebc:	61fb      	str	r3, [r7, #28]
 8010ebe:	e037      	b.n	8010f30 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010ec4:	f107 0310 	add.w	r3, r7, #16
 8010ec8:	461a      	mov	r2, r3
 8010eca:	68b9      	ldr	r1, [r7, #8]
 8010ecc:	69b8      	ldr	r0, [r7, #24]
 8010ece:	f000 fed9 	bl	8011c84 <xQueueReceiveFromISR>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d003      	beq.n	8010ee0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010ed8:	f06f 0302 	mvn.w	r3, #2
 8010edc:	61fb      	str	r3, [r7, #28]
 8010ede:	e027      	b.n	8010f30 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d024      	beq.n	8010f30 <osMessageQueueGet+0xac>
 8010ee6:	4b15      	ldr	r3, [pc, #84]	; (8010f3c <osMessageQueueGet+0xb8>)
 8010ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010eec:	601a      	str	r2, [r3, #0]
 8010eee:	f3bf 8f4f 	dsb	sy
 8010ef2:	f3bf 8f6f 	isb	sy
 8010ef6:	e01b      	b.n	8010f30 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010ef8:	69bb      	ldr	r3, [r7, #24]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d002      	beq.n	8010f04 <osMessageQueueGet+0x80>
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d103      	bne.n	8010f0c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010f04:	f06f 0303 	mvn.w	r3, #3
 8010f08:	61fb      	str	r3, [r7, #28]
 8010f0a:	e011      	b.n	8010f30 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010f0c:	683a      	ldr	r2, [r7, #0]
 8010f0e:	68b9      	ldr	r1, [r7, #8]
 8010f10:	69b8      	ldr	r0, [r7, #24]
 8010f12:	f000 fccb 	bl	80118ac <xQueueReceive>
 8010f16:	4603      	mov	r3, r0
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d009      	beq.n	8010f30 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d003      	beq.n	8010f2a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8010f22:	f06f 0301 	mvn.w	r3, #1
 8010f26:	61fb      	str	r3, [r7, #28]
 8010f28:	e002      	b.n	8010f30 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010f2a:	f06f 0302 	mvn.w	r3, #2
 8010f2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010f30:	69fb      	ldr	r3, [r7, #28]
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3720      	adds	r7, #32
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	e000ed04 	.word	0xe000ed04

08010f40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010f40:	b480      	push	{r7}
 8010f42:	b085      	sub	sp, #20
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	4a07      	ldr	r2, [pc, #28]	; (8010f6c <vApplicationGetIdleTaskMemory+0x2c>)
 8010f50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	4a06      	ldr	r2, [pc, #24]	; (8010f70 <vApplicationGetIdleTaskMemory+0x30>)
 8010f56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2280      	movs	r2, #128	; 0x80
 8010f5c:	601a      	str	r2, [r3, #0]
}
 8010f5e:	bf00      	nop
 8010f60:	3714      	adds	r7, #20
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr
 8010f6a:	bf00      	nop
 8010f6c:	200007c4 	.word	0x200007c4
 8010f70:	20000884 	.word	0x20000884

08010f74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010f74:	b480      	push	{r7}
 8010f76:	b085      	sub	sp, #20
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	60b9      	str	r1, [r7, #8]
 8010f7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	4a07      	ldr	r2, [pc, #28]	; (8010fa0 <vApplicationGetTimerTaskMemory+0x2c>)
 8010f84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	4a06      	ldr	r2, [pc, #24]	; (8010fa4 <vApplicationGetTimerTaskMemory+0x30>)
 8010f8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010f92:	601a      	str	r2, [r3, #0]
}
 8010f94:	bf00      	nop
 8010f96:	3714      	adds	r7, #20
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr
 8010fa0:	20000a84 	.word	0x20000a84
 8010fa4:	20000b44 	.word	0x20000b44

08010fa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b083      	sub	sp, #12
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f103 0208 	add.w	r2, r3, #8
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010fc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f103 0208 	add.w	r2, r3, #8
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f103 0208 	add.w	r2, r3, #8
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010fdc:	bf00      	nop
 8010fde:	370c      	adds	r7, #12
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr

08010fe8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010ff6:	bf00      	nop
 8010ff8:	370c      	adds	r7, #12
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr

08011002 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011002:	b480      	push	{r7}
 8011004:	b085      	sub	sp, #20
 8011006:	af00      	add	r7, sp, #0
 8011008:	6078      	str	r0, [r7, #4]
 801100a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	68fa      	ldr	r2, [r7, #12]
 8011016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	689a      	ldr	r2, [r3, #8]
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	689b      	ldr	r3, [r3, #8]
 8011024:	683a      	ldr	r2, [r7, #0]
 8011026:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	683a      	ldr	r2, [r7, #0]
 801102c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	1c5a      	adds	r2, r3, #1
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	601a      	str	r2, [r3, #0]
}
 801103e:	bf00      	nop
 8011040:	3714      	adds	r7, #20
 8011042:	46bd      	mov	sp, r7
 8011044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011048:	4770      	bx	lr

0801104a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801104a:	b480      	push	{r7}
 801104c:	b085      	sub	sp, #20
 801104e:	af00      	add	r7, sp, #0
 8011050:	6078      	str	r0, [r7, #4]
 8011052:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011060:	d103      	bne.n	801106a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	691b      	ldr	r3, [r3, #16]
 8011066:	60fb      	str	r3, [r7, #12]
 8011068:	e00c      	b.n	8011084 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	3308      	adds	r3, #8
 801106e:	60fb      	str	r3, [r7, #12]
 8011070:	e002      	b.n	8011078 <vListInsert+0x2e>
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	60fb      	str	r3, [r7, #12]
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	429a      	cmp	r2, r3
 8011082:	d2f6      	bcs.n	8011072 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	685a      	ldr	r2, [r3, #4]
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	683a      	ldr	r2, [r7, #0]
 8011092:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	68fa      	ldr	r2, [r7, #12]
 8011098:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	683a      	ldr	r2, [r7, #0]
 801109e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	687a      	ldr	r2, [r7, #4]
 80110a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	1c5a      	adds	r2, r3, #1
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	601a      	str	r2, [r3, #0]
}
 80110b0:	bf00      	nop
 80110b2:	3714      	adds	r7, #20
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80110bc:	b480      	push	{r7}
 80110be:	b085      	sub	sp, #20
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	691b      	ldr	r3, [r3, #16]
 80110c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	6892      	ldr	r2, [r2, #8]
 80110d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	689b      	ldr	r3, [r3, #8]
 80110d8:	687a      	ldr	r2, [r7, #4]
 80110da:	6852      	ldr	r2, [r2, #4]
 80110dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d103      	bne.n	80110f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	689a      	ldr	r2, [r3, #8]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2200      	movs	r2, #0
 80110f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	1e5a      	subs	r2, r3, #1
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681b      	ldr	r3, [r3, #0]
}
 8011104:	4618      	mov	r0, r3
 8011106:	3714      	adds	r7, #20
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr

08011110 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d10a      	bne.n	801113a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011128:	f383 8811 	msr	BASEPRI, r3
 801112c:	f3bf 8f6f 	isb	sy
 8011130:	f3bf 8f4f 	dsb	sy
 8011134:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011136:	bf00      	nop
 8011138:	e7fe      	b.n	8011138 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801113a:	f002 ffcb 	bl	80140d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011146:	68f9      	ldr	r1, [r7, #12]
 8011148:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801114a:	fb01 f303 	mul.w	r3, r1, r3
 801114e:	441a      	add	r2, r3
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2200      	movs	r2, #0
 8011158:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681a      	ldr	r2, [r3, #0]
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801116a:	3b01      	subs	r3, #1
 801116c:	68f9      	ldr	r1, [r7, #12]
 801116e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011170:	fb01 f303 	mul.w	r3, r1, r3
 8011174:	441a      	add	r2, r3
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	22ff      	movs	r2, #255	; 0xff
 801117e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	22ff      	movs	r2, #255	; 0xff
 8011186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d114      	bne.n	80111ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	691b      	ldr	r3, [r3, #16]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d01a      	beq.n	80111ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	3310      	adds	r3, #16
 801119c:	4618      	mov	r0, r3
 801119e:	f001 fd67 	bl	8012c70 <xTaskRemoveFromEventList>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d012      	beq.n	80111ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80111a8:	4b0c      	ldr	r3, [pc, #48]	; (80111dc <xQueueGenericReset+0xcc>)
 80111aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111ae:	601a      	str	r2, [r3, #0]
 80111b0:	f3bf 8f4f 	dsb	sy
 80111b4:	f3bf 8f6f 	isb	sy
 80111b8:	e009      	b.n	80111ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	3310      	adds	r3, #16
 80111be:	4618      	mov	r0, r3
 80111c0:	f7ff fef2 	bl	8010fa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	3324      	adds	r3, #36	; 0x24
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7ff feed 	bl	8010fa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80111ce:	f002 ffb1 	bl	8014134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80111d2:	2301      	movs	r3, #1
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3710      	adds	r7, #16
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	e000ed04 	.word	0xe000ed04

080111e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b08e      	sub	sp, #56	; 0x38
 80111e4:	af02      	add	r7, sp, #8
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	60b9      	str	r1, [r7, #8]
 80111ea:	607a      	str	r2, [r7, #4]
 80111ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d10a      	bne.n	801120a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80111f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f8:	f383 8811 	msr	BASEPRI, r3
 80111fc:	f3bf 8f6f 	isb	sy
 8011200:	f3bf 8f4f 	dsb	sy
 8011204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011206:	bf00      	nop
 8011208:	e7fe      	b.n	8011208 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d10a      	bne.n	8011226 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011214:	f383 8811 	msr	BASEPRI, r3
 8011218:	f3bf 8f6f 	isb	sy
 801121c:	f3bf 8f4f 	dsb	sy
 8011220:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011222:	bf00      	nop
 8011224:	e7fe      	b.n	8011224 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d002      	beq.n	8011232 <xQueueGenericCreateStatic+0x52>
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d001      	beq.n	8011236 <xQueueGenericCreateStatic+0x56>
 8011232:	2301      	movs	r3, #1
 8011234:	e000      	b.n	8011238 <xQueueGenericCreateStatic+0x58>
 8011236:	2300      	movs	r3, #0
 8011238:	2b00      	cmp	r3, #0
 801123a:	d10a      	bne.n	8011252 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801123c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011240:	f383 8811 	msr	BASEPRI, r3
 8011244:	f3bf 8f6f 	isb	sy
 8011248:	f3bf 8f4f 	dsb	sy
 801124c:	623b      	str	r3, [r7, #32]
}
 801124e:	bf00      	nop
 8011250:	e7fe      	b.n	8011250 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d102      	bne.n	801125e <xQueueGenericCreateStatic+0x7e>
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d101      	bne.n	8011262 <xQueueGenericCreateStatic+0x82>
 801125e:	2301      	movs	r3, #1
 8011260:	e000      	b.n	8011264 <xQueueGenericCreateStatic+0x84>
 8011262:	2300      	movs	r3, #0
 8011264:	2b00      	cmp	r3, #0
 8011266:	d10a      	bne.n	801127e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801126c:	f383 8811 	msr	BASEPRI, r3
 8011270:	f3bf 8f6f 	isb	sy
 8011274:	f3bf 8f4f 	dsb	sy
 8011278:	61fb      	str	r3, [r7, #28]
}
 801127a:	bf00      	nop
 801127c:	e7fe      	b.n	801127c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801127e:	2350      	movs	r3, #80	; 0x50
 8011280:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	2b50      	cmp	r3, #80	; 0x50
 8011286:	d00a      	beq.n	801129e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801128c:	f383 8811 	msr	BASEPRI, r3
 8011290:	f3bf 8f6f 	isb	sy
 8011294:	f3bf 8f4f 	dsb	sy
 8011298:	61bb      	str	r3, [r7, #24]
}
 801129a:	bf00      	nop
 801129c:	e7fe      	b.n	801129c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801129e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80112a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00d      	beq.n	80112c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80112aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ac:	2201      	movs	r2, #1
 80112ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80112b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80112b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b8:	9300      	str	r3, [sp, #0]
 80112ba:	4613      	mov	r3, r2
 80112bc:	687a      	ldr	r2, [r7, #4]
 80112be:	68b9      	ldr	r1, [r7, #8]
 80112c0:	68f8      	ldr	r0, [r7, #12]
 80112c2:	f000 f83f 	bl	8011344 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80112c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3730      	adds	r7, #48	; 0x30
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b08a      	sub	sp, #40	; 0x28
 80112d4:	af02      	add	r7, sp, #8
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	4613      	mov	r3, r2
 80112dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d10a      	bne.n	80112fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80112e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e8:	f383 8811 	msr	BASEPRI, r3
 80112ec:	f3bf 8f6f 	isb	sy
 80112f0:	f3bf 8f4f 	dsb	sy
 80112f4:	613b      	str	r3, [r7, #16]
}
 80112f6:	bf00      	nop
 80112f8:	e7fe      	b.n	80112f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	68ba      	ldr	r2, [r7, #8]
 80112fe:	fb02 f303 	mul.w	r3, r2, r3
 8011302:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011304:	69fb      	ldr	r3, [r7, #28]
 8011306:	3350      	adds	r3, #80	; 0x50
 8011308:	4618      	mov	r0, r3
 801130a:	f003 f805 	bl	8014318 <pvPortMalloc>
 801130e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011310:	69bb      	ldr	r3, [r7, #24]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d011      	beq.n	801133a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011316:	69bb      	ldr	r3, [r7, #24]
 8011318:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	3350      	adds	r3, #80	; 0x50
 801131e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	2200      	movs	r2, #0
 8011324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011328:	79fa      	ldrb	r2, [r7, #7]
 801132a:	69bb      	ldr	r3, [r7, #24]
 801132c:	9300      	str	r3, [sp, #0]
 801132e:	4613      	mov	r3, r2
 8011330:	697a      	ldr	r2, [r7, #20]
 8011332:	68b9      	ldr	r1, [r7, #8]
 8011334:	68f8      	ldr	r0, [r7, #12]
 8011336:	f000 f805 	bl	8011344 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801133a:	69bb      	ldr	r3, [r7, #24]
	}
 801133c:	4618      	mov	r0, r3
 801133e:	3720      	adds	r7, #32
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
 8011350:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d103      	bne.n	8011360 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011358:	69bb      	ldr	r3, [r7, #24]
 801135a:	69ba      	ldr	r2, [r7, #24]
 801135c:	601a      	str	r2, [r3, #0]
 801135e:	e002      	b.n	8011366 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	687a      	ldr	r2, [r7, #4]
 8011364:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011366:	69bb      	ldr	r3, [r7, #24]
 8011368:	68fa      	ldr	r2, [r7, #12]
 801136a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801136c:	69bb      	ldr	r3, [r7, #24]
 801136e:	68ba      	ldr	r2, [r7, #8]
 8011370:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011372:	2101      	movs	r1, #1
 8011374:	69b8      	ldr	r0, [r7, #24]
 8011376:	f7ff fecb 	bl	8011110 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801137a:	69bb      	ldr	r3, [r7, #24]
 801137c:	78fa      	ldrb	r2, [r7, #3]
 801137e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011382:	bf00      	nop
 8011384:	3710      	adds	r7, #16
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}

0801138a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801138a:	b580      	push	{r7, lr}
 801138c:	b08a      	sub	sp, #40	; 0x28
 801138e:	af02      	add	r7, sp, #8
 8011390:	60f8      	str	r0, [r7, #12]
 8011392:	60b9      	str	r1, [r7, #8]
 8011394:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d10a      	bne.n	80113b2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 801139c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a0:	f383 8811 	msr	BASEPRI, r3
 80113a4:	f3bf 8f6f 	isb	sy
 80113a8:	f3bf 8f4f 	dsb	sy
 80113ac:	61bb      	str	r3, [r7, #24]
}
 80113ae:	bf00      	nop
 80113b0:	e7fe      	b.n	80113b0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80113b2:	68ba      	ldr	r2, [r7, #8]
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d90a      	bls.n	80113d0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80113ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113be:	f383 8811 	msr	BASEPRI, r3
 80113c2:	f3bf 8f6f 	isb	sy
 80113c6:	f3bf 8f4f 	dsb	sy
 80113ca:	617b      	str	r3, [r7, #20]
}
 80113cc:	bf00      	nop
 80113ce:	e7fe      	b.n	80113ce <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80113d0:	2302      	movs	r3, #2
 80113d2:	9300      	str	r3, [sp, #0]
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2200      	movs	r2, #0
 80113d8:	2100      	movs	r1, #0
 80113da:	68f8      	ldr	r0, [r7, #12]
 80113dc:	f7ff ff00 	bl	80111e0 <xQueueGenericCreateStatic>
 80113e0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80113e2:	69fb      	ldr	r3, [r7, #28]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d002      	beq.n	80113ee <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	68ba      	ldr	r2, [r7, #8]
 80113ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80113ee:	69fb      	ldr	r3, [r7, #28]
	}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3720      	adds	r7, #32
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b086      	sub	sp, #24
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d10a      	bne.n	801141e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8011408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801140c:	f383 8811 	msr	BASEPRI, r3
 8011410:	f3bf 8f6f 	isb	sy
 8011414:	f3bf 8f4f 	dsb	sy
 8011418:	613b      	str	r3, [r7, #16]
}
 801141a:	bf00      	nop
 801141c:	e7fe      	b.n	801141c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801141e:	683a      	ldr	r2, [r7, #0]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	429a      	cmp	r2, r3
 8011424:	d90a      	bls.n	801143c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8011426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801142a:	f383 8811 	msr	BASEPRI, r3
 801142e:	f3bf 8f6f 	isb	sy
 8011432:	f3bf 8f4f 	dsb	sy
 8011436:	60fb      	str	r3, [r7, #12]
}
 8011438:	bf00      	nop
 801143a:	e7fe      	b.n	801143a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801143c:	2202      	movs	r2, #2
 801143e:	2100      	movs	r1, #0
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f7ff ff45 	bl	80112d0 <xQueueGenericCreate>
 8011446:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d002      	beq.n	8011454 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	683a      	ldr	r2, [r7, #0]
 8011452:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011454:	697b      	ldr	r3, [r7, #20]
	}
 8011456:	4618      	mov	r0, r3
 8011458:	3718      	adds	r7, #24
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
	...

08011460 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b08e      	sub	sp, #56	; 0x38
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	607a      	str	r2, [r7, #4]
 801146c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801146e:	2300      	movs	r3, #0
 8011470:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011478:	2b00      	cmp	r3, #0
 801147a:	d10a      	bne.n	8011492 <xQueueGenericSend+0x32>
	__asm volatile
 801147c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011480:	f383 8811 	msr	BASEPRI, r3
 8011484:	f3bf 8f6f 	isb	sy
 8011488:	f3bf 8f4f 	dsb	sy
 801148c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801148e:	bf00      	nop
 8011490:	e7fe      	b.n	8011490 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d103      	bne.n	80114a0 <xQueueGenericSend+0x40>
 8011498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801149c:	2b00      	cmp	r3, #0
 801149e:	d101      	bne.n	80114a4 <xQueueGenericSend+0x44>
 80114a0:	2301      	movs	r3, #1
 80114a2:	e000      	b.n	80114a6 <xQueueGenericSend+0x46>
 80114a4:	2300      	movs	r3, #0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d10a      	bne.n	80114c0 <xQueueGenericSend+0x60>
	__asm volatile
 80114aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ae:	f383 8811 	msr	BASEPRI, r3
 80114b2:	f3bf 8f6f 	isb	sy
 80114b6:	f3bf 8f4f 	dsb	sy
 80114ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80114bc:	bf00      	nop
 80114be:	e7fe      	b.n	80114be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	2b02      	cmp	r3, #2
 80114c4:	d103      	bne.n	80114ce <xQueueGenericSend+0x6e>
 80114c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	d101      	bne.n	80114d2 <xQueueGenericSend+0x72>
 80114ce:	2301      	movs	r3, #1
 80114d0:	e000      	b.n	80114d4 <xQueueGenericSend+0x74>
 80114d2:	2300      	movs	r3, #0
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d10a      	bne.n	80114ee <xQueueGenericSend+0x8e>
	__asm volatile
 80114d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114dc:	f383 8811 	msr	BASEPRI, r3
 80114e0:	f3bf 8f6f 	isb	sy
 80114e4:	f3bf 8f4f 	dsb	sy
 80114e8:	623b      	str	r3, [r7, #32]
}
 80114ea:	bf00      	nop
 80114ec:	e7fe      	b.n	80114ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114ee:	f001 fe55 	bl	801319c <xTaskGetSchedulerState>
 80114f2:	4603      	mov	r3, r0
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d102      	bne.n	80114fe <xQueueGenericSend+0x9e>
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d101      	bne.n	8011502 <xQueueGenericSend+0xa2>
 80114fe:	2301      	movs	r3, #1
 8011500:	e000      	b.n	8011504 <xQueueGenericSend+0xa4>
 8011502:	2300      	movs	r3, #0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d10a      	bne.n	801151e <xQueueGenericSend+0xbe>
	__asm volatile
 8011508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801150c:	f383 8811 	msr	BASEPRI, r3
 8011510:	f3bf 8f6f 	isb	sy
 8011514:	f3bf 8f4f 	dsb	sy
 8011518:	61fb      	str	r3, [r7, #28]
}
 801151a:	bf00      	nop
 801151c:	e7fe      	b.n	801151c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801151e:	f002 fdd9 	bl	80140d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801152a:	429a      	cmp	r2, r3
 801152c:	d302      	bcc.n	8011534 <xQueueGenericSend+0xd4>
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	2b02      	cmp	r3, #2
 8011532:	d129      	bne.n	8011588 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011534:	683a      	ldr	r2, [r7, #0]
 8011536:	68b9      	ldr	r1, [r7, #8]
 8011538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801153a:	f000 fc5e 	bl	8011dfa <prvCopyDataToQueue>
 801153e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011544:	2b00      	cmp	r3, #0
 8011546:	d010      	beq.n	801156a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154a:	3324      	adds	r3, #36	; 0x24
 801154c:	4618      	mov	r0, r3
 801154e:	f001 fb8f 	bl	8012c70 <xTaskRemoveFromEventList>
 8011552:	4603      	mov	r3, r0
 8011554:	2b00      	cmp	r3, #0
 8011556:	d013      	beq.n	8011580 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011558:	4b3f      	ldr	r3, [pc, #252]	; (8011658 <xQueueGenericSend+0x1f8>)
 801155a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801155e:	601a      	str	r2, [r3, #0]
 8011560:	f3bf 8f4f 	dsb	sy
 8011564:	f3bf 8f6f 	isb	sy
 8011568:	e00a      	b.n	8011580 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156c:	2b00      	cmp	r3, #0
 801156e:	d007      	beq.n	8011580 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011570:	4b39      	ldr	r3, [pc, #228]	; (8011658 <xQueueGenericSend+0x1f8>)
 8011572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011576:	601a      	str	r2, [r3, #0]
 8011578:	f3bf 8f4f 	dsb	sy
 801157c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011580:	f002 fdd8 	bl	8014134 <vPortExitCritical>
				return pdPASS;
 8011584:	2301      	movs	r3, #1
 8011586:	e063      	b.n	8011650 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d103      	bne.n	8011596 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801158e:	f002 fdd1 	bl	8014134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011592:	2300      	movs	r3, #0
 8011594:	e05c      	b.n	8011650 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011598:	2b00      	cmp	r3, #0
 801159a:	d106      	bne.n	80115aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801159c:	f107 0314 	add.w	r3, r7, #20
 80115a0:	4618      	mov	r0, r3
 80115a2:	f001 fbc9 	bl	8012d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80115a6:	2301      	movs	r3, #1
 80115a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80115aa:	f002 fdc3 	bl	8014134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80115ae:	f001 f887 	bl	80126c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80115b2:	f002 fd8f 	bl	80140d4 <vPortEnterCritical>
 80115b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115bc:	b25b      	sxtb	r3, r3
 80115be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115c2:	d103      	bne.n	80115cc <xQueueGenericSend+0x16c>
 80115c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c6:	2200      	movs	r2, #0
 80115c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115d2:	b25b      	sxtb	r3, r3
 80115d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115d8:	d103      	bne.n	80115e2 <xQueueGenericSend+0x182>
 80115da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115dc:	2200      	movs	r2, #0
 80115de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115e2:	f002 fda7 	bl	8014134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115e6:	1d3a      	adds	r2, r7, #4
 80115e8:	f107 0314 	add.w	r3, r7, #20
 80115ec:	4611      	mov	r1, r2
 80115ee:	4618      	mov	r0, r3
 80115f0:	f001 fbb8 	bl	8012d64 <xTaskCheckForTimeOut>
 80115f4:	4603      	mov	r3, r0
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d124      	bne.n	8011644 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80115fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115fc:	f000 fcf5 	bl	8011fea <prvIsQueueFull>
 8011600:	4603      	mov	r3, r0
 8011602:	2b00      	cmp	r3, #0
 8011604:	d018      	beq.n	8011638 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011608:	3310      	adds	r3, #16
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	4611      	mov	r1, r2
 801160e:	4618      	mov	r0, r3
 8011610:	f001 fade 	bl	8012bd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011616:	f000 fc80 	bl	8011f1a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801161a:	f001 f85f 	bl	80126dc <xTaskResumeAll>
 801161e:	4603      	mov	r3, r0
 8011620:	2b00      	cmp	r3, #0
 8011622:	f47f af7c 	bne.w	801151e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011626:	4b0c      	ldr	r3, [pc, #48]	; (8011658 <xQueueGenericSend+0x1f8>)
 8011628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	f3bf 8f4f 	dsb	sy
 8011632:	f3bf 8f6f 	isb	sy
 8011636:	e772      	b.n	801151e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801163a:	f000 fc6e 	bl	8011f1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801163e:	f001 f84d 	bl	80126dc <xTaskResumeAll>
 8011642:	e76c      	b.n	801151e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011646:	f000 fc68 	bl	8011f1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801164a:	f001 f847 	bl	80126dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801164e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011650:	4618      	mov	r0, r3
 8011652:	3738      	adds	r7, #56	; 0x38
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}
 8011658:	e000ed04 	.word	0xe000ed04

0801165c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b090      	sub	sp, #64	; 0x40
 8011660:	af00      	add	r7, sp, #0
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	607a      	str	r2, [r7, #4]
 8011668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801166e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011670:	2b00      	cmp	r3, #0
 8011672:	d10a      	bne.n	801168a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011678:	f383 8811 	msr	BASEPRI, r3
 801167c:	f3bf 8f6f 	isb	sy
 8011680:	f3bf 8f4f 	dsb	sy
 8011684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011686:	bf00      	nop
 8011688:	e7fe      	b.n	8011688 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d103      	bne.n	8011698 <xQueueGenericSendFromISR+0x3c>
 8011690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011694:	2b00      	cmp	r3, #0
 8011696:	d101      	bne.n	801169c <xQueueGenericSendFromISR+0x40>
 8011698:	2301      	movs	r3, #1
 801169a:	e000      	b.n	801169e <xQueueGenericSendFromISR+0x42>
 801169c:	2300      	movs	r3, #0
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d10a      	bne.n	80116b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80116a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a6:	f383 8811 	msr	BASEPRI, r3
 80116aa:	f3bf 8f6f 	isb	sy
 80116ae:	f3bf 8f4f 	dsb	sy
 80116b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80116b4:	bf00      	nop
 80116b6:	e7fe      	b.n	80116b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	2b02      	cmp	r3, #2
 80116bc:	d103      	bne.n	80116c6 <xQueueGenericSendFromISR+0x6a>
 80116be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	d101      	bne.n	80116ca <xQueueGenericSendFromISR+0x6e>
 80116c6:	2301      	movs	r3, #1
 80116c8:	e000      	b.n	80116cc <xQueueGenericSendFromISR+0x70>
 80116ca:	2300      	movs	r3, #0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d10a      	bne.n	80116e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80116d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d4:	f383 8811 	msr	BASEPRI, r3
 80116d8:	f3bf 8f6f 	isb	sy
 80116dc:	f3bf 8f4f 	dsb	sy
 80116e0:	623b      	str	r3, [r7, #32]
}
 80116e2:	bf00      	nop
 80116e4:	e7fe      	b.n	80116e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80116e6:	f002 fdd7 	bl	8014298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80116ea:	f3ef 8211 	mrs	r2, BASEPRI
 80116ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f2:	f383 8811 	msr	BASEPRI, r3
 80116f6:	f3bf 8f6f 	isb	sy
 80116fa:	f3bf 8f4f 	dsb	sy
 80116fe:	61fa      	str	r2, [r7, #28]
 8011700:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011702:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011704:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801170e:	429a      	cmp	r2, r3
 8011710:	d302      	bcc.n	8011718 <xQueueGenericSendFromISR+0xbc>
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	2b02      	cmp	r3, #2
 8011716:	d12f      	bne.n	8011778 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801171e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011726:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011728:	683a      	ldr	r2, [r7, #0]
 801172a:	68b9      	ldr	r1, [r7, #8]
 801172c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801172e:	f000 fb64 	bl	8011dfa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011732:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801173a:	d112      	bne.n	8011762 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801173c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011740:	2b00      	cmp	r3, #0
 8011742:	d016      	beq.n	8011772 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011746:	3324      	adds	r3, #36	; 0x24
 8011748:	4618      	mov	r0, r3
 801174a:	f001 fa91 	bl	8012c70 <xTaskRemoveFromEventList>
 801174e:	4603      	mov	r3, r0
 8011750:	2b00      	cmp	r3, #0
 8011752:	d00e      	beq.n	8011772 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d00b      	beq.n	8011772 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2201      	movs	r2, #1
 801175e:	601a      	str	r2, [r3, #0]
 8011760:	e007      	b.n	8011772 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011762:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011766:	3301      	adds	r3, #1
 8011768:	b2db      	uxtb	r3, r3
 801176a:	b25a      	sxtb	r2, r3
 801176c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011772:	2301      	movs	r3, #1
 8011774:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011776:	e001      	b.n	801177c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011778:	2300      	movs	r3, #0
 801177a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801177e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011786:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801178a:	4618      	mov	r0, r3
 801178c:	3740      	adds	r7, #64	; 0x40
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}

08011792 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011792:	b580      	push	{r7, lr}
 8011794:	b08e      	sub	sp, #56	; 0x38
 8011796:	af00      	add	r7, sp, #0
 8011798:	6078      	str	r0, [r7, #4]
 801179a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80117a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d10a      	bne.n	80117bc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80117a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117aa:	f383 8811 	msr	BASEPRI, r3
 80117ae:	f3bf 8f6f 	isb	sy
 80117b2:	f3bf 8f4f 	dsb	sy
 80117b6:	623b      	str	r3, [r7, #32]
}
 80117b8:	bf00      	nop
 80117ba:	e7fe      	b.n	80117ba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80117bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d00a      	beq.n	80117da <xQueueGiveFromISR+0x48>
	__asm volatile
 80117c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c8:	f383 8811 	msr	BASEPRI, r3
 80117cc:	f3bf 8f6f 	isb	sy
 80117d0:	f3bf 8f4f 	dsb	sy
 80117d4:	61fb      	str	r3, [r7, #28]
}
 80117d6:	bf00      	nop
 80117d8:	e7fe      	b.n	80117d8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80117da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d103      	bne.n	80117ea <xQueueGiveFromISR+0x58>
 80117e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d101      	bne.n	80117ee <xQueueGiveFromISR+0x5c>
 80117ea:	2301      	movs	r3, #1
 80117ec:	e000      	b.n	80117f0 <xQueueGiveFromISR+0x5e>
 80117ee:	2300      	movs	r3, #0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d10a      	bne.n	801180a <xQueueGiveFromISR+0x78>
	__asm volatile
 80117f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f8:	f383 8811 	msr	BASEPRI, r3
 80117fc:	f3bf 8f6f 	isb	sy
 8011800:	f3bf 8f4f 	dsb	sy
 8011804:	61bb      	str	r3, [r7, #24]
}
 8011806:	bf00      	nop
 8011808:	e7fe      	b.n	8011808 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801180a:	f002 fd45 	bl	8014298 <vPortValidateInterruptPriority>
	__asm volatile
 801180e:	f3ef 8211 	mrs	r2, BASEPRI
 8011812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011816:	f383 8811 	msr	BASEPRI, r3
 801181a:	f3bf 8f6f 	isb	sy
 801181e:	f3bf 8f4f 	dsb	sy
 8011822:	617a      	str	r2, [r7, #20]
 8011824:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011826:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011828:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801182e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011836:	429a      	cmp	r2, r3
 8011838:	d22b      	bcs.n	8011892 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801183c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011846:	1c5a      	adds	r2, r3, #1
 8011848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801184c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011854:	d112      	bne.n	801187c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801185a:	2b00      	cmp	r3, #0
 801185c:	d016      	beq.n	801188c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011860:	3324      	adds	r3, #36	; 0x24
 8011862:	4618      	mov	r0, r3
 8011864:	f001 fa04 	bl	8012c70 <xTaskRemoveFromEventList>
 8011868:	4603      	mov	r3, r0
 801186a:	2b00      	cmp	r3, #0
 801186c:	d00e      	beq.n	801188c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d00b      	beq.n	801188c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	2201      	movs	r2, #1
 8011878:	601a      	str	r2, [r3, #0]
 801187a:	e007      	b.n	801188c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801187c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011880:	3301      	adds	r3, #1
 8011882:	b2db      	uxtb	r3, r3
 8011884:	b25a      	sxtb	r2, r3
 8011886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801188c:	2301      	movs	r3, #1
 801188e:	637b      	str	r3, [r7, #52]	; 0x34
 8011890:	e001      	b.n	8011896 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011892:	2300      	movs	r3, #0
 8011894:	637b      	str	r3, [r7, #52]	; 0x34
 8011896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011898:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f383 8811 	msr	BASEPRI, r3
}
 80118a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80118a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3738      	adds	r7, #56	; 0x38
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b08c      	sub	sp, #48	; 0x30
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80118b8:	2300      	movs	r3, #0
 80118ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80118c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d10a      	bne.n	80118dc <xQueueReceive+0x30>
	__asm volatile
 80118c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ca:	f383 8811 	msr	BASEPRI, r3
 80118ce:	f3bf 8f6f 	isb	sy
 80118d2:	f3bf 8f4f 	dsb	sy
 80118d6:	623b      	str	r3, [r7, #32]
}
 80118d8:	bf00      	nop
 80118da:	e7fe      	b.n	80118da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d103      	bne.n	80118ea <xQueueReceive+0x3e>
 80118e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d101      	bne.n	80118ee <xQueueReceive+0x42>
 80118ea:	2301      	movs	r3, #1
 80118ec:	e000      	b.n	80118f0 <xQueueReceive+0x44>
 80118ee:	2300      	movs	r3, #0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d10a      	bne.n	801190a <xQueueReceive+0x5e>
	__asm volatile
 80118f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f8:	f383 8811 	msr	BASEPRI, r3
 80118fc:	f3bf 8f6f 	isb	sy
 8011900:	f3bf 8f4f 	dsb	sy
 8011904:	61fb      	str	r3, [r7, #28]
}
 8011906:	bf00      	nop
 8011908:	e7fe      	b.n	8011908 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801190a:	f001 fc47 	bl	801319c <xTaskGetSchedulerState>
 801190e:	4603      	mov	r3, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d102      	bne.n	801191a <xQueueReceive+0x6e>
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d101      	bne.n	801191e <xQueueReceive+0x72>
 801191a:	2301      	movs	r3, #1
 801191c:	e000      	b.n	8011920 <xQueueReceive+0x74>
 801191e:	2300      	movs	r3, #0
 8011920:	2b00      	cmp	r3, #0
 8011922:	d10a      	bne.n	801193a <xQueueReceive+0x8e>
	__asm volatile
 8011924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011928:	f383 8811 	msr	BASEPRI, r3
 801192c:	f3bf 8f6f 	isb	sy
 8011930:	f3bf 8f4f 	dsb	sy
 8011934:	61bb      	str	r3, [r7, #24]
}
 8011936:	bf00      	nop
 8011938:	e7fe      	b.n	8011938 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801193a:	f002 fbcb 	bl	80140d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011942:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011946:	2b00      	cmp	r3, #0
 8011948:	d01f      	beq.n	801198a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801194a:	68b9      	ldr	r1, [r7, #8]
 801194c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801194e:	f000 fabe 	bl	8011ece <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011954:	1e5a      	subs	r2, r3, #1
 8011956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011958:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195c:	691b      	ldr	r3, [r3, #16]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d00f      	beq.n	8011982 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011964:	3310      	adds	r3, #16
 8011966:	4618      	mov	r0, r3
 8011968:	f001 f982 	bl	8012c70 <xTaskRemoveFromEventList>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	d007      	beq.n	8011982 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011972:	4b3d      	ldr	r3, [pc, #244]	; (8011a68 <xQueueReceive+0x1bc>)
 8011974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011978:	601a      	str	r2, [r3, #0]
 801197a:	f3bf 8f4f 	dsb	sy
 801197e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011982:	f002 fbd7 	bl	8014134 <vPortExitCritical>
				return pdPASS;
 8011986:	2301      	movs	r3, #1
 8011988:	e069      	b.n	8011a5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d103      	bne.n	8011998 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011990:	f002 fbd0 	bl	8014134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011994:	2300      	movs	r3, #0
 8011996:	e062      	b.n	8011a5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199a:	2b00      	cmp	r3, #0
 801199c:	d106      	bne.n	80119ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801199e:	f107 0310 	add.w	r3, r7, #16
 80119a2:	4618      	mov	r0, r3
 80119a4:	f001 f9c8 	bl	8012d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80119a8:	2301      	movs	r3, #1
 80119aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80119ac:	f002 fbc2 	bl	8014134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80119b0:	f000 fe86 	bl	80126c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80119b4:	f002 fb8e 	bl	80140d4 <vPortEnterCritical>
 80119b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119be:	b25b      	sxtb	r3, r3
 80119c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119c4:	d103      	bne.n	80119ce <xQueueReceive+0x122>
 80119c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c8:	2200      	movs	r2, #0
 80119ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80119ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119d4:	b25b      	sxtb	r3, r3
 80119d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119da:	d103      	bne.n	80119e4 <xQueueReceive+0x138>
 80119dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119de:	2200      	movs	r2, #0
 80119e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80119e4:	f002 fba6 	bl	8014134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80119e8:	1d3a      	adds	r2, r7, #4
 80119ea:	f107 0310 	add.w	r3, r7, #16
 80119ee:	4611      	mov	r1, r2
 80119f0:	4618      	mov	r0, r3
 80119f2:	f001 f9b7 	bl	8012d64 <xTaskCheckForTimeOut>
 80119f6:	4603      	mov	r3, r0
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d123      	bne.n	8011a44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80119fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119fe:	f000 fade 	bl	8011fbe <prvIsQueueEmpty>
 8011a02:	4603      	mov	r3, r0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d017      	beq.n	8011a38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0a:	3324      	adds	r3, #36	; 0x24
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	4611      	mov	r1, r2
 8011a10:	4618      	mov	r0, r3
 8011a12:	f001 f8dd 	bl	8012bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a18:	f000 fa7f 	bl	8011f1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011a1c:	f000 fe5e 	bl	80126dc <xTaskResumeAll>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d189      	bne.n	801193a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011a26:	4b10      	ldr	r3, [pc, #64]	; (8011a68 <xQueueReceive+0x1bc>)
 8011a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a2c:	601a      	str	r2, [r3, #0]
 8011a2e:	f3bf 8f4f 	dsb	sy
 8011a32:	f3bf 8f6f 	isb	sy
 8011a36:	e780      	b.n	801193a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a3a:	f000 fa6e 	bl	8011f1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011a3e:	f000 fe4d 	bl	80126dc <xTaskResumeAll>
 8011a42:	e77a      	b.n	801193a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a46:	f000 fa68 	bl	8011f1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a4a:	f000 fe47 	bl	80126dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a50:	f000 fab5 	bl	8011fbe <prvIsQueueEmpty>
 8011a54:	4603      	mov	r3, r0
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	f43f af6f 	beq.w	801193a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011a5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3730      	adds	r7, #48	; 0x30
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	e000ed04 	.word	0xe000ed04

08011a6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b08e      	sub	sp, #56	; 0x38
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011a76:	2300      	movs	r3, #0
 8011a78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d10a      	bne.n	8011a9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8c:	f383 8811 	msr	BASEPRI, r3
 8011a90:	f3bf 8f6f 	isb	sy
 8011a94:	f3bf 8f4f 	dsb	sy
 8011a98:	623b      	str	r3, [r7, #32]
}
 8011a9a:	bf00      	nop
 8011a9c:	e7fe      	b.n	8011a9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d00a      	beq.n	8011abc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aaa:	f383 8811 	msr	BASEPRI, r3
 8011aae:	f3bf 8f6f 	isb	sy
 8011ab2:	f3bf 8f4f 	dsb	sy
 8011ab6:	61fb      	str	r3, [r7, #28]
}
 8011ab8:	bf00      	nop
 8011aba:	e7fe      	b.n	8011aba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011abc:	f001 fb6e 	bl	801319c <xTaskGetSchedulerState>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d102      	bne.n	8011acc <xQueueSemaphoreTake+0x60>
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d101      	bne.n	8011ad0 <xQueueSemaphoreTake+0x64>
 8011acc:	2301      	movs	r3, #1
 8011ace:	e000      	b.n	8011ad2 <xQueueSemaphoreTake+0x66>
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d10a      	bne.n	8011aec <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ada:	f383 8811 	msr	BASEPRI, r3
 8011ade:	f3bf 8f6f 	isb	sy
 8011ae2:	f3bf 8f4f 	dsb	sy
 8011ae6:	61bb      	str	r3, [r7, #24]
}
 8011ae8:	bf00      	nop
 8011aea:	e7fe      	b.n	8011aea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011aec:	f002 faf2 	bl	80140d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011af4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d024      	beq.n	8011b46 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afe:	1e5a      	subs	r2, r3, #1
 8011b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d104      	bne.n	8011b16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011b0c:	f001 fdfc 	bl	8013708 <pvTaskIncrementMutexHeldCount>
 8011b10:	4602      	mov	r2, r0
 8011b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b14:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b18:	691b      	ldr	r3, [r3, #16]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d00f      	beq.n	8011b3e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b20:	3310      	adds	r3, #16
 8011b22:	4618      	mov	r0, r3
 8011b24:	f001 f8a4 	bl	8012c70 <xTaskRemoveFromEventList>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d007      	beq.n	8011b3e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011b2e:	4b54      	ldr	r3, [pc, #336]	; (8011c80 <xQueueSemaphoreTake+0x214>)
 8011b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b34:	601a      	str	r2, [r3, #0]
 8011b36:	f3bf 8f4f 	dsb	sy
 8011b3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011b3e:	f002 faf9 	bl	8014134 <vPortExitCritical>
				return pdPASS;
 8011b42:	2301      	movs	r3, #1
 8011b44:	e097      	b.n	8011c76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d111      	bne.n	8011b70 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d00a      	beq.n	8011b68 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8011b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b56:	f383 8811 	msr	BASEPRI, r3
 8011b5a:	f3bf 8f6f 	isb	sy
 8011b5e:	f3bf 8f4f 	dsb	sy
 8011b62:	617b      	str	r3, [r7, #20]
}
 8011b64:	bf00      	nop
 8011b66:	e7fe      	b.n	8011b66 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011b68:	f002 fae4 	bl	8014134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	e082      	b.n	8011c76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d106      	bne.n	8011b84 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b76:	f107 030c 	add.w	r3, r7, #12
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f001 f8dc 	bl	8012d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b80:	2301      	movs	r3, #1
 8011b82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b84:	f002 fad6 	bl	8014134 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b88:	f000 fd9a 	bl	80126c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b8c:	f002 faa2 	bl	80140d4 <vPortEnterCritical>
 8011b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b96:	b25b      	sxtb	r3, r3
 8011b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b9c:	d103      	bne.n	8011ba6 <xQueueSemaphoreTake+0x13a>
 8011b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011bac:	b25b      	sxtb	r3, r3
 8011bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bb2:	d103      	bne.n	8011bbc <xQueueSemaphoreTake+0x150>
 8011bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011bbc:	f002 faba 	bl	8014134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011bc0:	463a      	mov	r2, r7
 8011bc2:	f107 030c 	add.w	r3, r7, #12
 8011bc6:	4611      	mov	r1, r2
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f001 f8cb 	bl	8012d64 <xTaskCheckForTimeOut>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d132      	bne.n	8011c3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011bd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bd6:	f000 f9f2 	bl	8011fbe <prvIsQueueEmpty>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d026      	beq.n	8011c2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d109      	bne.n	8011bfc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011be8:	f002 fa74 	bl	80140d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bee:	689b      	ldr	r3, [r3, #8]
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f001 faf1 	bl	80131d8 <xTaskPriorityInherit>
 8011bf6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011bf8:	f002 fa9c 	bl	8014134 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfe:	3324      	adds	r3, #36	; 0x24
 8011c00:	683a      	ldr	r2, [r7, #0]
 8011c02:	4611      	mov	r1, r2
 8011c04:	4618      	mov	r0, r3
 8011c06:	f000 ffe3 	bl	8012bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011c0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c0c:	f000 f985 	bl	8011f1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011c10:	f000 fd64 	bl	80126dc <xTaskResumeAll>
 8011c14:	4603      	mov	r3, r0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	f47f af68 	bne.w	8011aec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011c1c:	4b18      	ldr	r3, [pc, #96]	; (8011c80 <xQueueSemaphoreTake+0x214>)
 8011c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c22:	601a      	str	r2, [r3, #0]
 8011c24:	f3bf 8f4f 	dsb	sy
 8011c28:	f3bf 8f6f 	isb	sy
 8011c2c:	e75e      	b.n	8011aec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c30:	f000 f973 	bl	8011f1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c34:	f000 fd52 	bl	80126dc <xTaskResumeAll>
 8011c38:	e758      	b.n	8011aec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011c3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c3c:	f000 f96d 	bl	8011f1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c40:	f000 fd4c 	bl	80126dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c46:	f000 f9ba 	bl	8011fbe <prvIsQueueEmpty>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	f43f af4d 	beq.w	8011aec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d00d      	beq.n	8011c74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8011c58:	f002 fa3c 	bl	80140d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011c5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c5e:	f000 f8b4 	bl	8011dca <prvGetDisinheritPriorityAfterTimeout>
 8011c62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c66:	689b      	ldr	r3, [r3, #8]
 8011c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f001 fb8a 	bl	8013384 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011c70:	f002 fa60 	bl	8014134 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011c74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3738      	adds	r7, #56	; 0x38
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	e000ed04 	.word	0xe000ed04

08011c84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b08e      	sub	sp, #56	; 0x38
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	60f8      	str	r0, [r7, #12]
 8011c8c:	60b9      	str	r1, [r7, #8]
 8011c8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d10a      	bne.n	8011cb0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c9e:	f383 8811 	msr	BASEPRI, r3
 8011ca2:	f3bf 8f6f 	isb	sy
 8011ca6:	f3bf 8f4f 	dsb	sy
 8011caa:	623b      	str	r3, [r7, #32]
}
 8011cac:	bf00      	nop
 8011cae:	e7fe      	b.n	8011cae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d103      	bne.n	8011cbe <xQueueReceiveFromISR+0x3a>
 8011cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d101      	bne.n	8011cc2 <xQueueReceiveFromISR+0x3e>
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	e000      	b.n	8011cc4 <xQueueReceiveFromISR+0x40>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d10a      	bne.n	8011cde <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ccc:	f383 8811 	msr	BASEPRI, r3
 8011cd0:	f3bf 8f6f 	isb	sy
 8011cd4:	f3bf 8f4f 	dsb	sy
 8011cd8:	61fb      	str	r3, [r7, #28]
}
 8011cda:	bf00      	nop
 8011cdc:	e7fe      	b.n	8011cdc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011cde:	f002 fadb 	bl	8014298 <vPortValidateInterruptPriority>
	__asm volatile
 8011ce2:	f3ef 8211 	mrs	r2, BASEPRI
 8011ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cea:	f383 8811 	msr	BASEPRI, r3
 8011cee:	f3bf 8f6f 	isb	sy
 8011cf2:	f3bf 8f4f 	dsb	sy
 8011cf6:	61ba      	str	r2, [r7, #24]
 8011cf8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011cfa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d02f      	beq.n	8011d6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011d14:	68b9      	ldr	r1, [r7, #8]
 8011d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d18:	f000 f8d9 	bl	8011ece <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1e:	1e5a      	subs	r2, r3, #1
 8011d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011d24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d2c:	d112      	bne.n	8011d54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d30:	691b      	ldr	r3, [r3, #16]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d016      	beq.n	8011d64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d38:	3310      	adds	r3, #16
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f000 ff98 	bl	8012c70 <xTaskRemoveFromEventList>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d00e      	beq.n	8011d64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d00b      	beq.n	8011d64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2201      	movs	r2, #1
 8011d50:	601a      	str	r2, [r3, #0]
 8011d52:	e007      	b.n	8011d64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d58:	3301      	adds	r3, #1
 8011d5a:	b2db      	uxtb	r3, r3
 8011d5c:	b25a      	sxtb	r2, r3
 8011d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011d64:	2301      	movs	r3, #1
 8011d66:	637b      	str	r3, [r7, #52]	; 0x34
 8011d68:	e001      	b.n	8011d6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8011d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	f383 8811 	msr	BASEPRI, r3
}
 8011d78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3738      	adds	r7, #56	; 0x38
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d10a      	bne.n	8011dac <vQueueDelete+0x28>
	__asm volatile
 8011d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d9a:	f383 8811 	msr	BASEPRI, r3
 8011d9e:	f3bf 8f6f 	isb	sy
 8011da2:	f3bf 8f4f 	dsb	sy
 8011da6:	60bb      	str	r3, [r7, #8]
}
 8011da8:	bf00      	nop
 8011daa:	e7fe      	b.n	8011daa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011dac:	68f8      	ldr	r0, [r7, #12]
 8011dae:	f000 f95f 	bl	8012070 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d102      	bne.n	8011dc2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011dbc:	68f8      	ldr	r0, [r7, #12]
 8011dbe:	f002 fb77 	bl	80144b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011dc2:	bf00      	nop
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}

08011dca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011dca:	b480      	push	{r7}
 8011dcc:	b085      	sub	sp, #20
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d006      	beq.n	8011de8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011de4:	60fb      	str	r3, [r7, #12]
 8011de6:	e001      	b.n	8011dec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011de8:	2300      	movs	r3, #0
 8011dea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011dec:	68fb      	ldr	r3, [r7, #12]
	}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3714      	adds	r7, #20
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr

08011dfa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011dfa:	b580      	push	{r7, lr}
 8011dfc:	b086      	sub	sp, #24
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	60f8      	str	r0, [r7, #12]
 8011e02:	60b9      	str	r1, [r7, #8]
 8011e04:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011e06:	2300      	movs	r3, #0
 8011e08:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e0e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d10d      	bne.n	8011e34 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d14d      	bne.n	8011ebc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	689b      	ldr	r3, [r3, #8]
 8011e24:	4618      	mov	r0, r3
 8011e26:	f001 fa3f 	bl	80132a8 <xTaskPriorityDisinherit>
 8011e2a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	609a      	str	r2, [r3, #8]
 8011e32:	e043      	b.n	8011ebc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d119      	bne.n	8011e6e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	6858      	ldr	r0, [r3, #4]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e42:	461a      	mov	r2, r3
 8011e44:	68b9      	ldr	r1, [r7, #8]
 8011e46:	f003 fad3 	bl	80153f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	685a      	ldr	r2, [r3, #4]
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e52:	441a      	add	r2, r3
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	685a      	ldr	r2, [r3, #4]
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	689b      	ldr	r3, [r3, #8]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d32b      	bcc.n	8011ebc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	681a      	ldr	r2, [r3, #0]
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	605a      	str	r2, [r3, #4]
 8011e6c:	e026      	b.n	8011ebc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	68d8      	ldr	r0, [r3, #12]
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e76:	461a      	mov	r2, r3
 8011e78:	68b9      	ldr	r1, [r7, #8]
 8011e7a:	f003 fab9 	bl	80153f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	68da      	ldr	r2, [r3, #12]
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e86:	425b      	negs	r3, r3
 8011e88:	441a      	add	r2, r3
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	68da      	ldr	r2, [r3, #12]
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d207      	bcs.n	8011eaa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	689a      	ldr	r2, [r3, #8]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ea2:	425b      	negs	r3, r3
 8011ea4:	441a      	add	r2, r3
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2b02      	cmp	r3, #2
 8011eae:	d105      	bne.n	8011ebc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011eb0:	693b      	ldr	r3, [r7, #16]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d002      	beq.n	8011ebc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	3b01      	subs	r3, #1
 8011eba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	1c5a      	adds	r2, r3, #1
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011ec4:	697b      	ldr	r3, [r7, #20]
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3718      	adds	r7, #24
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b082      	sub	sp, #8
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
 8011ed6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d018      	beq.n	8011f12 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	68da      	ldr	r2, [r3, #12]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ee8:	441a      	add	r2, r3
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	68da      	ldr	r2, [r3, #12]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	689b      	ldr	r3, [r3, #8]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d303      	bcc.n	8011f02 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681a      	ldr	r2, [r3, #0]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	68d9      	ldr	r1, [r3, #12]
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	6838      	ldr	r0, [r7, #0]
 8011f0e:	f003 fa6f 	bl	80153f0 <memcpy>
	}
}
 8011f12:	bf00      	nop
 8011f14:	3708      	adds	r7, #8
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}

08011f1a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011f1a:	b580      	push	{r7, lr}
 8011f1c:	b084      	sub	sp, #16
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011f22:	f002 f8d7 	bl	80140d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f2c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011f2e:	e011      	b.n	8011f54 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d012      	beq.n	8011f5e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	3324      	adds	r3, #36	; 0x24
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f000 fe97 	bl	8012c70 <xTaskRemoveFromEventList>
 8011f42:	4603      	mov	r3, r0
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d001      	beq.n	8011f4c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011f48:	f000 ff6e 	bl	8012e28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011f4c:	7bfb      	ldrb	r3, [r7, #15]
 8011f4e:	3b01      	subs	r3, #1
 8011f50:	b2db      	uxtb	r3, r3
 8011f52:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	dce9      	bgt.n	8011f30 <prvUnlockQueue+0x16>
 8011f5c:	e000      	b.n	8011f60 <prvUnlockQueue+0x46>
					break;
 8011f5e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	22ff      	movs	r2, #255	; 0xff
 8011f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011f68:	f002 f8e4 	bl	8014134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011f6c:	f002 f8b2 	bl	80140d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f76:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f78:	e011      	b.n	8011f9e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	691b      	ldr	r3, [r3, #16]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d012      	beq.n	8011fa8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	3310      	adds	r3, #16
 8011f86:	4618      	mov	r0, r3
 8011f88:	f000 fe72 	bl	8012c70 <xTaskRemoveFromEventList>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d001      	beq.n	8011f96 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011f92:	f000 ff49 	bl	8012e28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011f96:	7bbb      	ldrb	r3, [r7, #14]
 8011f98:	3b01      	subs	r3, #1
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	dce9      	bgt.n	8011f7a <prvUnlockQueue+0x60>
 8011fa6:	e000      	b.n	8011faa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011fa8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	22ff      	movs	r2, #255	; 0xff
 8011fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011fb2:	f002 f8bf 	bl	8014134 <vPortExitCritical>
}
 8011fb6:	bf00      	nop
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}

08011fbe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011fbe:	b580      	push	{r7, lr}
 8011fc0:	b084      	sub	sp, #16
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011fc6:	f002 f885 	bl	80140d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d102      	bne.n	8011fd8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	60fb      	str	r3, [r7, #12]
 8011fd6:	e001      	b.n	8011fdc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011fdc:	f002 f8aa 	bl	8014134 <vPortExitCritical>

	return xReturn;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3710      	adds	r7, #16
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}

08011fea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011fea:	b580      	push	{r7, lr}
 8011fec:	b084      	sub	sp, #16
 8011fee:	af00      	add	r7, sp, #0
 8011ff0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011ff2:	f002 f86f 	bl	80140d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d102      	bne.n	8012008 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012002:	2301      	movs	r3, #1
 8012004:	60fb      	str	r3, [r7, #12]
 8012006:	e001      	b.n	801200c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012008:	2300      	movs	r3, #0
 801200a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801200c:	f002 f892 	bl	8014134 <vPortExitCritical>

	return xReturn;
 8012010:	68fb      	ldr	r3, [r7, #12]
}
 8012012:	4618      	mov	r0, r3
 8012014:	3710      	adds	r7, #16
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
	...

0801201c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801201c:	b480      	push	{r7}
 801201e:	b085      	sub	sp, #20
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012026:	2300      	movs	r3, #0
 8012028:	60fb      	str	r3, [r7, #12]
 801202a:	e014      	b.n	8012056 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801202c:	4a0f      	ldr	r2, [pc, #60]	; (801206c <vQueueAddToRegistry+0x50>)
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d10b      	bne.n	8012050 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012038:	490c      	ldr	r1, [pc, #48]	; (801206c <vQueueAddToRegistry+0x50>)
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	683a      	ldr	r2, [r7, #0]
 801203e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012042:	4a0a      	ldr	r2, [pc, #40]	; (801206c <vQueueAddToRegistry+0x50>)
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	00db      	lsls	r3, r3, #3
 8012048:	4413      	add	r3, r2
 801204a:	687a      	ldr	r2, [r7, #4]
 801204c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801204e:	e006      	b.n	801205e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	3301      	adds	r3, #1
 8012054:	60fb      	str	r3, [r7, #12]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	2b07      	cmp	r3, #7
 801205a:	d9e7      	bls.n	801202c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801205c:	bf00      	nop
 801205e:	bf00      	nop
 8012060:	3714      	adds	r7, #20
 8012062:	46bd      	mov	sp, r7
 8012064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop
 801206c:	2001327c 	.word	0x2001327c

08012070 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012070:	b480      	push	{r7}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012078:	2300      	movs	r3, #0
 801207a:	60fb      	str	r3, [r7, #12]
 801207c:	e016      	b.n	80120ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801207e:	4a10      	ldr	r2, [pc, #64]	; (80120c0 <vQueueUnregisterQueue+0x50>)
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	00db      	lsls	r3, r3, #3
 8012084:	4413      	add	r3, r2
 8012086:	685b      	ldr	r3, [r3, #4]
 8012088:	687a      	ldr	r2, [r7, #4]
 801208a:	429a      	cmp	r2, r3
 801208c:	d10b      	bne.n	80120a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801208e:	4a0c      	ldr	r2, [pc, #48]	; (80120c0 <vQueueUnregisterQueue+0x50>)
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2100      	movs	r1, #0
 8012094:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012098:	4a09      	ldr	r2, [pc, #36]	; (80120c0 <vQueueUnregisterQueue+0x50>)
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	00db      	lsls	r3, r3, #3
 801209e:	4413      	add	r3, r2
 80120a0:	2200      	movs	r2, #0
 80120a2:	605a      	str	r2, [r3, #4]
				break;
 80120a4:	e006      	b.n	80120b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	3301      	adds	r3, #1
 80120aa:	60fb      	str	r3, [r7, #12]
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	2b07      	cmp	r3, #7
 80120b0:	d9e5      	bls.n	801207e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80120b2:	bf00      	nop
 80120b4:	bf00      	nop
 80120b6:	3714      	adds	r7, #20
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr
 80120c0:	2001327c 	.word	0x2001327c

080120c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b086      	sub	sp, #24
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80120d4:	f001 fffe 	bl	80140d4 <vPortEnterCritical>
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80120de:	b25b      	sxtb	r3, r3
 80120e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120e4:	d103      	bne.n	80120ee <vQueueWaitForMessageRestricted+0x2a>
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	2200      	movs	r2, #0
 80120ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120f4:	b25b      	sxtb	r3, r3
 80120f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120fa:	d103      	bne.n	8012104 <vQueueWaitForMessageRestricted+0x40>
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	2200      	movs	r2, #0
 8012100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012104:	f002 f816 	bl	8014134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801210c:	2b00      	cmp	r3, #0
 801210e:	d106      	bne.n	801211e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	3324      	adds	r3, #36	; 0x24
 8012114:	687a      	ldr	r2, [r7, #4]
 8012116:	68b9      	ldr	r1, [r7, #8]
 8012118:	4618      	mov	r0, r3
 801211a:	f000 fd7d 	bl	8012c18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801211e:	6978      	ldr	r0, [r7, #20]
 8012120:	f7ff fefb 	bl	8011f1a <prvUnlockQueue>
	}
 8012124:	bf00      	nop
 8012126:	3718      	adds	r7, #24
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801212c:	b580      	push	{r7, lr}
 801212e:	b08e      	sub	sp, #56	; 0x38
 8012130:	af04      	add	r7, sp, #16
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	607a      	str	r2, [r7, #4]
 8012138:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801213a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10a      	bne.n	8012156 <xTaskCreateStatic+0x2a>
	__asm volatile
 8012140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012144:	f383 8811 	msr	BASEPRI, r3
 8012148:	f3bf 8f6f 	isb	sy
 801214c:	f3bf 8f4f 	dsb	sy
 8012150:	623b      	str	r3, [r7, #32]
}
 8012152:	bf00      	nop
 8012154:	e7fe      	b.n	8012154 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012158:	2b00      	cmp	r3, #0
 801215a:	d10a      	bne.n	8012172 <xTaskCreateStatic+0x46>
	__asm volatile
 801215c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012160:	f383 8811 	msr	BASEPRI, r3
 8012164:	f3bf 8f6f 	isb	sy
 8012168:	f3bf 8f4f 	dsb	sy
 801216c:	61fb      	str	r3, [r7, #28]
}
 801216e:	bf00      	nop
 8012170:	e7fe      	b.n	8012170 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012172:	23c0      	movs	r3, #192	; 0xc0
 8012174:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	2bc0      	cmp	r3, #192	; 0xc0
 801217a:	d00a      	beq.n	8012192 <xTaskCreateStatic+0x66>
	__asm volatile
 801217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012180:	f383 8811 	msr	BASEPRI, r3
 8012184:	f3bf 8f6f 	isb	sy
 8012188:	f3bf 8f4f 	dsb	sy
 801218c:	61bb      	str	r3, [r7, #24]
}
 801218e:	bf00      	nop
 8012190:	e7fe      	b.n	8012190 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012192:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012196:	2b00      	cmp	r3, #0
 8012198:	d01e      	beq.n	80121d8 <xTaskCreateStatic+0xac>
 801219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801219c:	2b00      	cmp	r3, #0
 801219e:	d01b      	beq.n	80121d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80121a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80121a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80121aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ac:	2202      	movs	r2, #2
 80121ae:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80121b2:	2300      	movs	r3, #0
 80121b4:	9303      	str	r3, [sp, #12]
 80121b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b8:	9302      	str	r3, [sp, #8]
 80121ba:	f107 0314 	add.w	r3, r7, #20
 80121be:	9301      	str	r3, [sp, #4]
 80121c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	68b9      	ldr	r1, [r7, #8]
 80121ca:	68f8      	ldr	r0, [r7, #12]
 80121cc:	f000 f850 	bl	8012270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80121d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121d2:	f000 f8f7 	bl	80123c4 <prvAddNewTaskToReadyList>
 80121d6:	e001      	b.n	80121dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80121d8:	2300      	movs	r3, #0
 80121da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80121dc:	697b      	ldr	r3, [r7, #20]
	}
 80121de:	4618      	mov	r0, r3
 80121e0:	3728      	adds	r7, #40	; 0x28
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}

080121e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80121e6:	b580      	push	{r7, lr}
 80121e8:	b08c      	sub	sp, #48	; 0x30
 80121ea:	af04      	add	r7, sp, #16
 80121ec:	60f8      	str	r0, [r7, #12]
 80121ee:	60b9      	str	r1, [r7, #8]
 80121f0:	603b      	str	r3, [r7, #0]
 80121f2:	4613      	mov	r3, r2
 80121f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80121f6:	88fb      	ldrh	r3, [r7, #6]
 80121f8:	009b      	lsls	r3, r3, #2
 80121fa:	4618      	mov	r0, r3
 80121fc:	f002 f88c 	bl	8014318 <pvPortMalloc>
 8012200:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d00e      	beq.n	8012226 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012208:	20c0      	movs	r0, #192	; 0xc0
 801220a:	f002 f885 	bl	8014318 <pvPortMalloc>
 801220e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012210:	69fb      	ldr	r3, [r7, #28]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d003      	beq.n	801221e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	697a      	ldr	r2, [r7, #20]
 801221a:	631a      	str	r2, [r3, #48]	; 0x30
 801221c:	e005      	b.n	801222a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801221e:	6978      	ldr	r0, [r7, #20]
 8012220:	f002 f946 	bl	80144b0 <vPortFree>
 8012224:	e001      	b.n	801222a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012226:	2300      	movs	r3, #0
 8012228:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d017      	beq.n	8012260 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	2200      	movs	r2, #0
 8012234:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012238:	88fa      	ldrh	r2, [r7, #6]
 801223a:	2300      	movs	r3, #0
 801223c:	9303      	str	r3, [sp, #12]
 801223e:	69fb      	ldr	r3, [r7, #28]
 8012240:	9302      	str	r3, [sp, #8]
 8012242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012244:	9301      	str	r3, [sp, #4]
 8012246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012248:	9300      	str	r3, [sp, #0]
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	68b9      	ldr	r1, [r7, #8]
 801224e:	68f8      	ldr	r0, [r7, #12]
 8012250:	f000 f80e 	bl	8012270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012254:	69f8      	ldr	r0, [r7, #28]
 8012256:	f000 f8b5 	bl	80123c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801225a:	2301      	movs	r3, #1
 801225c:	61bb      	str	r3, [r7, #24]
 801225e:	e002      	b.n	8012266 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012264:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012266:	69bb      	ldr	r3, [r7, #24]
	}
 8012268:	4618      	mov	r0, r3
 801226a:	3720      	adds	r7, #32
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b088      	sub	sp, #32
 8012274:	af00      	add	r7, sp, #0
 8012276:	60f8      	str	r0, [r7, #12]
 8012278:	60b9      	str	r1, [r7, #8]
 801227a:	607a      	str	r2, [r7, #4]
 801227c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012280:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	461a      	mov	r2, r3
 8012288:	21a5      	movs	r1, #165	; 0xa5
 801228a:	f003 f8bf 	bl	801540c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012298:	3b01      	subs	r3, #1
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	4413      	add	r3, r2
 801229e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80122a0:	69bb      	ldr	r3, [r7, #24]
 80122a2:	f023 0307 	bic.w	r3, r3, #7
 80122a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	f003 0307 	and.w	r3, r3, #7
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d00a      	beq.n	80122c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80122b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b6:	f383 8811 	msr	BASEPRI, r3
 80122ba:	f3bf 8f6f 	isb	sy
 80122be:	f3bf 8f4f 	dsb	sy
 80122c2:	617b      	str	r3, [r7, #20]
}
 80122c4:	bf00      	nop
 80122c6:	e7fe      	b.n	80122c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d01f      	beq.n	801230e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80122ce:	2300      	movs	r3, #0
 80122d0:	61fb      	str	r3, [r7, #28]
 80122d2:	e012      	b.n	80122fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80122d4:	68ba      	ldr	r2, [r7, #8]
 80122d6:	69fb      	ldr	r3, [r7, #28]
 80122d8:	4413      	add	r3, r2
 80122da:	7819      	ldrb	r1, [r3, #0]
 80122dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122de:	69fb      	ldr	r3, [r7, #28]
 80122e0:	4413      	add	r3, r2
 80122e2:	3334      	adds	r3, #52	; 0x34
 80122e4:	460a      	mov	r2, r1
 80122e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80122e8:	68ba      	ldr	r2, [r7, #8]
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	4413      	add	r3, r2
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d006      	beq.n	8012302 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	3301      	adds	r3, #1
 80122f8:	61fb      	str	r3, [r7, #28]
 80122fa:	69fb      	ldr	r3, [r7, #28]
 80122fc:	2b0f      	cmp	r3, #15
 80122fe:	d9e9      	bls.n	80122d4 <prvInitialiseNewTask+0x64>
 8012300:	e000      	b.n	8012304 <prvInitialiseNewTask+0x94>
			{
				break;
 8012302:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012306:	2200      	movs	r2, #0
 8012308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801230c:	e003      	b.n	8012316 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012310:	2200      	movs	r2, #0
 8012312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012318:	2b37      	cmp	r3, #55	; 0x37
 801231a:	d901      	bls.n	8012320 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801231c:	2337      	movs	r3, #55	; 0x37
 801231e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012324:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801232a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801232e:	2200      	movs	r2, #0
 8012330:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012334:	3304      	adds	r3, #4
 8012336:	4618      	mov	r0, r3
 8012338:	f7fe fe56 	bl	8010fe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801233e:	3318      	adds	r3, #24
 8012340:	4618      	mov	r0, r3
 8012342:	f7fe fe51 	bl	8010fe8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801234a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012354:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801235a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 801235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801235e:	2200      	movs	r2, #0
 8012360:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012364:	2200      	movs	r2, #0
 8012366:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801236c:	2200      	movs	r2, #0
 801236e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012374:	3358      	adds	r3, #88	; 0x58
 8012376:	2260      	movs	r2, #96	; 0x60
 8012378:	2100      	movs	r1, #0
 801237a:	4618      	mov	r0, r3
 801237c:	f003 f846 	bl	801540c <memset>
 8012380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012382:	4a0d      	ldr	r2, [pc, #52]	; (80123b8 <prvInitialiseNewTask+0x148>)
 8012384:	65da      	str	r2, [r3, #92]	; 0x5c
 8012386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012388:	4a0c      	ldr	r2, [pc, #48]	; (80123bc <prvInitialiseNewTask+0x14c>)
 801238a:	661a      	str	r2, [r3, #96]	; 0x60
 801238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238e:	4a0c      	ldr	r2, [pc, #48]	; (80123c0 <prvInitialiseNewTask+0x150>)
 8012390:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012392:	683a      	ldr	r2, [r7, #0]
 8012394:	68f9      	ldr	r1, [r7, #12]
 8012396:	69b8      	ldr	r0, [r7, #24]
 8012398:	f001 fd6c 	bl	8013e74 <pxPortInitialiseStack>
 801239c:	4602      	mov	r2, r0
 801239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80123a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d002      	beq.n	80123ae <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80123a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80123ae:	bf00      	nop
 80123b0:	3720      	adds	r7, #32
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	08018d6c 	.word	0x08018d6c
 80123bc:	08018d8c 	.word	0x08018d8c
 80123c0:	08018d4c 	.word	0x08018d4c

080123c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b082      	sub	sp, #8
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80123cc:	f001 fe82 	bl	80140d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80123d0:	4b2d      	ldr	r3, [pc, #180]	; (8012488 <prvAddNewTaskToReadyList+0xc4>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	3301      	adds	r3, #1
 80123d6:	4a2c      	ldr	r2, [pc, #176]	; (8012488 <prvAddNewTaskToReadyList+0xc4>)
 80123d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80123da:	4b2c      	ldr	r3, [pc, #176]	; (801248c <prvAddNewTaskToReadyList+0xc8>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d109      	bne.n	80123f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80123e2:	4a2a      	ldr	r2, [pc, #168]	; (801248c <prvAddNewTaskToReadyList+0xc8>)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80123e8:	4b27      	ldr	r3, [pc, #156]	; (8012488 <prvAddNewTaskToReadyList+0xc4>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d110      	bne.n	8012412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80123f0:	f000 fd3e 	bl	8012e70 <prvInitialiseTaskLists>
 80123f4:	e00d      	b.n	8012412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80123f6:	4b26      	ldr	r3, [pc, #152]	; (8012490 <prvAddNewTaskToReadyList+0xcc>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d109      	bne.n	8012412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80123fe:	4b23      	ldr	r3, [pc, #140]	; (801248c <prvAddNewTaskToReadyList+0xc8>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012408:	429a      	cmp	r2, r3
 801240a:	d802      	bhi.n	8012412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801240c:	4a1f      	ldr	r2, [pc, #124]	; (801248c <prvAddNewTaskToReadyList+0xc8>)
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012412:	4b20      	ldr	r3, [pc, #128]	; (8012494 <prvAddNewTaskToReadyList+0xd0>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	3301      	adds	r3, #1
 8012418:	4a1e      	ldr	r2, [pc, #120]	; (8012494 <prvAddNewTaskToReadyList+0xd0>)
 801241a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801241c:	4b1d      	ldr	r3, [pc, #116]	; (8012494 <prvAddNewTaskToReadyList+0xd0>)
 801241e:	681a      	ldr	r2, [r3, #0]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012428:	4b1b      	ldr	r3, [pc, #108]	; (8012498 <prvAddNewTaskToReadyList+0xd4>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	429a      	cmp	r2, r3
 801242e:	d903      	bls.n	8012438 <prvAddNewTaskToReadyList+0x74>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012434:	4a18      	ldr	r2, [pc, #96]	; (8012498 <prvAddNewTaskToReadyList+0xd4>)
 8012436:	6013      	str	r3, [r2, #0]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801243c:	4613      	mov	r3, r2
 801243e:	009b      	lsls	r3, r3, #2
 8012440:	4413      	add	r3, r2
 8012442:	009b      	lsls	r3, r3, #2
 8012444:	4a15      	ldr	r2, [pc, #84]	; (801249c <prvAddNewTaskToReadyList+0xd8>)
 8012446:	441a      	add	r2, r3
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	3304      	adds	r3, #4
 801244c:	4619      	mov	r1, r3
 801244e:	4610      	mov	r0, r2
 8012450:	f7fe fdd7 	bl	8011002 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012454:	f001 fe6e 	bl	8014134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012458:	4b0d      	ldr	r3, [pc, #52]	; (8012490 <prvAddNewTaskToReadyList+0xcc>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d00e      	beq.n	801247e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012460:	4b0a      	ldr	r3, [pc, #40]	; (801248c <prvAddNewTaskToReadyList+0xc8>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801246a:	429a      	cmp	r2, r3
 801246c:	d207      	bcs.n	801247e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801246e:	4b0c      	ldr	r3, [pc, #48]	; (80124a0 <prvAddNewTaskToReadyList+0xdc>)
 8012470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012474:	601a      	str	r2, [r3, #0]
 8012476:	f3bf 8f4f 	dsb	sy
 801247a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801247e:	bf00      	nop
 8012480:	3708      	adds	r7, #8
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}
 8012486:	bf00      	nop
 8012488:	20001418 	.word	0x20001418
 801248c:	20000f44 	.word	0x20000f44
 8012490:	20001424 	.word	0x20001424
 8012494:	20001434 	.word	0x20001434
 8012498:	20001420 	.word	0x20001420
 801249c:	20000f48 	.word	0x20000f48
 80124a0:	e000ed04 	.word	0xe000ed04

080124a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b084      	sub	sp, #16
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80124ac:	2300      	movs	r3, #0
 80124ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d017      	beq.n	80124e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80124b6:	4b13      	ldr	r3, [pc, #76]	; (8012504 <vTaskDelay+0x60>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d00a      	beq.n	80124d4 <vTaskDelay+0x30>
	__asm volatile
 80124be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c2:	f383 8811 	msr	BASEPRI, r3
 80124c6:	f3bf 8f6f 	isb	sy
 80124ca:	f3bf 8f4f 	dsb	sy
 80124ce:	60bb      	str	r3, [r7, #8]
}
 80124d0:	bf00      	nop
 80124d2:	e7fe      	b.n	80124d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80124d4:	f000 f8f4 	bl	80126c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80124d8:	2100      	movs	r1, #0
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f001 f928 	bl	8013730 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80124e0:	f000 f8fc 	bl	80126dc <xTaskResumeAll>
 80124e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d107      	bne.n	80124fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80124ec:	4b06      	ldr	r3, [pc, #24]	; (8012508 <vTaskDelay+0x64>)
 80124ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124f2:	601a      	str	r2, [r3, #0]
 80124f4:	f3bf 8f4f 	dsb	sy
 80124f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80124fc:	bf00      	nop
 80124fe:	3710      	adds	r7, #16
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}
 8012504:	20001440 	.word	0x20001440
 8012508:	e000ed04 	.word	0xe000ed04

0801250c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801250c:	b580      	push	{r7, lr}
 801250e:	b088      	sub	sp, #32
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8012518:	69bb      	ldr	r3, [r7, #24]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d10a      	bne.n	8012534 <eTaskGetState+0x28>
	__asm volatile
 801251e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012522:	f383 8811 	msr	BASEPRI, r3
 8012526:	f3bf 8f6f 	isb	sy
 801252a:	f3bf 8f4f 	dsb	sy
 801252e:	60bb      	str	r3, [r7, #8]
}
 8012530:	bf00      	nop
 8012532:	e7fe      	b.n	8012532 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8012534:	4b23      	ldr	r3, [pc, #140]	; (80125c4 <eTaskGetState+0xb8>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	69ba      	ldr	r2, [r7, #24]
 801253a:	429a      	cmp	r2, r3
 801253c:	d102      	bne.n	8012544 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801253e:	2300      	movs	r3, #0
 8012540:	77fb      	strb	r3, [r7, #31]
 8012542:	e03a      	b.n	80125ba <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8012544:	f001 fdc6 	bl	80140d4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8012548:	69bb      	ldr	r3, [r7, #24]
 801254a:	695b      	ldr	r3, [r3, #20]
 801254c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801254e:	4b1e      	ldr	r3, [pc, #120]	; (80125c8 <eTaskGetState+0xbc>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8012554:	4b1d      	ldr	r3, [pc, #116]	; (80125cc <eTaskGetState+0xc0>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801255a:	f001 fdeb 	bl	8014134 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801255e:	697a      	ldr	r2, [r7, #20]
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	429a      	cmp	r2, r3
 8012564:	d003      	beq.n	801256e <eTaskGetState+0x62>
 8012566:	697a      	ldr	r2, [r7, #20]
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	429a      	cmp	r2, r3
 801256c:	d102      	bne.n	8012574 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801256e:	2302      	movs	r3, #2
 8012570:	77fb      	strb	r3, [r7, #31]
 8012572:	e022      	b.n	80125ba <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	4a16      	ldr	r2, [pc, #88]	; (80125d0 <eTaskGetState+0xc4>)
 8012578:	4293      	cmp	r3, r2
 801257a:	d112      	bne.n	80125a2 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801257c:	69bb      	ldr	r3, [r7, #24]
 801257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012580:	2b00      	cmp	r3, #0
 8012582:	d10b      	bne.n	801259c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012584:	69bb      	ldr	r3, [r7, #24]
 8012586:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801258a:	b2db      	uxtb	r3, r3
 801258c:	2b01      	cmp	r3, #1
 801258e:	d102      	bne.n	8012596 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8012590:	2302      	movs	r3, #2
 8012592:	77fb      	strb	r3, [r7, #31]
 8012594:	e011      	b.n	80125ba <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8012596:	2303      	movs	r3, #3
 8012598:	77fb      	strb	r3, [r7, #31]
 801259a:	e00e      	b.n	80125ba <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801259c:	2302      	movs	r3, #2
 801259e:	77fb      	strb	r3, [r7, #31]
 80125a0:	e00b      	b.n	80125ba <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	4a0b      	ldr	r2, [pc, #44]	; (80125d4 <eTaskGetState+0xc8>)
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d002      	beq.n	80125b0 <eTaskGetState+0xa4>
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d102      	bne.n	80125b6 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80125b0:	2304      	movs	r3, #4
 80125b2:	77fb      	strb	r3, [r7, #31]
 80125b4:	e001      	b.n	80125ba <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80125b6:	2301      	movs	r3, #1
 80125b8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80125ba:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80125bc:	4618      	mov	r0, r3
 80125be:	3720      	adds	r7, #32
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	20000f44 	.word	0x20000f44
 80125c8:	200013d0 	.word	0x200013d0
 80125cc:	200013d4 	.word	0x200013d4
 80125d0:	20001404 	.word	0x20001404
 80125d4:	200013ec 	.word	0x200013ec

080125d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b08a      	sub	sp, #40	; 0x28
 80125dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80125de:	2300      	movs	r3, #0
 80125e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80125e2:	2300      	movs	r3, #0
 80125e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80125e6:	463a      	mov	r2, r7
 80125e8:	1d39      	adds	r1, r7, #4
 80125ea:	f107 0308 	add.w	r3, r7, #8
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fe fca6 	bl	8010f40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80125f4:	6839      	ldr	r1, [r7, #0]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	68ba      	ldr	r2, [r7, #8]
 80125fa:	9202      	str	r2, [sp, #8]
 80125fc:	9301      	str	r3, [sp, #4]
 80125fe:	2300      	movs	r3, #0
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	2300      	movs	r3, #0
 8012604:	460a      	mov	r2, r1
 8012606:	4925      	ldr	r1, [pc, #148]	; (801269c <vTaskStartScheduler+0xc4>)
 8012608:	4825      	ldr	r0, [pc, #148]	; (80126a0 <vTaskStartScheduler+0xc8>)
 801260a:	f7ff fd8f 	bl	801212c <xTaskCreateStatic>
 801260e:	4603      	mov	r3, r0
 8012610:	4a24      	ldr	r2, [pc, #144]	; (80126a4 <vTaskStartScheduler+0xcc>)
 8012612:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012614:	4b23      	ldr	r3, [pc, #140]	; (80126a4 <vTaskStartScheduler+0xcc>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d002      	beq.n	8012622 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801261c:	2301      	movs	r3, #1
 801261e:	617b      	str	r3, [r7, #20]
 8012620:	e001      	b.n	8012626 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012622:	2300      	movs	r3, #0
 8012624:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	2b01      	cmp	r3, #1
 801262a:	d102      	bne.n	8012632 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801262c:	f001 f8d4 	bl	80137d8 <xTimerCreateTimerTask>
 8012630:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	2b01      	cmp	r3, #1
 8012636:	d11e      	bne.n	8012676 <vTaskStartScheduler+0x9e>
	__asm volatile
 8012638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801263c:	f383 8811 	msr	BASEPRI, r3
 8012640:	f3bf 8f6f 	isb	sy
 8012644:	f3bf 8f4f 	dsb	sy
 8012648:	613b      	str	r3, [r7, #16]
}
 801264a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801264c:	4b16      	ldr	r3, [pc, #88]	; (80126a8 <vTaskStartScheduler+0xd0>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	3358      	adds	r3, #88	; 0x58
 8012652:	4a16      	ldr	r2, [pc, #88]	; (80126ac <vTaskStartScheduler+0xd4>)
 8012654:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012656:	4b16      	ldr	r3, [pc, #88]	; (80126b0 <vTaskStartScheduler+0xd8>)
 8012658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801265c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801265e:	4b15      	ldr	r3, [pc, #84]	; (80126b4 <vTaskStartScheduler+0xdc>)
 8012660:	2201      	movs	r2, #1
 8012662:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012664:	4b14      	ldr	r3, [pc, #80]	; (80126b8 <vTaskStartScheduler+0xe0>)
 8012666:	2200      	movs	r2, #0
 8012668:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801266a:	4b14      	ldr	r3, [pc, #80]	; (80126bc <vTaskStartScheduler+0xe4>)
 801266c:	2200      	movs	r2, #0
 801266e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012670:	f001 fc8e 	bl	8013f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012674:	e00e      	b.n	8012694 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801267c:	d10a      	bne.n	8012694 <vTaskStartScheduler+0xbc>
	__asm volatile
 801267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012682:	f383 8811 	msr	BASEPRI, r3
 8012686:	f3bf 8f6f 	isb	sy
 801268a:	f3bf 8f4f 	dsb	sy
 801268e:	60fb      	str	r3, [r7, #12]
}
 8012690:	bf00      	nop
 8012692:	e7fe      	b.n	8012692 <vTaskStartScheduler+0xba>
}
 8012694:	bf00      	nop
 8012696:	3718      	adds	r7, #24
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	08018758 	.word	0x08018758
 80126a0:	08012e41 	.word	0x08012e41
 80126a4:	2000143c 	.word	0x2000143c
 80126a8:	20000f44 	.word	0x20000f44
 80126ac:	2000019c 	.word	0x2000019c
 80126b0:	20001438 	.word	0x20001438
 80126b4:	20001424 	.word	0x20001424
 80126b8:	2000141c 	.word	0x2000141c
 80126bc:	2000ef84 	.word	0x2000ef84

080126c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80126c0:	b480      	push	{r7}
 80126c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80126c4:	4b04      	ldr	r3, [pc, #16]	; (80126d8 <vTaskSuspendAll+0x18>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	3301      	adds	r3, #1
 80126ca:	4a03      	ldr	r2, [pc, #12]	; (80126d8 <vTaskSuspendAll+0x18>)
 80126cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80126ce:	bf00      	nop
 80126d0:	46bd      	mov	sp, r7
 80126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d6:	4770      	bx	lr
 80126d8:	20001440 	.word	0x20001440

080126dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80126e2:	2300      	movs	r3, #0
 80126e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80126e6:	2300      	movs	r3, #0
 80126e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80126ea:	4b42      	ldr	r3, [pc, #264]	; (80127f4 <xTaskResumeAll+0x118>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d10a      	bne.n	8012708 <xTaskResumeAll+0x2c>
	__asm volatile
 80126f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f6:	f383 8811 	msr	BASEPRI, r3
 80126fa:	f3bf 8f6f 	isb	sy
 80126fe:	f3bf 8f4f 	dsb	sy
 8012702:	603b      	str	r3, [r7, #0]
}
 8012704:	bf00      	nop
 8012706:	e7fe      	b.n	8012706 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012708:	f001 fce4 	bl	80140d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801270c:	4b39      	ldr	r3, [pc, #228]	; (80127f4 <xTaskResumeAll+0x118>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	3b01      	subs	r3, #1
 8012712:	4a38      	ldr	r2, [pc, #224]	; (80127f4 <xTaskResumeAll+0x118>)
 8012714:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012716:	4b37      	ldr	r3, [pc, #220]	; (80127f4 <xTaskResumeAll+0x118>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d162      	bne.n	80127e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801271e:	4b36      	ldr	r3, [pc, #216]	; (80127f8 <xTaskResumeAll+0x11c>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d05e      	beq.n	80127e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012726:	e02f      	b.n	8012788 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012728:	4b34      	ldr	r3, [pc, #208]	; (80127fc <xTaskResumeAll+0x120>)
 801272a:	68db      	ldr	r3, [r3, #12]
 801272c:	68db      	ldr	r3, [r3, #12]
 801272e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	3318      	adds	r3, #24
 8012734:	4618      	mov	r0, r3
 8012736:	f7fe fcc1 	bl	80110bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	3304      	adds	r3, #4
 801273e:	4618      	mov	r0, r3
 8012740:	f7fe fcbc 	bl	80110bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012748:	4b2d      	ldr	r3, [pc, #180]	; (8012800 <xTaskResumeAll+0x124>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	429a      	cmp	r2, r3
 801274e:	d903      	bls.n	8012758 <xTaskResumeAll+0x7c>
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012754:	4a2a      	ldr	r2, [pc, #168]	; (8012800 <xTaskResumeAll+0x124>)
 8012756:	6013      	str	r3, [r2, #0]
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801275c:	4613      	mov	r3, r2
 801275e:	009b      	lsls	r3, r3, #2
 8012760:	4413      	add	r3, r2
 8012762:	009b      	lsls	r3, r3, #2
 8012764:	4a27      	ldr	r2, [pc, #156]	; (8012804 <xTaskResumeAll+0x128>)
 8012766:	441a      	add	r2, r3
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	3304      	adds	r3, #4
 801276c:	4619      	mov	r1, r3
 801276e:	4610      	mov	r0, r2
 8012770:	f7fe fc47 	bl	8011002 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012778:	4b23      	ldr	r3, [pc, #140]	; (8012808 <xTaskResumeAll+0x12c>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801277e:	429a      	cmp	r2, r3
 8012780:	d302      	bcc.n	8012788 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012782:	4b22      	ldr	r3, [pc, #136]	; (801280c <xTaskResumeAll+0x130>)
 8012784:	2201      	movs	r2, #1
 8012786:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012788:	4b1c      	ldr	r3, [pc, #112]	; (80127fc <xTaskResumeAll+0x120>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d1cb      	bne.n	8012728 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d001      	beq.n	801279a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012796:	f000 fce1 	bl	801315c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801279a:	4b1d      	ldr	r3, [pc, #116]	; (8012810 <xTaskResumeAll+0x134>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d010      	beq.n	80127c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80127a6:	f000 f8d7 	bl	8012958 <xTaskIncrementTick>
 80127aa:	4603      	mov	r3, r0
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d002      	beq.n	80127b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80127b0:	4b16      	ldr	r3, [pc, #88]	; (801280c <xTaskResumeAll+0x130>)
 80127b2:	2201      	movs	r2, #1
 80127b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	3b01      	subs	r3, #1
 80127ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d1f1      	bne.n	80127a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80127c2:	4b13      	ldr	r3, [pc, #76]	; (8012810 <xTaskResumeAll+0x134>)
 80127c4:	2200      	movs	r2, #0
 80127c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80127c8:	4b10      	ldr	r3, [pc, #64]	; (801280c <xTaskResumeAll+0x130>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d009      	beq.n	80127e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80127d0:	2301      	movs	r3, #1
 80127d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80127d4:	4b0f      	ldr	r3, [pc, #60]	; (8012814 <xTaskResumeAll+0x138>)
 80127d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127da:	601a      	str	r2, [r3, #0]
 80127dc:	f3bf 8f4f 	dsb	sy
 80127e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80127e4:	f001 fca6 	bl	8014134 <vPortExitCritical>

	return xAlreadyYielded;
 80127e8:	68bb      	ldr	r3, [r7, #8]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop
 80127f4:	20001440 	.word	0x20001440
 80127f8:	20001418 	.word	0x20001418
 80127fc:	200013d8 	.word	0x200013d8
 8012800:	20001420 	.word	0x20001420
 8012804:	20000f48 	.word	0x20000f48
 8012808:	20000f44 	.word	0x20000f44
 801280c:	2000142c 	.word	0x2000142c
 8012810:	20001428 	.word	0x20001428
 8012814:	e000ed04 	.word	0xe000ed04

08012818 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012818:	b480      	push	{r7}
 801281a:	b083      	sub	sp, #12
 801281c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801281e:	4b05      	ldr	r3, [pc, #20]	; (8012834 <xTaskGetTickCount+0x1c>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012824:	687b      	ldr	r3, [r7, #4]
}
 8012826:	4618      	mov	r0, r3
 8012828:	370c      	adds	r7, #12
 801282a:	46bd      	mov	sp, r7
 801282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012830:	4770      	bx	lr
 8012832:	bf00      	nop
 8012834:	2000141c 	.word	0x2000141c

08012838 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8012838:	b580      	push	{r7, lr}
 801283a:	b086      	sub	sp, #24
 801283c:	af00      	add	r7, sp, #0
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8012844:	2300      	movs	r3, #0
 8012846:	617b      	str	r3, [r7, #20]
 8012848:	2338      	movs	r3, #56	; 0x38
 801284a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 801284c:	f7ff ff38 	bl	80126c0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8012850:	4b3a      	ldr	r3, [pc, #232]	; (801293c <uxTaskGetSystemState+0x104>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	68ba      	ldr	r2, [r7, #8]
 8012856:	429a      	cmp	r2, r3
 8012858:	d369      	bcc.n	801292e <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	3b01      	subs	r3, #1
 801285e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8012860:	697a      	ldr	r2, [r7, #20]
 8012862:	4613      	mov	r3, r2
 8012864:	00db      	lsls	r3, r3, #3
 8012866:	4413      	add	r3, r2
 8012868:	009b      	lsls	r3, r3, #2
 801286a:	461a      	mov	r2, r3
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	1898      	adds	r0, r3, r2
 8012870:	693a      	ldr	r2, [r7, #16]
 8012872:	4613      	mov	r3, r2
 8012874:	009b      	lsls	r3, r3, #2
 8012876:	4413      	add	r3, r2
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	4a31      	ldr	r2, [pc, #196]	; (8012940 <uxTaskGetSystemState+0x108>)
 801287c:	4413      	add	r3, r2
 801287e:	2201      	movs	r2, #1
 8012880:	4619      	mov	r1, r3
 8012882:	f000 fbc9 	bl	8013018 <prvListTasksWithinSingleList>
 8012886:	4602      	mov	r2, r0
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	4413      	add	r3, r2
 801288c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d1e2      	bne.n	801285a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8012894:	697a      	ldr	r2, [r7, #20]
 8012896:	4613      	mov	r3, r2
 8012898:	00db      	lsls	r3, r3, #3
 801289a:	4413      	add	r3, r2
 801289c:	009b      	lsls	r3, r3, #2
 801289e:	461a      	mov	r2, r3
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	4413      	add	r3, r2
 80128a4:	4a27      	ldr	r2, [pc, #156]	; (8012944 <uxTaskGetSystemState+0x10c>)
 80128a6:	6811      	ldr	r1, [r2, #0]
 80128a8:	2202      	movs	r2, #2
 80128aa:	4618      	mov	r0, r3
 80128ac:	f000 fbb4 	bl	8013018 <prvListTasksWithinSingleList>
 80128b0:	4602      	mov	r2, r0
 80128b2:	697b      	ldr	r3, [r7, #20]
 80128b4:	4413      	add	r3, r2
 80128b6:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80128b8:	697a      	ldr	r2, [r7, #20]
 80128ba:	4613      	mov	r3, r2
 80128bc:	00db      	lsls	r3, r3, #3
 80128be:	4413      	add	r3, r2
 80128c0:	009b      	lsls	r3, r3, #2
 80128c2:	461a      	mov	r2, r3
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	4413      	add	r3, r2
 80128c8:	4a1f      	ldr	r2, [pc, #124]	; (8012948 <uxTaskGetSystemState+0x110>)
 80128ca:	6811      	ldr	r1, [r2, #0]
 80128cc:	2202      	movs	r2, #2
 80128ce:	4618      	mov	r0, r3
 80128d0:	f000 fba2 	bl	8013018 <prvListTasksWithinSingleList>
 80128d4:	4602      	mov	r2, r0
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	4413      	add	r3, r2
 80128da:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80128dc:	697a      	ldr	r2, [r7, #20]
 80128de:	4613      	mov	r3, r2
 80128e0:	00db      	lsls	r3, r3, #3
 80128e2:	4413      	add	r3, r2
 80128e4:	009b      	lsls	r3, r3, #2
 80128e6:	461a      	mov	r2, r3
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	4413      	add	r3, r2
 80128ec:	2204      	movs	r2, #4
 80128ee:	4917      	ldr	r1, [pc, #92]	; (801294c <uxTaskGetSystemState+0x114>)
 80128f0:	4618      	mov	r0, r3
 80128f2:	f000 fb91 	bl	8013018 <prvListTasksWithinSingleList>
 80128f6:	4602      	mov	r2, r0
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	4413      	add	r3, r2
 80128fc:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80128fe:	697a      	ldr	r2, [r7, #20]
 8012900:	4613      	mov	r3, r2
 8012902:	00db      	lsls	r3, r3, #3
 8012904:	4413      	add	r3, r2
 8012906:	009b      	lsls	r3, r3, #2
 8012908:	461a      	mov	r2, r3
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	4413      	add	r3, r2
 801290e:	2203      	movs	r2, #3
 8012910:	490f      	ldr	r1, [pc, #60]	; (8012950 <uxTaskGetSystemState+0x118>)
 8012912:	4618      	mov	r0, r3
 8012914:	f000 fb80 	bl	8013018 <prvListTasksWithinSingleList>
 8012918:	4602      	mov	r2, r0
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	4413      	add	r3, r2
 801291e:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d003      	beq.n	801292e <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8012926:	4b0b      	ldr	r3, [pc, #44]	; (8012954 <uxTaskGetSystemState+0x11c>)
 8012928:	681a      	ldr	r2, [r3, #0]
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 801292e:	f7ff fed5 	bl	80126dc <xTaskResumeAll>

		return uxTask;
 8012932:	697b      	ldr	r3, [r7, #20]
	}
 8012934:	4618      	mov	r0, r3
 8012936:	3718      	adds	r7, #24
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}
 801293c:	20001418 	.word	0x20001418
 8012940:	20000f48 	.word	0x20000f48
 8012944:	200013d0 	.word	0x200013d0
 8012948:	200013d4 	.word	0x200013d4
 801294c:	200013ec 	.word	0x200013ec
 8012950:	20001404 	.word	0x20001404
 8012954:	2000ef84 	.word	0x2000ef84

08012958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b086      	sub	sp, #24
 801295c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801295e:	2300      	movs	r3, #0
 8012960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012962:	4b4f      	ldr	r3, [pc, #316]	; (8012aa0 <xTaskIncrementTick+0x148>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	f040 808f 	bne.w	8012a8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801296c:	4b4d      	ldr	r3, [pc, #308]	; (8012aa4 <xTaskIncrementTick+0x14c>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	3301      	adds	r3, #1
 8012972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012974:	4a4b      	ldr	r2, [pc, #300]	; (8012aa4 <xTaskIncrementTick+0x14c>)
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d120      	bne.n	80129c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012980:	4b49      	ldr	r3, [pc, #292]	; (8012aa8 <xTaskIncrementTick+0x150>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d00a      	beq.n	80129a0 <xTaskIncrementTick+0x48>
	__asm volatile
 801298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801298e:	f383 8811 	msr	BASEPRI, r3
 8012992:	f3bf 8f6f 	isb	sy
 8012996:	f3bf 8f4f 	dsb	sy
 801299a:	603b      	str	r3, [r7, #0]
}
 801299c:	bf00      	nop
 801299e:	e7fe      	b.n	801299e <xTaskIncrementTick+0x46>
 80129a0:	4b41      	ldr	r3, [pc, #260]	; (8012aa8 <xTaskIncrementTick+0x150>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	60fb      	str	r3, [r7, #12]
 80129a6:	4b41      	ldr	r3, [pc, #260]	; (8012aac <xTaskIncrementTick+0x154>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4a3f      	ldr	r2, [pc, #252]	; (8012aa8 <xTaskIncrementTick+0x150>)
 80129ac:	6013      	str	r3, [r2, #0]
 80129ae:	4a3f      	ldr	r2, [pc, #252]	; (8012aac <xTaskIncrementTick+0x154>)
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	6013      	str	r3, [r2, #0]
 80129b4:	4b3e      	ldr	r3, [pc, #248]	; (8012ab0 <xTaskIncrementTick+0x158>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	3301      	adds	r3, #1
 80129ba:	4a3d      	ldr	r2, [pc, #244]	; (8012ab0 <xTaskIncrementTick+0x158>)
 80129bc:	6013      	str	r3, [r2, #0]
 80129be:	f000 fbcd 	bl	801315c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80129c2:	4b3c      	ldr	r3, [pc, #240]	; (8012ab4 <xTaskIncrementTick+0x15c>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	693a      	ldr	r2, [r7, #16]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d349      	bcc.n	8012a60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80129cc:	4b36      	ldr	r3, [pc, #216]	; (8012aa8 <xTaskIncrementTick+0x150>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d104      	bne.n	80129e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129d6:	4b37      	ldr	r3, [pc, #220]	; (8012ab4 <xTaskIncrementTick+0x15c>)
 80129d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80129dc:	601a      	str	r2, [r3, #0]
					break;
 80129de:	e03f      	b.n	8012a60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129e0:	4b31      	ldr	r3, [pc, #196]	; (8012aa8 <xTaskIncrementTick+0x150>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	68db      	ldr	r3, [r3, #12]
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80129f0:	693a      	ldr	r2, [r7, #16]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d203      	bcs.n	8012a00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80129f8:	4a2e      	ldr	r2, [pc, #184]	; (8012ab4 <xTaskIncrementTick+0x15c>)
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80129fe:	e02f      	b.n	8012a60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	3304      	adds	r3, #4
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7fe fb59 	bl	80110bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d004      	beq.n	8012a1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a12:	68bb      	ldr	r3, [r7, #8]
 8012a14:	3318      	adds	r3, #24
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fe fb50 	bl	80110bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a20:	4b25      	ldr	r3, [pc, #148]	; (8012ab8 <xTaskIncrementTick+0x160>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d903      	bls.n	8012a30 <xTaskIncrementTick+0xd8>
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a2c:	4a22      	ldr	r2, [pc, #136]	; (8012ab8 <xTaskIncrementTick+0x160>)
 8012a2e:	6013      	str	r3, [r2, #0]
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a34:	4613      	mov	r3, r2
 8012a36:	009b      	lsls	r3, r3, #2
 8012a38:	4413      	add	r3, r2
 8012a3a:	009b      	lsls	r3, r3, #2
 8012a3c:	4a1f      	ldr	r2, [pc, #124]	; (8012abc <xTaskIncrementTick+0x164>)
 8012a3e:	441a      	add	r2, r3
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	3304      	adds	r3, #4
 8012a44:	4619      	mov	r1, r3
 8012a46:	4610      	mov	r0, r2
 8012a48:	f7fe fadb 	bl	8011002 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a50:	4b1b      	ldr	r3, [pc, #108]	; (8012ac0 <xTaskIncrementTick+0x168>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d3b8      	bcc.n	80129cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a5e:	e7b5      	b.n	80129cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012a60:	4b17      	ldr	r3, [pc, #92]	; (8012ac0 <xTaskIncrementTick+0x168>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a66:	4915      	ldr	r1, [pc, #84]	; (8012abc <xTaskIncrementTick+0x164>)
 8012a68:	4613      	mov	r3, r2
 8012a6a:	009b      	lsls	r3, r3, #2
 8012a6c:	4413      	add	r3, r2
 8012a6e:	009b      	lsls	r3, r3, #2
 8012a70:	440b      	add	r3, r1
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2b01      	cmp	r3, #1
 8012a76:	d901      	bls.n	8012a7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012a78:	2301      	movs	r3, #1
 8012a7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012a7c:	4b11      	ldr	r3, [pc, #68]	; (8012ac4 <xTaskIncrementTick+0x16c>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d007      	beq.n	8012a94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012a84:	2301      	movs	r3, #1
 8012a86:	617b      	str	r3, [r7, #20]
 8012a88:	e004      	b.n	8012a94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012a8a:	4b0f      	ldr	r3, [pc, #60]	; (8012ac8 <xTaskIncrementTick+0x170>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	4a0d      	ldr	r2, [pc, #52]	; (8012ac8 <xTaskIncrementTick+0x170>)
 8012a92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012a94:	697b      	ldr	r3, [r7, #20]
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3718      	adds	r7, #24
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	20001440 	.word	0x20001440
 8012aa4:	2000141c 	.word	0x2000141c
 8012aa8:	200013d0 	.word	0x200013d0
 8012aac:	200013d4 	.word	0x200013d4
 8012ab0:	20001430 	.word	0x20001430
 8012ab4:	20001438 	.word	0x20001438
 8012ab8:	20001420 	.word	0x20001420
 8012abc:	20000f48 	.word	0x20000f48
 8012ac0:	20000f44 	.word	0x20000f44
 8012ac4:	2000142c 	.word	0x2000142c
 8012ac8:	20001428 	.word	0x20001428

08012acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012acc:	b480      	push	{r7}
 8012ace:	b085      	sub	sp, #20
 8012ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012ad2:	4b36      	ldr	r3, [pc, #216]	; (8012bac <vTaskSwitchContext+0xe0>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d003      	beq.n	8012ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012ada:	4b35      	ldr	r3, [pc, #212]	; (8012bb0 <vTaskSwitchContext+0xe4>)
 8012adc:	2201      	movs	r2, #1
 8012ade:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012ae0:	e05e      	b.n	8012ba0 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8012ae2:	4b33      	ldr	r3, [pc, #204]	; (8012bb0 <vTaskSwitchContext+0xe4>)
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8012ae8:	4b32      	ldr	r3, [pc, #200]	; (8012bb4 <vTaskSwitchContext+0xe8>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	4a32      	ldr	r2, [pc, #200]	; (8012bb8 <vTaskSwitchContext+0xec>)
 8012aee:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8012af0:	4b31      	ldr	r3, [pc, #196]	; (8012bb8 <vTaskSwitchContext+0xec>)
 8012af2:	681a      	ldr	r2, [r3, #0]
 8012af4:	4b31      	ldr	r3, [pc, #196]	; (8012bbc <vTaskSwitchContext+0xf0>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d909      	bls.n	8012b10 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8012afc:	4b30      	ldr	r3, [pc, #192]	; (8012bc0 <vTaskSwitchContext+0xf4>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012b02:	4a2d      	ldr	r2, [pc, #180]	; (8012bb8 <vTaskSwitchContext+0xec>)
 8012b04:	6810      	ldr	r0, [r2, #0]
 8012b06:	4a2d      	ldr	r2, [pc, #180]	; (8012bbc <vTaskSwitchContext+0xf0>)
 8012b08:	6812      	ldr	r2, [r2, #0]
 8012b0a:	1a82      	subs	r2, r0, r2
 8012b0c:	440a      	add	r2, r1
 8012b0e:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8012b10:	4b29      	ldr	r3, [pc, #164]	; (8012bb8 <vTaskSwitchContext+0xec>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	4a29      	ldr	r2, [pc, #164]	; (8012bbc <vTaskSwitchContext+0xf0>)
 8012b16:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b18:	4b2a      	ldr	r3, [pc, #168]	; (8012bc4 <vTaskSwitchContext+0xf8>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	60fb      	str	r3, [r7, #12]
 8012b1e:	e010      	b.n	8012b42 <vTaskSwitchContext+0x76>
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d10a      	bne.n	8012b3c <vTaskSwitchContext+0x70>
	__asm volatile
 8012b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b2a:	f383 8811 	msr	BASEPRI, r3
 8012b2e:	f3bf 8f6f 	isb	sy
 8012b32:	f3bf 8f4f 	dsb	sy
 8012b36:	607b      	str	r3, [r7, #4]
}
 8012b38:	bf00      	nop
 8012b3a:	e7fe      	b.n	8012b3a <vTaskSwitchContext+0x6e>
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	3b01      	subs	r3, #1
 8012b40:	60fb      	str	r3, [r7, #12]
 8012b42:	4921      	ldr	r1, [pc, #132]	; (8012bc8 <vTaskSwitchContext+0xfc>)
 8012b44:	68fa      	ldr	r2, [r7, #12]
 8012b46:	4613      	mov	r3, r2
 8012b48:	009b      	lsls	r3, r3, #2
 8012b4a:	4413      	add	r3, r2
 8012b4c:	009b      	lsls	r3, r3, #2
 8012b4e:	440b      	add	r3, r1
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d0e4      	beq.n	8012b20 <vTaskSwitchContext+0x54>
 8012b56:	68fa      	ldr	r2, [r7, #12]
 8012b58:	4613      	mov	r3, r2
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	4413      	add	r3, r2
 8012b5e:	009b      	lsls	r3, r3, #2
 8012b60:	4a19      	ldr	r2, [pc, #100]	; (8012bc8 <vTaskSwitchContext+0xfc>)
 8012b62:	4413      	add	r3, r2
 8012b64:	60bb      	str	r3, [r7, #8]
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	685a      	ldr	r2, [r3, #4]
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	605a      	str	r2, [r3, #4]
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	685a      	ldr	r2, [r3, #4]
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	3308      	adds	r3, #8
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d104      	bne.n	8012b86 <vTaskSwitchContext+0xba>
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	685a      	ldr	r2, [r3, #4]
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	605a      	str	r2, [r3, #4]
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	4a0c      	ldr	r2, [pc, #48]	; (8012bc0 <vTaskSwitchContext+0xf4>)
 8012b8e:	6013      	str	r3, [r2, #0]
 8012b90:	4a0c      	ldr	r2, [pc, #48]	; (8012bc4 <vTaskSwitchContext+0xf8>)
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012b96:	4b0a      	ldr	r3, [pc, #40]	; (8012bc0 <vTaskSwitchContext+0xf4>)
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	3358      	adds	r3, #88	; 0x58
 8012b9c:	4a0b      	ldr	r2, [pc, #44]	; (8012bcc <vTaskSwitchContext+0x100>)
 8012b9e:	6013      	str	r3, [r2, #0]
}
 8012ba0:	bf00      	nop
 8012ba2:	3714      	adds	r7, #20
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr
 8012bac:	20001440 	.word	0x20001440
 8012bb0:	2000142c 	.word	0x2000142c
 8012bb4:	2000ef84 	.word	0x2000ef84
 8012bb8:	20001448 	.word	0x20001448
 8012bbc:	20001444 	.word	0x20001444
 8012bc0:	20000f44 	.word	0x20000f44
 8012bc4:	20001420 	.word	0x20001420
 8012bc8:	20000f48 	.word	0x20000f48
 8012bcc:	2000019c 	.word	0x2000019c

08012bd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b084      	sub	sp, #16
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d10a      	bne.n	8012bf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be4:	f383 8811 	msr	BASEPRI, r3
 8012be8:	f3bf 8f6f 	isb	sy
 8012bec:	f3bf 8f4f 	dsb	sy
 8012bf0:	60fb      	str	r3, [r7, #12]
}
 8012bf2:	bf00      	nop
 8012bf4:	e7fe      	b.n	8012bf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012bf6:	4b07      	ldr	r3, [pc, #28]	; (8012c14 <vTaskPlaceOnEventList+0x44>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	3318      	adds	r3, #24
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f7fe fa23 	bl	801104a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012c04:	2101      	movs	r1, #1
 8012c06:	6838      	ldr	r0, [r7, #0]
 8012c08:	f000 fd92 	bl	8013730 <prvAddCurrentTaskToDelayedList>
}
 8012c0c:	bf00      	nop
 8012c0e:	3710      	adds	r7, #16
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	20000f44 	.word	0x20000f44

08012c18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b086      	sub	sp, #24
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	60b9      	str	r1, [r7, #8]
 8012c22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d10a      	bne.n	8012c40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c2e:	f383 8811 	msr	BASEPRI, r3
 8012c32:	f3bf 8f6f 	isb	sy
 8012c36:	f3bf 8f4f 	dsb	sy
 8012c3a:	617b      	str	r3, [r7, #20]
}
 8012c3c:	bf00      	nop
 8012c3e:	e7fe      	b.n	8012c3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012c40:	4b0a      	ldr	r3, [pc, #40]	; (8012c6c <vTaskPlaceOnEventListRestricted+0x54>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	3318      	adds	r3, #24
 8012c46:	4619      	mov	r1, r3
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f7fe f9da 	bl	8011002 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d002      	beq.n	8012c5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012c5a:	6879      	ldr	r1, [r7, #4]
 8012c5c:	68b8      	ldr	r0, [r7, #8]
 8012c5e:	f000 fd67 	bl	8013730 <prvAddCurrentTaskToDelayedList>
	}
 8012c62:	bf00      	nop
 8012c64:	3718      	adds	r7, #24
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	20000f44 	.word	0x20000f44

08012c70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b086      	sub	sp, #24
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	68db      	ldr	r3, [r3, #12]
 8012c7c:	68db      	ldr	r3, [r3, #12]
 8012c7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d10a      	bne.n	8012c9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c8a:	f383 8811 	msr	BASEPRI, r3
 8012c8e:	f3bf 8f6f 	isb	sy
 8012c92:	f3bf 8f4f 	dsb	sy
 8012c96:	60fb      	str	r3, [r7, #12]
}
 8012c98:	bf00      	nop
 8012c9a:	e7fe      	b.n	8012c9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012c9c:	693b      	ldr	r3, [r7, #16]
 8012c9e:	3318      	adds	r3, #24
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7fe fa0b 	bl	80110bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ca6:	4b1e      	ldr	r3, [pc, #120]	; (8012d20 <xTaskRemoveFromEventList+0xb0>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d11d      	bne.n	8012cea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	3304      	adds	r3, #4
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7fe fa02 	bl	80110bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cbc:	4b19      	ldr	r3, [pc, #100]	; (8012d24 <xTaskRemoveFromEventList+0xb4>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d903      	bls.n	8012ccc <xTaskRemoveFromEventList+0x5c>
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cc8:	4a16      	ldr	r2, [pc, #88]	; (8012d24 <xTaskRemoveFromEventList+0xb4>)
 8012cca:	6013      	str	r3, [r2, #0]
 8012ccc:	693b      	ldr	r3, [r7, #16]
 8012cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	009b      	lsls	r3, r3, #2
 8012cd4:	4413      	add	r3, r2
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	4a13      	ldr	r2, [pc, #76]	; (8012d28 <xTaskRemoveFromEventList+0xb8>)
 8012cda:	441a      	add	r2, r3
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	3304      	adds	r3, #4
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	4610      	mov	r0, r2
 8012ce4:	f7fe f98d 	bl	8011002 <vListInsertEnd>
 8012ce8:	e005      	b.n	8012cf6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	3318      	adds	r3, #24
 8012cee:	4619      	mov	r1, r3
 8012cf0:	480e      	ldr	r0, [pc, #56]	; (8012d2c <xTaskRemoveFromEventList+0xbc>)
 8012cf2:	f7fe f986 	bl	8011002 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cfa:	4b0d      	ldr	r3, [pc, #52]	; (8012d30 <xTaskRemoveFromEventList+0xc0>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d905      	bls.n	8012d10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012d04:	2301      	movs	r3, #1
 8012d06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012d08:	4b0a      	ldr	r3, [pc, #40]	; (8012d34 <xTaskRemoveFromEventList+0xc4>)
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	601a      	str	r2, [r3, #0]
 8012d0e:	e001      	b.n	8012d14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012d10:	2300      	movs	r3, #0
 8012d12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012d14:	697b      	ldr	r3, [r7, #20]
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3718      	adds	r7, #24
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	20001440 	.word	0x20001440
 8012d24:	20001420 	.word	0x20001420
 8012d28:	20000f48 	.word	0x20000f48
 8012d2c:	200013d8 	.word	0x200013d8
 8012d30:	20000f44 	.word	0x20000f44
 8012d34:	2000142c 	.word	0x2000142c

08012d38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012d38:	b480      	push	{r7}
 8012d3a:	b083      	sub	sp, #12
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012d40:	4b06      	ldr	r3, [pc, #24]	; (8012d5c <vTaskInternalSetTimeOutState+0x24>)
 8012d42:	681a      	ldr	r2, [r3, #0]
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012d48:	4b05      	ldr	r3, [pc, #20]	; (8012d60 <vTaskInternalSetTimeOutState+0x28>)
 8012d4a:	681a      	ldr	r2, [r3, #0]
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	605a      	str	r2, [r3, #4]
}
 8012d50:	bf00      	nop
 8012d52:	370c      	adds	r7, #12
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr
 8012d5c:	20001430 	.word	0x20001430
 8012d60:	2000141c 	.word	0x2000141c

08012d64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b088      	sub	sp, #32
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d10a      	bne.n	8012d8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d78:	f383 8811 	msr	BASEPRI, r3
 8012d7c:	f3bf 8f6f 	isb	sy
 8012d80:	f3bf 8f4f 	dsb	sy
 8012d84:	613b      	str	r3, [r7, #16]
}
 8012d86:	bf00      	nop
 8012d88:	e7fe      	b.n	8012d88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d10a      	bne.n	8012da6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d94:	f383 8811 	msr	BASEPRI, r3
 8012d98:	f3bf 8f6f 	isb	sy
 8012d9c:	f3bf 8f4f 	dsb	sy
 8012da0:	60fb      	str	r3, [r7, #12]
}
 8012da2:	bf00      	nop
 8012da4:	e7fe      	b.n	8012da4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012da6:	f001 f995 	bl	80140d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012daa:	4b1d      	ldr	r3, [pc, #116]	; (8012e20 <xTaskCheckForTimeOut+0xbc>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	685b      	ldr	r3, [r3, #4]
 8012db4:	69ba      	ldr	r2, [r7, #24]
 8012db6:	1ad3      	subs	r3, r2, r3
 8012db8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012dc2:	d102      	bne.n	8012dca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	61fb      	str	r3, [r7, #28]
 8012dc8:	e023      	b.n	8012e12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681a      	ldr	r2, [r3, #0]
 8012dce:	4b15      	ldr	r3, [pc, #84]	; (8012e24 <xTaskCheckForTimeOut+0xc0>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d007      	beq.n	8012de6 <xTaskCheckForTimeOut+0x82>
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	69ba      	ldr	r2, [r7, #24]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d302      	bcc.n	8012de6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012de0:	2301      	movs	r3, #1
 8012de2:	61fb      	str	r3, [r7, #28]
 8012de4:	e015      	b.n	8012e12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	697a      	ldr	r2, [r7, #20]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d20b      	bcs.n	8012e08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	1ad2      	subs	r2, r2, r3
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f7ff ff9b 	bl	8012d38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012e02:	2300      	movs	r3, #0
 8012e04:	61fb      	str	r3, [r7, #28]
 8012e06:	e004      	b.n	8012e12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012e0e:	2301      	movs	r3, #1
 8012e10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012e12:	f001 f98f 	bl	8014134 <vPortExitCritical>

	return xReturn;
 8012e16:	69fb      	ldr	r3, [r7, #28]
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3720      	adds	r7, #32
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}
 8012e20:	2000141c 	.word	0x2000141c
 8012e24:	20001430 	.word	0x20001430

08012e28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012e28:	b480      	push	{r7}
 8012e2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012e2c:	4b03      	ldr	r3, [pc, #12]	; (8012e3c <vTaskMissedYield+0x14>)
 8012e2e:	2201      	movs	r2, #1
 8012e30:	601a      	str	r2, [r3, #0]
}
 8012e32:	bf00      	nop
 8012e34:	46bd      	mov	sp, r7
 8012e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3a:	4770      	bx	lr
 8012e3c:	2000142c 	.word	0x2000142c

08012e40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012e48:	f000 f852 	bl	8012ef0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012e4c:	4b06      	ldr	r3, [pc, #24]	; (8012e68 <prvIdleTask+0x28>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	d9f9      	bls.n	8012e48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012e54:	4b05      	ldr	r3, [pc, #20]	; (8012e6c <prvIdleTask+0x2c>)
 8012e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e5a:	601a      	str	r2, [r3, #0]
 8012e5c:	f3bf 8f4f 	dsb	sy
 8012e60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012e64:	e7f0      	b.n	8012e48 <prvIdleTask+0x8>
 8012e66:	bf00      	nop
 8012e68:	20000f48 	.word	0x20000f48
 8012e6c:	e000ed04 	.word	0xe000ed04

08012e70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b082      	sub	sp, #8
 8012e74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e76:	2300      	movs	r3, #0
 8012e78:	607b      	str	r3, [r7, #4]
 8012e7a:	e00c      	b.n	8012e96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012e7c:	687a      	ldr	r2, [r7, #4]
 8012e7e:	4613      	mov	r3, r2
 8012e80:	009b      	lsls	r3, r3, #2
 8012e82:	4413      	add	r3, r2
 8012e84:	009b      	lsls	r3, r3, #2
 8012e86:	4a12      	ldr	r2, [pc, #72]	; (8012ed0 <prvInitialiseTaskLists+0x60>)
 8012e88:	4413      	add	r3, r2
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fe f88c 	bl	8010fa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	3301      	adds	r3, #1
 8012e94:	607b      	str	r3, [r7, #4]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	2b37      	cmp	r3, #55	; 0x37
 8012e9a:	d9ef      	bls.n	8012e7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012e9c:	480d      	ldr	r0, [pc, #52]	; (8012ed4 <prvInitialiseTaskLists+0x64>)
 8012e9e:	f7fe f883 	bl	8010fa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012ea2:	480d      	ldr	r0, [pc, #52]	; (8012ed8 <prvInitialiseTaskLists+0x68>)
 8012ea4:	f7fe f880 	bl	8010fa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012ea8:	480c      	ldr	r0, [pc, #48]	; (8012edc <prvInitialiseTaskLists+0x6c>)
 8012eaa:	f7fe f87d 	bl	8010fa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012eae:	480c      	ldr	r0, [pc, #48]	; (8012ee0 <prvInitialiseTaskLists+0x70>)
 8012eb0:	f7fe f87a 	bl	8010fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012eb4:	480b      	ldr	r0, [pc, #44]	; (8012ee4 <prvInitialiseTaskLists+0x74>)
 8012eb6:	f7fe f877 	bl	8010fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012eba:	4b0b      	ldr	r3, [pc, #44]	; (8012ee8 <prvInitialiseTaskLists+0x78>)
 8012ebc:	4a05      	ldr	r2, [pc, #20]	; (8012ed4 <prvInitialiseTaskLists+0x64>)
 8012ebe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012ec0:	4b0a      	ldr	r3, [pc, #40]	; (8012eec <prvInitialiseTaskLists+0x7c>)
 8012ec2:	4a05      	ldr	r2, [pc, #20]	; (8012ed8 <prvInitialiseTaskLists+0x68>)
 8012ec4:	601a      	str	r2, [r3, #0]
}
 8012ec6:	bf00      	nop
 8012ec8:	3708      	adds	r7, #8
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	20000f48 	.word	0x20000f48
 8012ed4:	200013a8 	.word	0x200013a8
 8012ed8:	200013bc 	.word	0x200013bc
 8012edc:	200013d8 	.word	0x200013d8
 8012ee0:	200013ec 	.word	0x200013ec
 8012ee4:	20001404 	.word	0x20001404
 8012ee8:	200013d0 	.word	0x200013d0
 8012eec:	200013d4 	.word	0x200013d4

08012ef0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b082      	sub	sp, #8
 8012ef4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ef6:	e019      	b.n	8012f2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012ef8:	f001 f8ec 	bl	80140d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012efc:	4b10      	ldr	r3, [pc, #64]	; (8012f40 <prvCheckTasksWaitingTermination+0x50>)
 8012efe:	68db      	ldr	r3, [r3, #12]
 8012f00:	68db      	ldr	r3, [r3, #12]
 8012f02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	3304      	adds	r3, #4
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7fe f8d7 	bl	80110bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012f0e:	4b0d      	ldr	r3, [pc, #52]	; (8012f44 <prvCheckTasksWaitingTermination+0x54>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	3b01      	subs	r3, #1
 8012f14:	4a0b      	ldr	r2, [pc, #44]	; (8012f44 <prvCheckTasksWaitingTermination+0x54>)
 8012f16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012f18:	4b0b      	ldr	r3, [pc, #44]	; (8012f48 <prvCheckTasksWaitingTermination+0x58>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	3b01      	subs	r3, #1
 8012f1e:	4a0a      	ldr	r2, [pc, #40]	; (8012f48 <prvCheckTasksWaitingTermination+0x58>)
 8012f20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012f22:	f001 f907 	bl	8014134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f000 f8e4 	bl	80130f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f2c:	4b06      	ldr	r3, [pc, #24]	; (8012f48 <prvCheckTasksWaitingTermination+0x58>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d1e1      	bne.n	8012ef8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012f34:	bf00      	nop
 8012f36:	bf00      	nop
 8012f38:	3708      	adds	r7, #8
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	200013ec 	.word	0x200013ec
 8012f44:	20001418 	.word	0x20001418
 8012f48:	20001400 	.word	0x20001400

08012f4c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b086      	sub	sp, #24
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60f8      	str	r0, [r7, #12]
 8012f54:	60b9      	str	r1, [r7, #8]
 8012f56:	607a      	str	r2, [r7, #4]
 8012f58:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d102      	bne.n	8012f66 <vTaskGetInfo+0x1a>
 8012f60:	4b2c      	ldr	r3, [pc, #176]	; (8013014 <vTaskGetInfo+0xc8>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	e000      	b.n	8012f68 <vTaskGetInfo+0x1c>
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	697a      	ldr	r2, [r7, #20]
 8012f6e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8012fa2:	78fb      	ldrb	r3, [r7, #3]
 8012fa4:	2b05      	cmp	r3, #5
 8012fa6:	d01a      	beq.n	8012fde <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8012fa8:	4b1a      	ldr	r3, [pc, #104]	; (8013014 <vTaskGetInfo+0xc8>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	697a      	ldr	r2, [r7, #20]
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d103      	bne.n	8012fba <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	731a      	strb	r2, [r3, #12]
 8012fb8:	e018      	b.n	8012fec <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	78fa      	ldrb	r2, [r7, #3]
 8012fbe:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8012fc0:	78fb      	ldrb	r3, [r7, #3]
 8012fc2:	2b03      	cmp	r3, #3
 8012fc4:	d112      	bne.n	8012fec <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8012fc6:	f7ff fb7b 	bl	80126c0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d002      	beq.n	8012fd8 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	2202      	movs	r2, #2
 8012fd6:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8012fd8:	f7ff fb80 	bl	80126dc <xTaskResumeAll>
 8012fdc:	e006      	b.n	8012fec <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8012fde:	6978      	ldr	r0, [r7, #20]
 8012fe0:	f7ff fa94 	bl	801250c <eTaskGetState>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d009      	beq.n	8013006 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8012ff2:	697b      	ldr	r3, [r7, #20]
 8012ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f000 f860 	bl	80130bc <prvTaskCheckFreeStackSpace>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	461a      	mov	r2, r3
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8013004:	e002      	b.n	801300c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	2200      	movs	r2, #0
 801300a:	841a      	strh	r2, [r3, #32]
	}
 801300c:	bf00      	nop
 801300e:	3718      	adds	r7, #24
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}
 8013014:	20000f44 	.word	0x20000f44

08013018 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8013018:	b580      	push	{r7, lr}
 801301a:	b08a      	sub	sp, #40	; 0x28
 801301c:	af00      	add	r7, sp, #0
 801301e:	60f8      	str	r0, [r7, #12]
 8013020:	60b9      	str	r1, [r7, #8]
 8013022:	4613      	mov	r3, r2
 8013024:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8013026:	2300      	movs	r3, #0
 8013028:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d03f      	beq.n	80130b2 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	623b      	str	r3, [r7, #32]
 8013036:	6a3b      	ldr	r3, [r7, #32]
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	685a      	ldr	r2, [r3, #4]
 801303c:	6a3b      	ldr	r3, [r7, #32]
 801303e:	605a      	str	r2, [r3, #4]
 8013040:	6a3b      	ldr	r3, [r7, #32]
 8013042:	685a      	ldr	r2, [r3, #4]
 8013044:	6a3b      	ldr	r3, [r7, #32]
 8013046:	3308      	adds	r3, #8
 8013048:	429a      	cmp	r2, r3
 801304a:	d104      	bne.n	8013056 <prvListTasksWithinSingleList+0x3e>
 801304c:	6a3b      	ldr	r3, [r7, #32]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	685a      	ldr	r2, [r3, #4]
 8013052:	6a3b      	ldr	r3, [r7, #32]
 8013054:	605a      	str	r2, [r3, #4]
 8013056:	6a3b      	ldr	r3, [r7, #32]
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	68db      	ldr	r3, [r3, #12]
 801305c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	61bb      	str	r3, [r7, #24]
 8013062:	69bb      	ldr	r3, [r7, #24]
 8013064:	685b      	ldr	r3, [r3, #4]
 8013066:	685a      	ldr	r2, [r3, #4]
 8013068:	69bb      	ldr	r3, [r7, #24]
 801306a:	605a      	str	r2, [r3, #4]
 801306c:	69bb      	ldr	r3, [r7, #24]
 801306e:	685a      	ldr	r2, [r3, #4]
 8013070:	69bb      	ldr	r3, [r7, #24]
 8013072:	3308      	adds	r3, #8
 8013074:	429a      	cmp	r2, r3
 8013076:	d104      	bne.n	8013082 <prvListTasksWithinSingleList+0x6a>
 8013078:	69bb      	ldr	r3, [r7, #24]
 801307a:	685b      	ldr	r3, [r3, #4]
 801307c:	685a      	ldr	r2, [r3, #4]
 801307e:	69bb      	ldr	r3, [r7, #24]
 8013080:	605a      	str	r2, [r3, #4]
 8013082:	69bb      	ldr	r3, [r7, #24]
 8013084:	685b      	ldr	r3, [r3, #4]
 8013086:	68db      	ldr	r3, [r3, #12]
 8013088:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 801308a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801308c:	4613      	mov	r3, r2
 801308e:	00db      	lsls	r3, r3, #3
 8013090:	4413      	add	r3, r2
 8013092:	009b      	lsls	r3, r3, #2
 8013094:	461a      	mov	r2, r3
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	1899      	adds	r1, r3, r2
 801309a:	79fb      	ldrb	r3, [r7, #7]
 801309c:	2201      	movs	r2, #1
 801309e:	6978      	ldr	r0, [r7, #20]
 80130a0:	f7ff ff54 	bl	8012f4c <vTaskGetInfo>
				uxTask++;
 80130a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a6:	3301      	adds	r3, #1
 80130a8:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80130aa:	697a      	ldr	r2, [r7, #20]
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d1d5      	bne.n	801305e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80130b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80130b4:	4618      	mov	r0, r3
 80130b6:	3728      	adds	r7, #40	; 0x28
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}

080130bc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80130bc:	b480      	push	{r7}
 80130be:	b085      	sub	sp, #20
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80130c4:	2300      	movs	r3, #0
 80130c6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80130c8:	e005      	b.n	80130d6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	3301      	adds	r3, #1
 80130ce:	607b      	str	r3, [r7, #4]
			ulCount++;
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	3301      	adds	r3, #1
 80130d4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	781b      	ldrb	r3, [r3, #0]
 80130da:	2ba5      	cmp	r3, #165	; 0xa5
 80130dc:	d0f5      	beq.n	80130ca <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	089b      	lsrs	r3, r3, #2
 80130e2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	b29b      	uxth	r3, r3
	}
 80130e8:	4618      	mov	r0, r3
 80130ea:	3714      	adds	r7, #20
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr

080130f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b084      	sub	sp, #16
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	3358      	adds	r3, #88	; 0x58
 8013100:	4618      	mov	r0, r3
 8013102:	f002 fead 	bl	8015e60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801310c:	2b00      	cmp	r3, #0
 801310e:	d108      	bne.n	8013122 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013114:	4618      	mov	r0, r3
 8013116:	f001 f9cb 	bl	80144b0 <vPortFree>
				vPortFree( pxTCB );
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f001 f9c8 	bl	80144b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013120:	e018      	b.n	8013154 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8013128:	2b01      	cmp	r3, #1
 801312a:	d103      	bne.n	8013134 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f001 f9bf 	bl	80144b0 <vPortFree>
	}
 8013132:	e00f      	b.n	8013154 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801313a:	2b02      	cmp	r3, #2
 801313c:	d00a      	beq.n	8013154 <prvDeleteTCB+0x60>
	__asm volatile
 801313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013142:	f383 8811 	msr	BASEPRI, r3
 8013146:	f3bf 8f6f 	isb	sy
 801314a:	f3bf 8f4f 	dsb	sy
 801314e:	60fb      	str	r3, [r7, #12]
}
 8013150:	bf00      	nop
 8013152:	e7fe      	b.n	8013152 <prvDeleteTCB+0x5e>
	}
 8013154:	bf00      	nop
 8013156:	3710      	adds	r7, #16
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}

0801315c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013162:	4b0c      	ldr	r3, [pc, #48]	; (8013194 <prvResetNextTaskUnblockTime+0x38>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d104      	bne.n	8013176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801316c:	4b0a      	ldr	r3, [pc, #40]	; (8013198 <prvResetNextTaskUnblockTime+0x3c>)
 801316e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013174:	e008      	b.n	8013188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013176:	4b07      	ldr	r3, [pc, #28]	; (8013194 <prvResetNextTaskUnblockTime+0x38>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	68db      	ldr	r3, [r3, #12]
 801317c:	68db      	ldr	r3, [r3, #12]
 801317e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	4a04      	ldr	r2, [pc, #16]	; (8013198 <prvResetNextTaskUnblockTime+0x3c>)
 8013186:	6013      	str	r3, [r2, #0]
}
 8013188:	bf00      	nop
 801318a:	370c      	adds	r7, #12
 801318c:	46bd      	mov	sp, r7
 801318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013192:	4770      	bx	lr
 8013194:	200013d0 	.word	0x200013d0
 8013198:	20001438 	.word	0x20001438

0801319c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801319c:	b480      	push	{r7}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80131a2:	4b0b      	ldr	r3, [pc, #44]	; (80131d0 <xTaskGetSchedulerState+0x34>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d102      	bne.n	80131b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80131aa:	2301      	movs	r3, #1
 80131ac:	607b      	str	r3, [r7, #4]
 80131ae:	e008      	b.n	80131c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131b0:	4b08      	ldr	r3, [pc, #32]	; (80131d4 <xTaskGetSchedulerState+0x38>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d102      	bne.n	80131be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80131b8:	2302      	movs	r3, #2
 80131ba:	607b      	str	r3, [r7, #4]
 80131bc:	e001      	b.n	80131c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80131be:	2300      	movs	r3, #0
 80131c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80131c2:	687b      	ldr	r3, [r7, #4]
	}
 80131c4:	4618      	mov	r0, r3
 80131c6:	370c      	adds	r7, #12
 80131c8:	46bd      	mov	sp, r7
 80131ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ce:	4770      	bx	lr
 80131d0:	20001424 	.word	0x20001424
 80131d4:	20001440 	.word	0x20001440

080131d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b084      	sub	sp, #16
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80131e4:	2300      	movs	r3, #0
 80131e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d051      	beq.n	8013292 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131f2:	4b2a      	ldr	r3, [pc, #168]	; (801329c <xTaskPriorityInherit+0xc4>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d241      	bcs.n	8013280 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	699b      	ldr	r3, [r3, #24]
 8013200:	2b00      	cmp	r3, #0
 8013202:	db06      	blt.n	8013212 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013204:	4b25      	ldr	r3, [pc, #148]	; (801329c <xTaskPriorityInherit+0xc4>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801320a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	6959      	ldr	r1, [r3, #20]
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801321a:	4613      	mov	r3, r2
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	4413      	add	r3, r2
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	4a1f      	ldr	r2, [pc, #124]	; (80132a0 <xTaskPriorityInherit+0xc8>)
 8013224:	4413      	add	r3, r2
 8013226:	4299      	cmp	r1, r3
 8013228:	d122      	bne.n	8013270 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	3304      	adds	r3, #4
 801322e:	4618      	mov	r0, r3
 8013230:	f7fd ff44 	bl	80110bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013234:	4b19      	ldr	r3, [pc, #100]	; (801329c <xTaskPriorityInherit+0xc4>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013242:	4b18      	ldr	r3, [pc, #96]	; (80132a4 <xTaskPriorityInherit+0xcc>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	429a      	cmp	r2, r3
 8013248:	d903      	bls.n	8013252 <xTaskPriorityInherit+0x7a>
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801324e:	4a15      	ldr	r2, [pc, #84]	; (80132a4 <xTaskPriorityInherit+0xcc>)
 8013250:	6013      	str	r3, [r2, #0]
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013256:	4613      	mov	r3, r2
 8013258:	009b      	lsls	r3, r3, #2
 801325a:	4413      	add	r3, r2
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	4a10      	ldr	r2, [pc, #64]	; (80132a0 <xTaskPriorityInherit+0xc8>)
 8013260:	441a      	add	r2, r3
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	3304      	adds	r3, #4
 8013266:	4619      	mov	r1, r3
 8013268:	4610      	mov	r0, r2
 801326a:	f7fd feca 	bl	8011002 <vListInsertEnd>
 801326e:	e004      	b.n	801327a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013270:	4b0a      	ldr	r3, [pc, #40]	; (801329c <xTaskPriorityInherit+0xc4>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801327a:	2301      	movs	r3, #1
 801327c:	60fb      	str	r3, [r7, #12]
 801327e:	e008      	b.n	8013292 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013280:	68bb      	ldr	r3, [r7, #8]
 8013282:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013284:	4b05      	ldr	r3, [pc, #20]	; (801329c <xTaskPriorityInherit+0xc4>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801328a:	429a      	cmp	r2, r3
 801328c:	d201      	bcs.n	8013292 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801328e:	2301      	movs	r3, #1
 8013290:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013292:	68fb      	ldr	r3, [r7, #12]
	}
 8013294:	4618      	mov	r0, r3
 8013296:	3710      	adds	r7, #16
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	20000f44 	.word	0x20000f44
 80132a0:	20000f48 	.word	0x20000f48
 80132a4:	20001420 	.word	0x20001420

080132a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b086      	sub	sp, #24
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80132b4:	2300      	movs	r3, #0
 80132b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d056      	beq.n	801336c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80132be:	4b2e      	ldr	r3, [pc, #184]	; (8013378 <xTaskPriorityDisinherit+0xd0>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	693a      	ldr	r2, [r7, #16]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d00a      	beq.n	80132de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80132c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132cc:	f383 8811 	msr	BASEPRI, r3
 80132d0:	f3bf 8f6f 	isb	sy
 80132d4:	f3bf 8f4f 	dsb	sy
 80132d8:	60fb      	str	r3, [r7, #12]
}
 80132da:	bf00      	nop
 80132dc:	e7fe      	b.n	80132dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80132de:	693b      	ldr	r3, [r7, #16]
 80132e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d10a      	bne.n	80132fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80132e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ea:	f383 8811 	msr	BASEPRI, r3
 80132ee:	f3bf 8f6f 	isb	sy
 80132f2:	f3bf 8f4f 	dsb	sy
 80132f6:	60bb      	str	r3, [r7, #8]
}
 80132f8:	bf00      	nop
 80132fa:	e7fe      	b.n	80132fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013300:	1e5a      	subs	r2, r3, #1
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801330e:	429a      	cmp	r2, r3
 8013310:	d02c      	beq.n	801336c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013316:	2b00      	cmp	r3, #0
 8013318:	d128      	bne.n	801336c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	3304      	adds	r3, #4
 801331e:	4618      	mov	r0, r3
 8013320:	f7fd fecc 	bl	80110bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013330:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801333c:	4b0f      	ldr	r3, [pc, #60]	; (801337c <xTaskPriorityDisinherit+0xd4>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	429a      	cmp	r2, r3
 8013342:	d903      	bls.n	801334c <xTaskPriorityDisinherit+0xa4>
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013348:	4a0c      	ldr	r2, [pc, #48]	; (801337c <xTaskPriorityDisinherit+0xd4>)
 801334a:	6013      	str	r3, [r2, #0]
 801334c:	693b      	ldr	r3, [r7, #16]
 801334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013350:	4613      	mov	r3, r2
 8013352:	009b      	lsls	r3, r3, #2
 8013354:	4413      	add	r3, r2
 8013356:	009b      	lsls	r3, r3, #2
 8013358:	4a09      	ldr	r2, [pc, #36]	; (8013380 <xTaskPriorityDisinherit+0xd8>)
 801335a:	441a      	add	r2, r3
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	3304      	adds	r3, #4
 8013360:	4619      	mov	r1, r3
 8013362:	4610      	mov	r0, r2
 8013364:	f7fd fe4d 	bl	8011002 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013368:	2301      	movs	r3, #1
 801336a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801336c:	697b      	ldr	r3, [r7, #20]
	}
 801336e:	4618      	mov	r0, r3
 8013370:	3718      	adds	r7, #24
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}
 8013376:	bf00      	nop
 8013378:	20000f44 	.word	0x20000f44
 801337c:	20001420 	.word	0x20001420
 8013380:	20000f48 	.word	0x20000f48

08013384 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013384:	b580      	push	{r7, lr}
 8013386:	b088      	sub	sp, #32
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
 801338c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013392:	2301      	movs	r3, #1
 8013394:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d06a      	beq.n	8013472 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801339c:	69bb      	ldr	r3, [r7, #24]
 801339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10a      	bne.n	80133ba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80133a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a8:	f383 8811 	msr	BASEPRI, r3
 80133ac:	f3bf 8f6f 	isb	sy
 80133b0:	f3bf 8f4f 	dsb	sy
 80133b4:	60fb      	str	r3, [r7, #12]
}
 80133b6:	bf00      	nop
 80133b8:	e7fe      	b.n	80133b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133be:	683a      	ldr	r2, [r7, #0]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d902      	bls.n	80133ca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	61fb      	str	r3, [r7, #28]
 80133c8:	e002      	b.n	80133d0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80133ca:	69bb      	ldr	r3, [r7, #24]
 80133cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133ce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d4:	69fa      	ldr	r2, [r7, #28]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d04b      	beq.n	8013472 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80133da:	69bb      	ldr	r3, [r7, #24]
 80133dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133de:	697a      	ldr	r2, [r7, #20]
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d146      	bne.n	8013472 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80133e4:	4b25      	ldr	r3, [pc, #148]	; (801347c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	69ba      	ldr	r2, [r7, #24]
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d10a      	bne.n	8013404 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80133ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f2:	f383 8811 	msr	BASEPRI, r3
 80133f6:	f3bf 8f6f 	isb	sy
 80133fa:	f3bf 8f4f 	dsb	sy
 80133fe:	60bb      	str	r3, [r7, #8]
}
 8013400:	bf00      	nop
 8013402:	e7fe      	b.n	8013402 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013404:	69bb      	ldr	r3, [r7, #24]
 8013406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013408:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	69fa      	ldr	r2, [r7, #28]
 801340e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	699b      	ldr	r3, [r3, #24]
 8013414:	2b00      	cmp	r3, #0
 8013416:	db04      	blt.n	8013422 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013418:	69fb      	ldr	r3, [r7, #28]
 801341a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	6959      	ldr	r1, [r3, #20]
 8013426:	693a      	ldr	r2, [r7, #16]
 8013428:	4613      	mov	r3, r2
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	4413      	add	r3, r2
 801342e:	009b      	lsls	r3, r3, #2
 8013430:	4a13      	ldr	r2, [pc, #76]	; (8013480 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013432:	4413      	add	r3, r2
 8013434:	4299      	cmp	r1, r3
 8013436:	d11c      	bne.n	8013472 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013438:	69bb      	ldr	r3, [r7, #24]
 801343a:	3304      	adds	r3, #4
 801343c:	4618      	mov	r0, r3
 801343e:	f7fd fe3d 	bl	80110bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013446:	4b0f      	ldr	r3, [pc, #60]	; (8013484 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	429a      	cmp	r2, r3
 801344c:	d903      	bls.n	8013456 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801344e:	69bb      	ldr	r3, [r7, #24]
 8013450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013452:	4a0c      	ldr	r2, [pc, #48]	; (8013484 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013454:	6013      	str	r3, [r2, #0]
 8013456:	69bb      	ldr	r3, [r7, #24]
 8013458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801345a:	4613      	mov	r3, r2
 801345c:	009b      	lsls	r3, r3, #2
 801345e:	4413      	add	r3, r2
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	4a07      	ldr	r2, [pc, #28]	; (8013480 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013464:	441a      	add	r2, r3
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	3304      	adds	r3, #4
 801346a:	4619      	mov	r1, r3
 801346c:	4610      	mov	r0, r2
 801346e:	f7fd fdc8 	bl	8011002 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013472:	bf00      	nop
 8013474:	3720      	adds	r7, #32
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	20000f44 	.word	0x20000f44
 8013480:	20000f48 	.word	0x20000f48
 8013484:	20001420 	.word	0x20001420

08013488 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8013488:	b580      	push	{r7, lr}
 801348a:	b084      	sub	sp, #16
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8013492:	6839      	ldr	r1, [r7, #0]
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f002 fdc1 	bl	801601c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f7ec fe98 	bl	80001d0 <strlen>
 80134a0:	60f8      	str	r0, [r7, #12]
 80134a2:	e007      	b.n	80134b4 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80134a4:	687a      	ldr	r2, [r7, #4]
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	4413      	add	r3, r2
 80134aa:	2220      	movs	r2, #32
 80134ac:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	3301      	adds	r3, #1
 80134b2:	60fb      	str	r3, [r7, #12]
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2b0e      	cmp	r3, #14
 80134b8:	d9f4      	bls.n	80134a4 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 80134ba:	687a      	ldr	r2, [r7, #4]
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	4413      	add	r3, r2
 80134c0:	2200      	movs	r2, #0
 80134c2:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80134c4:	687a      	ldr	r2, [r7, #4]
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	4413      	add	r3, r2
	}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3710      	adds	r7, #16
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
	...

080134d4 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 80134d4:	b590      	push	{r4, r7, lr}
 80134d6:	b089      	sub	sp, #36	; 0x24
 80134d8:	af02      	add	r7, sp, #8
 80134da:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2200      	movs	r2, #0
 80134e0:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80134e2:	4b45      	ldr	r3, [pc, #276]	; (80135f8 <vTaskList+0x124>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80134e8:	4b43      	ldr	r3, [pc, #268]	; (80135f8 <vTaskList+0x124>)
 80134ea:	681a      	ldr	r2, [r3, #0]
 80134ec:	4613      	mov	r3, r2
 80134ee:	00db      	lsls	r3, r3, #3
 80134f0:	4413      	add	r3, r2
 80134f2:	009b      	lsls	r3, r3, #2
 80134f4:	4618      	mov	r0, r3
 80134f6:	f000 ff0f 	bl	8014318 <pvPortMalloc>
 80134fa:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d076      	beq.n	80135f0 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8013502:	2200      	movs	r2, #0
 8013504:	68f9      	ldr	r1, [r7, #12]
 8013506:	68b8      	ldr	r0, [r7, #8]
 8013508:	f7ff f996 	bl	8012838 <uxTaskGetSystemState>
 801350c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 801350e:	2300      	movs	r3, #0
 8013510:	617b      	str	r3, [r7, #20]
 8013512:	e066      	b.n	80135e2 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8013514:	697a      	ldr	r2, [r7, #20]
 8013516:	4613      	mov	r3, r2
 8013518:	00db      	lsls	r3, r3, #3
 801351a:	4413      	add	r3, r2
 801351c:	009b      	lsls	r3, r3, #2
 801351e:	461a      	mov	r2, r3
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	4413      	add	r3, r2
 8013524:	7b1b      	ldrb	r3, [r3, #12]
 8013526:	2b04      	cmp	r3, #4
 8013528:	d81b      	bhi.n	8013562 <vTaskList+0x8e>
 801352a:	a201      	add	r2, pc, #4	; (adr r2, 8013530 <vTaskList+0x5c>)
 801352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013530:	08013545 	.word	0x08013545
 8013534:	0801354b 	.word	0x0801354b
 8013538:	08013551 	.word	0x08013551
 801353c:	08013557 	.word	0x08013557
 8013540:	0801355d 	.word	0x0801355d
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8013544:	2358      	movs	r3, #88	; 0x58
 8013546:	74fb      	strb	r3, [r7, #19]
										break;
 8013548:	e00e      	b.n	8013568 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 801354a:	2352      	movs	r3, #82	; 0x52
 801354c:	74fb      	strb	r3, [r7, #19]
										break;
 801354e:	e00b      	b.n	8013568 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8013550:	2342      	movs	r3, #66	; 0x42
 8013552:	74fb      	strb	r3, [r7, #19]
										break;
 8013554:	e008      	b.n	8013568 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8013556:	2353      	movs	r3, #83	; 0x53
 8013558:	74fb      	strb	r3, [r7, #19]
										break;
 801355a:	e005      	b.n	8013568 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 801355c:	2344      	movs	r3, #68	; 0x44
 801355e:	74fb      	strb	r3, [r7, #19]
										break;
 8013560:	e002      	b.n	8013568 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8013562:	2300      	movs	r3, #0
 8013564:	74fb      	strb	r3, [r7, #19]
										break;
 8013566:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8013568:	697a      	ldr	r2, [r7, #20]
 801356a:	4613      	mov	r3, r2
 801356c:	00db      	lsls	r3, r3, #3
 801356e:	4413      	add	r3, r2
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	461a      	mov	r2, r3
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	4413      	add	r3, r2
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	4619      	mov	r1, r3
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f7ff ff83 	bl	8013488 <prvWriteNameToBuffer>
 8013582:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8013584:	7cf9      	ldrb	r1, [r7, #19]
 8013586:	697a      	ldr	r2, [r7, #20]
 8013588:	4613      	mov	r3, r2
 801358a:	00db      	lsls	r3, r3, #3
 801358c:	4413      	add	r3, r2
 801358e:	009b      	lsls	r3, r3, #2
 8013590:	461a      	mov	r2, r3
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	4413      	add	r3, r2
 8013596:	6918      	ldr	r0, [r3, #16]
 8013598:	697a      	ldr	r2, [r7, #20]
 801359a:	4613      	mov	r3, r2
 801359c:	00db      	lsls	r3, r3, #3
 801359e:	4413      	add	r3, r2
 80135a0:	009b      	lsls	r3, r3, #2
 80135a2:	461a      	mov	r2, r3
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	4413      	add	r3, r2
 80135a8:	8c1b      	ldrh	r3, [r3, #32]
 80135aa:	461c      	mov	r4, r3
 80135ac:	697a      	ldr	r2, [r7, #20]
 80135ae:	4613      	mov	r3, r2
 80135b0:	00db      	lsls	r3, r3, #3
 80135b2:	4413      	add	r3, r2
 80135b4:	009b      	lsls	r3, r3, #2
 80135b6:	461a      	mov	r2, r3
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	4413      	add	r3, r2
 80135bc:	689b      	ldr	r3, [r3, #8]
 80135be:	9301      	str	r3, [sp, #4]
 80135c0:	9400      	str	r4, [sp, #0]
 80135c2:	4603      	mov	r3, r0
 80135c4:	460a      	mov	r2, r1
 80135c6:	490d      	ldr	r1, [pc, #52]	; (80135fc <vTaskList+0x128>)
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f002 fcb5 	bl	8015f38 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f7ec fdfe 	bl	80001d0 <strlen>
 80135d4:	4602      	mov	r2, r0
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	4413      	add	r3, r2
 80135da:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 80135dc:	697b      	ldr	r3, [r7, #20]
 80135de:	3301      	adds	r3, #1
 80135e0:	617b      	str	r3, [r7, #20]
 80135e2:	697a      	ldr	r2, [r7, #20]
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d394      	bcc.n	8013514 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80135ea:	68b8      	ldr	r0, [r7, #8]
 80135ec:	f000 ff60 	bl	80144b0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80135f0:	bf00      	nop
 80135f2:	371c      	adds	r7, #28
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd90      	pop	{r4, r7, pc}
 80135f8:	20001418 	.word	0x20001418
 80135fc:	08018760 	.word	0x08018760

08013600 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8013600:	b580      	push	{r7, lr}
 8013602:	b088      	sub	sp, #32
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2200      	movs	r2, #0
 801360c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801360e:	4b3a      	ldr	r3, [pc, #232]	; (80136f8 <vTaskGetRunTimeStats+0xf8>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8013614:	4b38      	ldr	r3, [pc, #224]	; (80136f8 <vTaskGetRunTimeStats+0xf8>)
 8013616:	681a      	ldr	r2, [r3, #0]
 8013618:	4613      	mov	r3, r2
 801361a:	00db      	lsls	r3, r3, #3
 801361c:	4413      	add	r3, r2
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	4618      	mov	r0, r3
 8013622:	f000 fe79 	bl	8014318 <pvPortMalloc>
 8013626:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d05f      	beq.n	80136ee <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 801362e:	f107 030c 	add.w	r3, r7, #12
 8013632:	461a      	mov	r2, r3
 8013634:	69b9      	ldr	r1, [r7, #24]
 8013636:	6978      	ldr	r0, [r7, #20]
 8013638:	f7ff f8fe 	bl	8012838 <uxTaskGetSystemState>
 801363c:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	4a2e      	ldr	r2, [pc, #184]	; (80136fc <vTaskGetRunTimeStats+0xfc>)
 8013642:	fba2 2303 	umull	r2, r3, r2, r3
 8013646:	095b      	lsrs	r3, r3, #5
 8013648:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d04b      	beq.n	80136e8 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8013650:	2300      	movs	r3, #0
 8013652:	61fb      	str	r3, [r7, #28]
 8013654:	e044      	b.n	80136e0 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8013656:	69fa      	ldr	r2, [r7, #28]
 8013658:	4613      	mov	r3, r2
 801365a:	00db      	lsls	r3, r3, #3
 801365c:	4413      	add	r3, r2
 801365e:	009b      	lsls	r3, r3, #2
 8013660:	461a      	mov	r2, r3
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	4413      	add	r3, r2
 8013666:	699a      	ldr	r2, [r3, #24]
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	fbb2 f3f3 	udiv	r3, r2, r3
 801366e:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8013670:	69fa      	ldr	r2, [r7, #28]
 8013672:	4613      	mov	r3, r2
 8013674:	00db      	lsls	r3, r3, #3
 8013676:	4413      	add	r3, r2
 8013678:	009b      	lsls	r3, r3, #2
 801367a:	461a      	mov	r2, r3
 801367c:	697b      	ldr	r3, [r7, #20]
 801367e:	4413      	add	r3, r2
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	4619      	mov	r1, r3
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7ff feff 	bl	8013488 <prvWriteNameToBuffer>
 801368a:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 801368c:	693b      	ldr	r3, [r7, #16]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d00e      	beq.n	80136b0 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8013692:	69fa      	ldr	r2, [r7, #28]
 8013694:	4613      	mov	r3, r2
 8013696:	00db      	lsls	r3, r3, #3
 8013698:	4413      	add	r3, r2
 801369a:	009b      	lsls	r3, r3, #2
 801369c:	461a      	mov	r2, r3
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	4413      	add	r3, r2
 80136a2:	699a      	ldr	r2, [r3, #24]
 80136a4:	693b      	ldr	r3, [r7, #16]
 80136a6:	4916      	ldr	r1, [pc, #88]	; (8013700 <vTaskGetRunTimeStats+0x100>)
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f002 fc45 	bl	8015f38 <siprintf>
 80136ae:	e00d      	b.n	80136cc <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80136b0:	69fa      	ldr	r2, [r7, #28]
 80136b2:	4613      	mov	r3, r2
 80136b4:	00db      	lsls	r3, r3, #3
 80136b6:	4413      	add	r3, r2
 80136b8:	009b      	lsls	r3, r3, #2
 80136ba:	461a      	mov	r2, r3
 80136bc:	697b      	ldr	r3, [r7, #20]
 80136be:	4413      	add	r3, r2
 80136c0:	699b      	ldr	r3, [r3, #24]
 80136c2:	461a      	mov	r2, r3
 80136c4:	490f      	ldr	r1, [pc, #60]	; (8013704 <vTaskGetRunTimeStats+0x104>)
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f002 fc36 	bl	8015f38 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f7ec fd7f 	bl	80001d0 <strlen>
 80136d2:	4602      	mov	r2, r0
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	4413      	add	r3, r2
 80136d8:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 80136da:	69fb      	ldr	r3, [r7, #28]
 80136dc:	3301      	adds	r3, #1
 80136de:	61fb      	str	r3, [r7, #28]
 80136e0:	69fa      	ldr	r2, [r7, #28]
 80136e2:	69bb      	ldr	r3, [r7, #24]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d3b6      	bcc.n	8013656 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80136e8:	6978      	ldr	r0, [r7, #20]
 80136ea:	f000 fee1 	bl	80144b0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80136ee:	bf00      	nop
 80136f0:	3720      	adds	r7, #32
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	20001418 	.word	0x20001418
 80136fc:	51eb851f 	.word	0x51eb851f
 8013700:	08018770 	.word	0x08018770
 8013704:	0801877c 	.word	0x0801877c

08013708 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013708:	b480      	push	{r7}
 801370a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801370c:	4b07      	ldr	r3, [pc, #28]	; (801372c <pvTaskIncrementMutexHeldCount+0x24>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d004      	beq.n	801371e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013714:	4b05      	ldr	r3, [pc, #20]	; (801372c <pvTaskIncrementMutexHeldCount+0x24>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801371a:	3201      	adds	r2, #1
 801371c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801371e:	4b03      	ldr	r3, [pc, #12]	; (801372c <pvTaskIncrementMutexHeldCount+0x24>)
 8013720:	681b      	ldr	r3, [r3, #0]
	}
 8013722:	4618      	mov	r0, r3
 8013724:	46bd      	mov	sp, r7
 8013726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372a:	4770      	bx	lr
 801372c:	20000f44 	.word	0x20000f44

08013730 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b084      	sub	sp, #16
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801373a:	4b21      	ldr	r3, [pc, #132]	; (80137c0 <prvAddCurrentTaskToDelayedList+0x90>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013740:	4b20      	ldr	r3, [pc, #128]	; (80137c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	3304      	adds	r3, #4
 8013746:	4618      	mov	r0, r3
 8013748:	f7fd fcb8 	bl	80110bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013752:	d10a      	bne.n	801376a <prvAddCurrentTaskToDelayedList+0x3a>
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d007      	beq.n	801376a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801375a:	4b1a      	ldr	r3, [pc, #104]	; (80137c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	3304      	adds	r3, #4
 8013760:	4619      	mov	r1, r3
 8013762:	4819      	ldr	r0, [pc, #100]	; (80137c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8013764:	f7fd fc4d 	bl	8011002 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013768:	e026      	b.n	80137b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801376a:	68fa      	ldr	r2, [r7, #12]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	4413      	add	r3, r2
 8013770:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013772:	4b14      	ldr	r3, [pc, #80]	; (80137c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	68ba      	ldr	r2, [r7, #8]
 8013778:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801377a:	68ba      	ldr	r2, [r7, #8]
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	429a      	cmp	r2, r3
 8013780:	d209      	bcs.n	8013796 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013782:	4b12      	ldr	r3, [pc, #72]	; (80137cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	4b0f      	ldr	r3, [pc, #60]	; (80137c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	3304      	adds	r3, #4
 801378c:	4619      	mov	r1, r3
 801378e:	4610      	mov	r0, r2
 8013790:	f7fd fc5b 	bl	801104a <vListInsert>
}
 8013794:	e010      	b.n	80137b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013796:	4b0e      	ldr	r3, [pc, #56]	; (80137d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	4b0a      	ldr	r3, [pc, #40]	; (80137c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	3304      	adds	r3, #4
 80137a0:	4619      	mov	r1, r3
 80137a2:	4610      	mov	r0, r2
 80137a4:	f7fd fc51 	bl	801104a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80137a8:	4b0a      	ldr	r3, [pc, #40]	; (80137d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	68ba      	ldr	r2, [r7, #8]
 80137ae:	429a      	cmp	r2, r3
 80137b0:	d202      	bcs.n	80137b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80137b2:	4a08      	ldr	r2, [pc, #32]	; (80137d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	6013      	str	r3, [r2, #0]
}
 80137b8:	bf00      	nop
 80137ba:	3710      	adds	r7, #16
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	2000141c 	.word	0x2000141c
 80137c4:	20000f44 	.word	0x20000f44
 80137c8:	20001404 	.word	0x20001404
 80137cc:	200013d4 	.word	0x200013d4
 80137d0:	200013d0 	.word	0x200013d0
 80137d4:	20001438 	.word	0x20001438

080137d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b08a      	sub	sp, #40	; 0x28
 80137dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80137de:	2300      	movs	r3, #0
 80137e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80137e2:	f000 fb07 	bl	8013df4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80137e6:	4b1c      	ldr	r3, [pc, #112]	; (8013858 <xTimerCreateTimerTask+0x80>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d021      	beq.n	8013832 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80137ee:	2300      	movs	r3, #0
 80137f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80137f2:	2300      	movs	r3, #0
 80137f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80137f6:	1d3a      	adds	r2, r7, #4
 80137f8:	f107 0108 	add.w	r1, r7, #8
 80137fc:	f107 030c 	add.w	r3, r7, #12
 8013800:	4618      	mov	r0, r3
 8013802:	f7fd fbb7 	bl	8010f74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013806:	6879      	ldr	r1, [r7, #4]
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	68fa      	ldr	r2, [r7, #12]
 801380c:	9202      	str	r2, [sp, #8]
 801380e:	9301      	str	r3, [sp, #4]
 8013810:	2302      	movs	r3, #2
 8013812:	9300      	str	r3, [sp, #0]
 8013814:	2300      	movs	r3, #0
 8013816:	460a      	mov	r2, r1
 8013818:	4910      	ldr	r1, [pc, #64]	; (801385c <xTimerCreateTimerTask+0x84>)
 801381a:	4811      	ldr	r0, [pc, #68]	; (8013860 <xTimerCreateTimerTask+0x88>)
 801381c:	f7fe fc86 	bl	801212c <xTaskCreateStatic>
 8013820:	4603      	mov	r3, r0
 8013822:	4a10      	ldr	r2, [pc, #64]	; (8013864 <xTimerCreateTimerTask+0x8c>)
 8013824:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013826:	4b0f      	ldr	r3, [pc, #60]	; (8013864 <xTimerCreateTimerTask+0x8c>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d001      	beq.n	8013832 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801382e:	2301      	movs	r3, #1
 8013830:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d10a      	bne.n	801384e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801383c:	f383 8811 	msr	BASEPRI, r3
 8013840:	f3bf 8f6f 	isb	sy
 8013844:	f3bf 8f4f 	dsb	sy
 8013848:	613b      	str	r3, [r7, #16]
}
 801384a:	bf00      	nop
 801384c:	e7fe      	b.n	801384c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801384e:	697b      	ldr	r3, [r7, #20]
}
 8013850:	4618      	mov	r0, r3
 8013852:	3718      	adds	r7, #24
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}
 8013858:	2000147c 	.word	0x2000147c
 801385c:	08018788 	.word	0x08018788
 8013860:	0801399d 	.word	0x0801399d
 8013864:	20001480 	.word	0x20001480

08013868 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b08a      	sub	sp, #40	; 0x28
 801386c:	af00      	add	r7, sp, #0
 801386e:	60f8      	str	r0, [r7, #12]
 8013870:	60b9      	str	r1, [r7, #8]
 8013872:	607a      	str	r2, [r7, #4]
 8013874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013876:	2300      	movs	r3, #0
 8013878:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d10a      	bne.n	8013896 <xTimerGenericCommand+0x2e>
	__asm volatile
 8013880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013884:	f383 8811 	msr	BASEPRI, r3
 8013888:	f3bf 8f6f 	isb	sy
 801388c:	f3bf 8f4f 	dsb	sy
 8013890:	623b      	str	r3, [r7, #32]
}
 8013892:	bf00      	nop
 8013894:	e7fe      	b.n	8013894 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013896:	4b1a      	ldr	r3, [pc, #104]	; (8013900 <xTimerGenericCommand+0x98>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d02a      	beq.n	80138f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	2b05      	cmp	r3, #5
 80138ae:	dc18      	bgt.n	80138e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80138b0:	f7ff fc74 	bl	801319c <xTaskGetSchedulerState>
 80138b4:	4603      	mov	r3, r0
 80138b6:	2b02      	cmp	r3, #2
 80138b8:	d109      	bne.n	80138ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80138ba:	4b11      	ldr	r3, [pc, #68]	; (8013900 <xTimerGenericCommand+0x98>)
 80138bc:	6818      	ldr	r0, [r3, #0]
 80138be:	f107 0110 	add.w	r1, r7, #16
 80138c2:	2300      	movs	r3, #0
 80138c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138c6:	f7fd fdcb 	bl	8011460 <xQueueGenericSend>
 80138ca:	6278      	str	r0, [r7, #36]	; 0x24
 80138cc:	e012      	b.n	80138f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80138ce:	4b0c      	ldr	r3, [pc, #48]	; (8013900 <xTimerGenericCommand+0x98>)
 80138d0:	6818      	ldr	r0, [r3, #0]
 80138d2:	f107 0110 	add.w	r1, r7, #16
 80138d6:	2300      	movs	r3, #0
 80138d8:	2200      	movs	r2, #0
 80138da:	f7fd fdc1 	bl	8011460 <xQueueGenericSend>
 80138de:	6278      	str	r0, [r7, #36]	; 0x24
 80138e0:	e008      	b.n	80138f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80138e2:	4b07      	ldr	r3, [pc, #28]	; (8013900 <xTimerGenericCommand+0x98>)
 80138e4:	6818      	ldr	r0, [r3, #0]
 80138e6:	f107 0110 	add.w	r1, r7, #16
 80138ea:	2300      	movs	r3, #0
 80138ec:	683a      	ldr	r2, [r7, #0]
 80138ee:	f7fd feb5 	bl	801165c <xQueueGenericSendFromISR>
 80138f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80138f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3728      	adds	r7, #40	; 0x28
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}
 80138fe:	bf00      	nop
 8013900:	2000147c 	.word	0x2000147c

08013904 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b088      	sub	sp, #32
 8013908:	af02      	add	r7, sp, #8
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801390e:	4b22      	ldr	r3, [pc, #136]	; (8013998 <prvProcessExpiredTimer+0x94>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	68db      	ldr	r3, [r3, #12]
 8013914:	68db      	ldr	r3, [r3, #12]
 8013916:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	3304      	adds	r3, #4
 801391c:	4618      	mov	r0, r3
 801391e:	f7fd fbcd 	bl	80110bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013928:	f003 0304 	and.w	r3, r3, #4
 801392c:	2b00      	cmp	r3, #0
 801392e:	d022      	beq.n	8013976 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	699a      	ldr	r2, [r3, #24]
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	18d1      	adds	r1, r2, r3
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	683a      	ldr	r2, [r7, #0]
 801393c:	6978      	ldr	r0, [r7, #20]
 801393e:	f000 f8d1 	bl	8013ae4 <prvInsertTimerInActiveList>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d01f      	beq.n	8013988 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013948:	2300      	movs	r3, #0
 801394a:	9300      	str	r3, [sp, #0]
 801394c:	2300      	movs	r3, #0
 801394e:	687a      	ldr	r2, [r7, #4]
 8013950:	2100      	movs	r1, #0
 8013952:	6978      	ldr	r0, [r7, #20]
 8013954:	f7ff ff88 	bl	8013868 <xTimerGenericCommand>
 8013958:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d113      	bne.n	8013988 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013964:	f383 8811 	msr	BASEPRI, r3
 8013968:	f3bf 8f6f 	isb	sy
 801396c:	f3bf 8f4f 	dsb	sy
 8013970:	60fb      	str	r3, [r7, #12]
}
 8013972:	bf00      	nop
 8013974:	e7fe      	b.n	8013974 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801397c:	f023 0301 	bic.w	r3, r3, #1
 8013980:	b2da      	uxtb	r2, r3
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013988:	697b      	ldr	r3, [r7, #20]
 801398a:	6a1b      	ldr	r3, [r3, #32]
 801398c:	6978      	ldr	r0, [r7, #20]
 801398e:	4798      	blx	r3
}
 8013990:	bf00      	nop
 8013992:	3718      	adds	r7, #24
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}
 8013998:	20001474 	.word	0x20001474

0801399c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139a4:	f107 0308 	add.w	r3, r7, #8
 80139a8:	4618      	mov	r0, r3
 80139aa:	f000 f857 	bl	8013a5c <prvGetNextExpireTime>
 80139ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	4619      	mov	r1, r3
 80139b4:	68f8      	ldr	r0, [r7, #12]
 80139b6:	f000 f803 	bl	80139c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80139ba:	f000 f8d5 	bl	8013b68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139be:	e7f1      	b.n	80139a4 <prvTimerTask+0x8>

080139c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80139ca:	f7fe fe79 	bl	80126c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80139ce:	f107 0308 	add.w	r3, r7, #8
 80139d2:	4618      	mov	r0, r3
 80139d4:	f000 f866 	bl	8013aa4 <prvSampleTimeNow>
 80139d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d130      	bne.n	8013a42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d10a      	bne.n	80139fc <prvProcessTimerOrBlockTask+0x3c>
 80139e6:	687a      	ldr	r2, [r7, #4]
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d806      	bhi.n	80139fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80139ee:	f7fe fe75 	bl	80126dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80139f2:	68f9      	ldr	r1, [r7, #12]
 80139f4:	6878      	ldr	r0, [r7, #4]
 80139f6:	f7ff ff85 	bl	8013904 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80139fa:	e024      	b.n	8013a46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d008      	beq.n	8013a14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013a02:	4b13      	ldr	r3, [pc, #76]	; (8013a50 <prvProcessTimerOrBlockTask+0x90>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d101      	bne.n	8013a10 <prvProcessTimerOrBlockTask+0x50>
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	e000      	b.n	8013a12 <prvProcessTimerOrBlockTask+0x52>
 8013a10:	2300      	movs	r3, #0
 8013a12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013a14:	4b0f      	ldr	r3, [pc, #60]	; (8013a54 <prvProcessTimerOrBlockTask+0x94>)
 8013a16:	6818      	ldr	r0, [r3, #0]
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	1ad3      	subs	r3, r2, r3
 8013a1e:	683a      	ldr	r2, [r7, #0]
 8013a20:	4619      	mov	r1, r3
 8013a22:	f7fe fb4f 	bl	80120c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013a26:	f7fe fe59 	bl	80126dc <xTaskResumeAll>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d10a      	bne.n	8013a46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013a30:	4b09      	ldr	r3, [pc, #36]	; (8013a58 <prvProcessTimerOrBlockTask+0x98>)
 8013a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a36:	601a      	str	r2, [r3, #0]
 8013a38:	f3bf 8f4f 	dsb	sy
 8013a3c:	f3bf 8f6f 	isb	sy
}
 8013a40:	e001      	b.n	8013a46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013a42:	f7fe fe4b 	bl	80126dc <xTaskResumeAll>
}
 8013a46:	bf00      	nop
 8013a48:	3710      	adds	r7, #16
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	bd80      	pop	{r7, pc}
 8013a4e:	bf00      	nop
 8013a50:	20001478 	.word	0x20001478
 8013a54:	2000147c 	.word	0x2000147c
 8013a58:	e000ed04 	.word	0xe000ed04

08013a5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013a5c:	b480      	push	{r7}
 8013a5e:	b085      	sub	sp, #20
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013a64:	4b0e      	ldr	r3, [pc, #56]	; (8013aa0 <prvGetNextExpireTime+0x44>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d101      	bne.n	8013a72 <prvGetNextExpireTime+0x16>
 8013a6e:	2201      	movs	r2, #1
 8013a70:	e000      	b.n	8013a74 <prvGetNextExpireTime+0x18>
 8013a72:	2200      	movs	r2, #0
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d105      	bne.n	8013a8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013a80:	4b07      	ldr	r3, [pc, #28]	; (8013aa0 <prvGetNextExpireTime+0x44>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	68db      	ldr	r3, [r3, #12]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	60fb      	str	r3, [r7, #12]
 8013a8a:	e001      	b.n	8013a90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013a90:	68fb      	ldr	r3, [r7, #12]
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3714      	adds	r7, #20
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr
 8013a9e:	bf00      	nop
 8013aa0:	20001474 	.word	0x20001474

08013aa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013aac:	f7fe feb4 	bl	8012818 <xTaskGetTickCount>
 8013ab0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013ab2:	4b0b      	ldr	r3, [pc, #44]	; (8013ae0 <prvSampleTimeNow+0x3c>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	68fa      	ldr	r2, [r7, #12]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d205      	bcs.n	8013ac8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013abc:	f000 f936 	bl	8013d2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	601a      	str	r2, [r3, #0]
 8013ac6:	e002      	b.n	8013ace <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2200      	movs	r2, #0
 8013acc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013ace:	4a04      	ldr	r2, [pc, #16]	; (8013ae0 <prvSampleTimeNow+0x3c>)
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3710      	adds	r7, #16
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	20001484 	.word	0x20001484

08013ae4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b086      	sub	sp, #24
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	60f8      	str	r0, [r7, #12]
 8013aec:	60b9      	str	r1, [r7, #8]
 8013aee:	607a      	str	r2, [r7, #4]
 8013af0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013af2:	2300      	movs	r3, #0
 8013af4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	68ba      	ldr	r2, [r7, #8]
 8013afa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	68fa      	ldr	r2, [r7, #12]
 8013b00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013b02:	68ba      	ldr	r2, [r7, #8]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d812      	bhi.n	8013b30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	1ad2      	subs	r2, r2, r3
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	699b      	ldr	r3, [r3, #24]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d302      	bcc.n	8013b1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	617b      	str	r3, [r7, #20]
 8013b1c:	e01b      	b.n	8013b56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013b1e:	4b10      	ldr	r3, [pc, #64]	; (8013b60 <prvInsertTimerInActiveList+0x7c>)
 8013b20:	681a      	ldr	r2, [r3, #0]
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	3304      	adds	r3, #4
 8013b26:	4619      	mov	r1, r3
 8013b28:	4610      	mov	r0, r2
 8013b2a:	f7fd fa8e 	bl	801104a <vListInsert>
 8013b2e:	e012      	b.n	8013b56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013b30:	687a      	ldr	r2, [r7, #4]
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d206      	bcs.n	8013b46 <prvInsertTimerInActiveList+0x62>
 8013b38:	68ba      	ldr	r2, [r7, #8]
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d302      	bcc.n	8013b46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013b40:	2301      	movs	r3, #1
 8013b42:	617b      	str	r3, [r7, #20]
 8013b44:	e007      	b.n	8013b56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b46:	4b07      	ldr	r3, [pc, #28]	; (8013b64 <prvInsertTimerInActiveList+0x80>)
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	3304      	adds	r3, #4
 8013b4e:	4619      	mov	r1, r3
 8013b50:	4610      	mov	r0, r2
 8013b52:	f7fd fa7a 	bl	801104a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013b56:	697b      	ldr	r3, [r7, #20]
}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	3718      	adds	r7, #24
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd80      	pop	{r7, pc}
 8013b60:	20001478 	.word	0x20001478
 8013b64:	20001474 	.word	0x20001474

08013b68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b08e      	sub	sp, #56	; 0x38
 8013b6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013b6e:	e0ca      	b.n	8013d06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	da18      	bge.n	8013ba8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013b76:	1d3b      	adds	r3, r7, #4
 8013b78:	3304      	adds	r3, #4
 8013b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d10a      	bne.n	8013b98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b86:	f383 8811 	msr	BASEPRI, r3
 8013b8a:	f3bf 8f6f 	isb	sy
 8013b8e:	f3bf 8f4f 	dsb	sy
 8013b92:	61fb      	str	r3, [r7, #28]
}
 8013b94:	bf00      	nop
 8013b96:	e7fe      	b.n	8013b96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b9e:	6850      	ldr	r0, [r2, #4]
 8013ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ba2:	6892      	ldr	r2, [r2, #8]
 8013ba4:	4611      	mov	r1, r2
 8013ba6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	f2c0 80aa 	blt.w	8013d04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb6:	695b      	ldr	r3, [r3, #20]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d004      	beq.n	8013bc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bbe:	3304      	adds	r3, #4
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7fd fa7b 	bl	80110bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013bc6:	463b      	mov	r3, r7
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7ff ff6b 	bl	8013aa4 <prvSampleTimeNow>
 8013bce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2b09      	cmp	r3, #9
 8013bd4:	f200 8097 	bhi.w	8013d06 <prvProcessReceivedCommands+0x19e>
 8013bd8:	a201      	add	r2, pc, #4	; (adr r2, 8013be0 <prvProcessReceivedCommands+0x78>)
 8013bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bde:	bf00      	nop
 8013be0:	08013c09 	.word	0x08013c09
 8013be4:	08013c09 	.word	0x08013c09
 8013be8:	08013c09 	.word	0x08013c09
 8013bec:	08013c7d 	.word	0x08013c7d
 8013bf0:	08013c91 	.word	0x08013c91
 8013bf4:	08013cdb 	.word	0x08013cdb
 8013bf8:	08013c09 	.word	0x08013c09
 8013bfc:	08013c09 	.word	0x08013c09
 8013c00:	08013c7d 	.word	0x08013c7d
 8013c04:	08013c91 	.word	0x08013c91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c0e:	f043 0301 	orr.w	r3, r3, #1
 8013c12:	b2da      	uxtb	r2, r3
 8013c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013c1a:	68ba      	ldr	r2, [r7, #8]
 8013c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c1e:	699b      	ldr	r3, [r3, #24]
 8013c20:	18d1      	adds	r1, r2, r3
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c28:	f7ff ff5c 	bl	8013ae4 <prvInsertTimerInActiveList>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d069      	beq.n	8013d06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c34:	6a1b      	ldr	r3, [r3, #32]
 8013c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c40:	f003 0304 	and.w	r3, r3, #4
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d05e      	beq.n	8013d06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013c48:	68ba      	ldr	r2, [r7, #8]
 8013c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4c:	699b      	ldr	r3, [r3, #24]
 8013c4e:	441a      	add	r2, r3
 8013c50:	2300      	movs	r3, #0
 8013c52:	9300      	str	r3, [sp, #0]
 8013c54:	2300      	movs	r3, #0
 8013c56:	2100      	movs	r1, #0
 8013c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c5a:	f7ff fe05 	bl	8013868 <xTimerGenericCommand>
 8013c5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013c60:	6a3b      	ldr	r3, [r7, #32]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d14f      	bne.n	8013d06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c6a:	f383 8811 	msr	BASEPRI, r3
 8013c6e:	f3bf 8f6f 	isb	sy
 8013c72:	f3bf 8f4f 	dsb	sy
 8013c76:	61bb      	str	r3, [r7, #24]
}
 8013c78:	bf00      	nop
 8013c7a:	e7fe      	b.n	8013c7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c82:	f023 0301 	bic.w	r3, r3, #1
 8013c86:	b2da      	uxtb	r2, r3
 8013c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013c8e:	e03a      	b.n	8013d06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c96:	f043 0301 	orr.w	r3, r3, #1
 8013c9a:	b2da      	uxtb	r2, r3
 8013c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013ca2:	68ba      	ldr	r2, [r7, #8]
 8013ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013caa:	699b      	ldr	r3, [r3, #24]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d10a      	bne.n	8013cc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb4:	f383 8811 	msr	BASEPRI, r3
 8013cb8:	f3bf 8f6f 	isb	sy
 8013cbc:	f3bf 8f4f 	dsb	sy
 8013cc0:	617b      	str	r3, [r7, #20]
}
 8013cc2:	bf00      	nop
 8013cc4:	e7fe      	b.n	8013cc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc8:	699a      	ldr	r2, [r3, #24]
 8013cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ccc:	18d1      	adds	r1, r2, r3
 8013cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cd4:	f7ff ff06 	bl	8013ae4 <prvInsertTimerInActiveList>
					break;
 8013cd8:	e015      	b.n	8013d06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ce0:	f003 0302 	and.w	r3, r3, #2
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d103      	bne.n	8013cf0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cea:	f000 fbe1 	bl	80144b0 <vPortFree>
 8013cee:	e00a      	b.n	8013d06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cf6:	f023 0301 	bic.w	r3, r3, #1
 8013cfa:	b2da      	uxtb	r2, r3
 8013cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013d02:	e000      	b.n	8013d06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013d04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013d06:	4b08      	ldr	r3, [pc, #32]	; (8013d28 <prvProcessReceivedCommands+0x1c0>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	1d39      	adds	r1, r7, #4
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7fd fdcc 	bl	80118ac <xQueueReceive>
 8013d14:	4603      	mov	r3, r0
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	f47f af2a 	bne.w	8013b70 <prvProcessReceivedCommands+0x8>
	}
}
 8013d1c:	bf00      	nop
 8013d1e:	bf00      	nop
 8013d20:	3730      	adds	r7, #48	; 0x30
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}
 8013d26:	bf00      	nop
 8013d28:	2000147c 	.word	0x2000147c

08013d2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b088      	sub	sp, #32
 8013d30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013d32:	e048      	b.n	8013dc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013d34:	4b2d      	ldr	r3, [pc, #180]	; (8013dec <prvSwitchTimerLists+0xc0>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	68db      	ldr	r3, [r3, #12]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d3e:	4b2b      	ldr	r3, [pc, #172]	; (8013dec <prvSwitchTimerLists+0xc0>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	68db      	ldr	r3, [r3, #12]
 8013d44:	68db      	ldr	r3, [r3, #12]
 8013d46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	3304      	adds	r3, #4
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7fd f9b5 	bl	80110bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	6a1b      	ldr	r3, [r3, #32]
 8013d56:	68f8      	ldr	r0, [r7, #12]
 8013d58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d60:	f003 0304 	and.w	r3, r3, #4
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d02e      	beq.n	8013dc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	699b      	ldr	r3, [r3, #24]
 8013d6c:	693a      	ldr	r2, [r7, #16]
 8013d6e:	4413      	add	r3, r2
 8013d70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013d72:	68ba      	ldr	r2, [r7, #8]
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d90e      	bls.n	8013d98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	68ba      	ldr	r2, [r7, #8]
 8013d7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	68fa      	ldr	r2, [r7, #12]
 8013d84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d86:	4b19      	ldr	r3, [pc, #100]	; (8013dec <prvSwitchTimerLists+0xc0>)
 8013d88:	681a      	ldr	r2, [r3, #0]
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	3304      	adds	r3, #4
 8013d8e:	4619      	mov	r1, r3
 8013d90:	4610      	mov	r0, r2
 8013d92:	f7fd f95a 	bl	801104a <vListInsert>
 8013d96:	e016      	b.n	8013dc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013d98:	2300      	movs	r3, #0
 8013d9a:	9300      	str	r3, [sp, #0]
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	693a      	ldr	r2, [r7, #16]
 8013da0:	2100      	movs	r1, #0
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	f7ff fd60 	bl	8013868 <xTimerGenericCommand>
 8013da8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d10a      	bne.n	8013dc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db4:	f383 8811 	msr	BASEPRI, r3
 8013db8:	f3bf 8f6f 	isb	sy
 8013dbc:	f3bf 8f4f 	dsb	sy
 8013dc0:	603b      	str	r3, [r7, #0]
}
 8013dc2:	bf00      	nop
 8013dc4:	e7fe      	b.n	8013dc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013dc6:	4b09      	ldr	r3, [pc, #36]	; (8013dec <prvSwitchTimerLists+0xc0>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d1b1      	bne.n	8013d34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013dd0:	4b06      	ldr	r3, [pc, #24]	; (8013dec <prvSwitchTimerLists+0xc0>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013dd6:	4b06      	ldr	r3, [pc, #24]	; (8013df0 <prvSwitchTimerLists+0xc4>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	4a04      	ldr	r2, [pc, #16]	; (8013dec <prvSwitchTimerLists+0xc0>)
 8013ddc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013dde:	4a04      	ldr	r2, [pc, #16]	; (8013df0 <prvSwitchTimerLists+0xc4>)
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	6013      	str	r3, [r2, #0]
}
 8013de4:	bf00      	nop
 8013de6:	3718      	adds	r7, #24
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}
 8013dec:	20001474 	.word	0x20001474
 8013df0:	20001478 	.word	0x20001478

08013df4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013dfa:	f000 f96b 	bl	80140d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013dfe:	4b15      	ldr	r3, [pc, #84]	; (8013e54 <prvCheckForValidListAndQueue+0x60>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d120      	bne.n	8013e48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013e06:	4814      	ldr	r0, [pc, #80]	; (8013e58 <prvCheckForValidListAndQueue+0x64>)
 8013e08:	f7fd f8ce 	bl	8010fa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013e0c:	4813      	ldr	r0, [pc, #76]	; (8013e5c <prvCheckForValidListAndQueue+0x68>)
 8013e0e:	f7fd f8cb 	bl	8010fa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013e12:	4b13      	ldr	r3, [pc, #76]	; (8013e60 <prvCheckForValidListAndQueue+0x6c>)
 8013e14:	4a10      	ldr	r2, [pc, #64]	; (8013e58 <prvCheckForValidListAndQueue+0x64>)
 8013e16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013e18:	4b12      	ldr	r3, [pc, #72]	; (8013e64 <prvCheckForValidListAndQueue+0x70>)
 8013e1a:	4a10      	ldr	r2, [pc, #64]	; (8013e5c <prvCheckForValidListAndQueue+0x68>)
 8013e1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013e1e:	2300      	movs	r3, #0
 8013e20:	9300      	str	r3, [sp, #0]
 8013e22:	4b11      	ldr	r3, [pc, #68]	; (8013e68 <prvCheckForValidListAndQueue+0x74>)
 8013e24:	4a11      	ldr	r2, [pc, #68]	; (8013e6c <prvCheckForValidListAndQueue+0x78>)
 8013e26:	2110      	movs	r1, #16
 8013e28:	200a      	movs	r0, #10
 8013e2a:	f7fd f9d9 	bl	80111e0 <xQueueGenericCreateStatic>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	4a08      	ldr	r2, [pc, #32]	; (8013e54 <prvCheckForValidListAndQueue+0x60>)
 8013e32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013e34:	4b07      	ldr	r3, [pc, #28]	; (8013e54 <prvCheckForValidListAndQueue+0x60>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d005      	beq.n	8013e48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013e3c:	4b05      	ldr	r3, [pc, #20]	; (8013e54 <prvCheckForValidListAndQueue+0x60>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	490b      	ldr	r1, [pc, #44]	; (8013e70 <prvCheckForValidListAndQueue+0x7c>)
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7fe f8ea 	bl	801201c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013e48:	f000 f974 	bl	8014134 <vPortExitCritical>
}
 8013e4c:	bf00      	nop
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}
 8013e52:	bf00      	nop
 8013e54:	2000147c 	.word	0x2000147c
 8013e58:	2000144c 	.word	0x2000144c
 8013e5c:	20001460 	.word	0x20001460
 8013e60:	20001474 	.word	0x20001474
 8013e64:	20001478 	.word	0x20001478
 8013e68:	20001528 	.word	0x20001528
 8013e6c:	20001488 	.word	0x20001488
 8013e70:	08018790 	.word	0x08018790

08013e74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013e74:	b480      	push	{r7}
 8013e76:	b085      	sub	sp, #20
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	60f8      	str	r0, [r7, #12]
 8013e7c:	60b9      	str	r1, [r7, #8]
 8013e7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	3b04      	subs	r3, #4
 8013e84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	3b04      	subs	r3, #4
 8013e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	f023 0201 	bic.w	r2, r3, #1
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	3b04      	subs	r3, #4
 8013ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013ea4:	4a0c      	ldr	r2, [pc, #48]	; (8013ed8 <pxPortInitialiseStack+0x64>)
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	3b14      	subs	r3, #20
 8013eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013eb0:	687a      	ldr	r2, [r7, #4]
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	3b04      	subs	r3, #4
 8013eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	f06f 0202 	mvn.w	r2, #2
 8013ec2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	3b20      	subs	r3, #32
 8013ec8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013eca:	68fb      	ldr	r3, [r7, #12]
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3714      	adds	r7, #20
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed6:	4770      	bx	lr
 8013ed8:	08013edd 	.word	0x08013edd

08013edc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013edc:	b480      	push	{r7}
 8013ede:	b085      	sub	sp, #20
 8013ee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013ee6:	4b12      	ldr	r3, [pc, #72]	; (8013f30 <prvTaskExitError+0x54>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013eee:	d00a      	beq.n	8013f06 <prvTaskExitError+0x2a>
	__asm volatile
 8013ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef4:	f383 8811 	msr	BASEPRI, r3
 8013ef8:	f3bf 8f6f 	isb	sy
 8013efc:	f3bf 8f4f 	dsb	sy
 8013f00:	60fb      	str	r3, [r7, #12]
}
 8013f02:	bf00      	nop
 8013f04:	e7fe      	b.n	8013f04 <prvTaskExitError+0x28>
	__asm volatile
 8013f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f0a:	f383 8811 	msr	BASEPRI, r3
 8013f0e:	f3bf 8f6f 	isb	sy
 8013f12:	f3bf 8f4f 	dsb	sy
 8013f16:	60bb      	str	r3, [r7, #8]
}
 8013f18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013f1a:	bf00      	nop
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d0fc      	beq.n	8013f1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013f22:	bf00      	nop
 8013f24:	bf00      	nop
 8013f26:	3714      	adds	r7, #20
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2e:	4770      	bx	lr
 8013f30:	20000134 	.word	0x20000134
	...

08013f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013f40:	4b07      	ldr	r3, [pc, #28]	; (8013f60 <pxCurrentTCBConst2>)
 8013f42:	6819      	ldr	r1, [r3, #0]
 8013f44:	6808      	ldr	r0, [r1, #0]
 8013f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f4a:	f380 8809 	msr	PSP, r0
 8013f4e:	f3bf 8f6f 	isb	sy
 8013f52:	f04f 0000 	mov.w	r0, #0
 8013f56:	f380 8811 	msr	BASEPRI, r0
 8013f5a:	4770      	bx	lr
 8013f5c:	f3af 8000 	nop.w

08013f60 <pxCurrentTCBConst2>:
 8013f60:	20000f44 	.word	0x20000f44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013f64:	bf00      	nop
 8013f66:	bf00      	nop

08013f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013f68:	4808      	ldr	r0, [pc, #32]	; (8013f8c <prvPortStartFirstTask+0x24>)
 8013f6a:	6800      	ldr	r0, [r0, #0]
 8013f6c:	6800      	ldr	r0, [r0, #0]
 8013f6e:	f380 8808 	msr	MSP, r0
 8013f72:	f04f 0000 	mov.w	r0, #0
 8013f76:	f380 8814 	msr	CONTROL, r0
 8013f7a:	b662      	cpsie	i
 8013f7c:	b661      	cpsie	f
 8013f7e:	f3bf 8f4f 	dsb	sy
 8013f82:	f3bf 8f6f 	isb	sy
 8013f86:	df00      	svc	0
 8013f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013f8a:	bf00      	nop
 8013f8c:	e000ed08 	.word	0xe000ed08

08013f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b086      	sub	sp, #24
 8013f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013f96:	4b46      	ldr	r3, [pc, #280]	; (80140b0 <xPortStartScheduler+0x120>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	4a46      	ldr	r2, [pc, #280]	; (80140b4 <xPortStartScheduler+0x124>)
 8013f9c:	4293      	cmp	r3, r2
 8013f9e:	d10a      	bne.n	8013fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8013fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa4:	f383 8811 	msr	BASEPRI, r3
 8013fa8:	f3bf 8f6f 	isb	sy
 8013fac:	f3bf 8f4f 	dsb	sy
 8013fb0:	613b      	str	r3, [r7, #16]
}
 8013fb2:	bf00      	nop
 8013fb4:	e7fe      	b.n	8013fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013fb6:	4b3e      	ldr	r3, [pc, #248]	; (80140b0 <xPortStartScheduler+0x120>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	4a3f      	ldr	r2, [pc, #252]	; (80140b8 <xPortStartScheduler+0x128>)
 8013fbc:	4293      	cmp	r3, r2
 8013fbe:	d10a      	bne.n	8013fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8013fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fc4:	f383 8811 	msr	BASEPRI, r3
 8013fc8:	f3bf 8f6f 	isb	sy
 8013fcc:	f3bf 8f4f 	dsb	sy
 8013fd0:	60fb      	str	r3, [r7, #12]
}
 8013fd2:	bf00      	nop
 8013fd4:	e7fe      	b.n	8013fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013fd6:	4b39      	ldr	r3, [pc, #228]	; (80140bc <xPortStartScheduler+0x12c>)
 8013fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	b2db      	uxtb	r3, r3
 8013fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	22ff      	movs	r2, #255	; 0xff
 8013fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	781b      	ldrb	r3, [r3, #0]
 8013fec:	b2db      	uxtb	r3, r3
 8013fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013ff0:	78fb      	ldrb	r3, [r7, #3]
 8013ff2:	b2db      	uxtb	r3, r3
 8013ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013ff8:	b2da      	uxtb	r2, r3
 8013ffa:	4b31      	ldr	r3, [pc, #196]	; (80140c0 <xPortStartScheduler+0x130>)
 8013ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013ffe:	4b31      	ldr	r3, [pc, #196]	; (80140c4 <xPortStartScheduler+0x134>)
 8014000:	2207      	movs	r2, #7
 8014002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014004:	e009      	b.n	801401a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014006:	4b2f      	ldr	r3, [pc, #188]	; (80140c4 <xPortStartScheduler+0x134>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	3b01      	subs	r3, #1
 801400c:	4a2d      	ldr	r2, [pc, #180]	; (80140c4 <xPortStartScheduler+0x134>)
 801400e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014010:	78fb      	ldrb	r3, [r7, #3]
 8014012:	b2db      	uxtb	r3, r3
 8014014:	005b      	lsls	r3, r3, #1
 8014016:	b2db      	uxtb	r3, r3
 8014018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801401a:	78fb      	ldrb	r3, [r7, #3]
 801401c:	b2db      	uxtb	r3, r3
 801401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014022:	2b80      	cmp	r3, #128	; 0x80
 8014024:	d0ef      	beq.n	8014006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014026:	4b27      	ldr	r3, [pc, #156]	; (80140c4 <xPortStartScheduler+0x134>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	f1c3 0307 	rsb	r3, r3, #7
 801402e:	2b04      	cmp	r3, #4
 8014030:	d00a      	beq.n	8014048 <xPortStartScheduler+0xb8>
	__asm volatile
 8014032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014036:	f383 8811 	msr	BASEPRI, r3
 801403a:	f3bf 8f6f 	isb	sy
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	60bb      	str	r3, [r7, #8]
}
 8014044:	bf00      	nop
 8014046:	e7fe      	b.n	8014046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014048:	4b1e      	ldr	r3, [pc, #120]	; (80140c4 <xPortStartScheduler+0x134>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	021b      	lsls	r3, r3, #8
 801404e:	4a1d      	ldr	r2, [pc, #116]	; (80140c4 <xPortStartScheduler+0x134>)
 8014050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014052:	4b1c      	ldr	r3, [pc, #112]	; (80140c4 <xPortStartScheduler+0x134>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801405a:	4a1a      	ldr	r2, [pc, #104]	; (80140c4 <xPortStartScheduler+0x134>)
 801405c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	b2da      	uxtb	r2, r3
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014066:	4b18      	ldr	r3, [pc, #96]	; (80140c8 <xPortStartScheduler+0x138>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	4a17      	ldr	r2, [pc, #92]	; (80140c8 <xPortStartScheduler+0x138>)
 801406c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014072:	4b15      	ldr	r3, [pc, #84]	; (80140c8 <xPortStartScheduler+0x138>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	4a14      	ldr	r2, [pc, #80]	; (80140c8 <xPortStartScheduler+0x138>)
 8014078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801407c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801407e:	f000 f8dd 	bl	801423c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014082:	4b12      	ldr	r3, [pc, #72]	; (80140cc <xPortStartScheduler+0x13c>)
 8014084:	2200      	movs	r2, #0
 8014086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014088:	f000 f8fc 	bl	8014284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801408c:	4b10      	ldr	r3, [pc, #64]	; (80140d0 <xPortStartScheduler+0x140>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	4a0f      	ldr	r2, [pc, #60]	; (80140d0 <xPortStartScheduler+0x140>)
 8014092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014098:	f7ff ff66 	bl	8013f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801409c:	f7fe fd16 	bl	8012acc <vTaskSwitchContext>
	prvTaskExitError();
 80140a0:	f7ff ff1c 	bl	8013edc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80140a4:	2300      	movs	r3, #0
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3718      	adds	r7, #24
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	e000ed00 	.word	0xe000ed00
 80140b4:	410fc271 	.word	0x410fc271
 80140b8:	410fc270 	.word	0x410fc270
 80140bc:	e000e400 	.word	0xe000e400
 80140c0:	20001578 	.word	0x20001578
 80140c4:	2000157c 	.word	0x2000157c
 80140c8:	e000ed20 	.word	0xe000ed20
 80140cc:	20000134 	.word	0x20000134
 80140d0:	e000ef34 	.word	0xe000ef34

080140d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80140d4:	b480      	push	{r7}
 80140d6:	b083      	sub	sp, #12
 80140d8:	af00      	add	r7, sp, #0
	__asm volatile
 80140da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140de:	f383 8811 	msr	BASEPRI, r3
 80140e2:	f3bf 8f6f 	isb	sy
 80140e6:	f3bf 8f4f 	dsb	sy
 80140ea:	607b      	str	r3, [r7, #4]
}
 80140ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80140ee:	4b0f      	ldr	r3, [pc, #60]	; (801412c <vPortEnterCritical+0x58>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	3301      	adds	r3, #1
 80140f4:	4a0d      	ldr	r2, [pc, #52]	; (801412c <vPortEnterCritical+0x58>)
 80140f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80140f8:	4b0c      	ldr	r3, [pc, #48]	; (801412c <vPortEnterCritical+0x58>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d10f      	bne.n	8014120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014100:	4b0b      	ldr	r3, [pc, #44]	; (8014130 <vPortEnterCritical+0x5c>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	b2db      	uxtb	r3, r3
 8014106:	2b00      	cmp	r3, #0
 8014108:	d00a      	beq.n	8014120 <vPortEnterCritical+0x4c>
	__asm volatile
 801410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801410e:	f383 8811 	msr	BASEPRI, r3
 8014112:	f3bf 8f6f 	isb	sy
 8014116:	f3bf 8f4f 	dsb	sy
 801411a:	603b      	str	r3, [r7, #0]
}
 801411c:	bf00      	nop
 801411e:	e7fe      	b.n	801411e <vPortEnterCritical+0x4a>
	}
}
 8014120:	bf00      	nop
 8014122:	370c      	adds	r7, #12
 8014124:	46bd      	mov	sp, r7
 8014126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412a:	4770      	bx	lr
 801412c:	20000134 	.word	0x20000134
 8014130:	e000ed04 	.word	0xe000ed04

08014134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801413a:	4b12      	ldr	r3, [pc, #72]	; (8014184 <vPortExitCritical+0x50>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d10a      	bne.n	8014158 <vPortExitCritical+0x24>
	__asm volatile
 8014142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014146:	f383 8811 	msr	BASEPRI, r3
 801414a:	f3bf 8f6f 	isb	sy
 801414e:	f3bf 8f4f 	dsb	sy
 8014152:	607b      	str	r3, [r7, #4]
}
 8014154:	bf00      	nop
 8014156:	e7fe      	b.n	8014156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014158:	4b0a      	ldr	r3, [pc, #40]	; (8014184 <vPortExitCritical+0x50>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	3b01      	subs	r3, #1
 801415e:	4a09      	ldr	r2, [pc, #36]	; (8014184 <vPortExitCritical+0x50>)
 8014160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014162:	4b08      	ldr	r3, [pc, #32]	; (8014184 <vPortExitCritical+0x50>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d105      	bne.n	8014176 <vPortExitCritical+0x42>
 801416a:	2300      	movs	r3, #0
 801416c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	f383 8811 	msr	BASEPRI, r3
}
 8014174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014176:	bf00      	nop
 8014178:	370c      	adds	r7, #12
 801417a:	46bd      	mov	sp, r7
 801417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	20000134 	.word	0x20000134
	...

08014190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014190:	f3ef 8009 	mrs	r0, PSP
 8014194:	f3bf 8f6f 	isb	sy
 8014198:	4b15      	ldr	r3, [pc, #84]	; (80141f0 <pxCurrentTCBConst>)
 801419a:	681a      	ldr	r2, [r3, #0]
 801419c:	f01e 0f10 	tst.w	lr, #16
 80141a0:	bf08      	it	eq
 80141a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80141a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141aa:	6010      	str	r0, [r2, #0]
 80141ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80141b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80141b4:	f380 8811 	msr	BASEPRI, r0
 80141b8:	f3bf 8f4f 	dsb	sy
 80141bc:	f3bf 8f6f 	isb	sy
 80141c0:	f7fe fc84 	bl	8012acc <vTaskSwitchContext>
 80141c4:	f04f 0000 	mov.w	r0, #0
 80141c8:	f380 8811 	msr	BASEPRI, r0
 80141cc:	bc09      	pop	{r0, r3}
 80141ce:	6819      	ldr	r1, [r3, #0]
 80141d0:	6808      	ldr	r0, [r1, #0]
 80141d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d6:	f01e 0f10 	tst.w	lr, #16
 80141da:	bf08      	it	eq
 80141dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80141e0:	f380 8809 	msr	PSP, r0
 80141e4:	f3bf 8f6f 	isb	sy
 80141e8:	4770      	bx	lr
 80141ea:	bf00      	nop
 80141ec:	f3af 8000 	nop.w

080141f0 <pxCurrentTCBConst>:
 80141f0:	20000f44 	.word	0x20000f44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80141f4:	bf00      	nop
 80141f6:	bf00      	nop

080141f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
	__asm volatile
 80141fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014202:	f383 8811 	msr	BASEPRI, r3
 8014206:	f3bf 8f6f 	isb	sy
 801420a:	f3bf 8f4f 	dsb	sy
 801420e:	607b      	str	r3, [r7, #4]
}
 8014210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014212:	f7fe fba1 	bl	8012958 <xTaskIncrementTick>
 8014216:	4603      	mov	r3, r0
 8014218:	2b00      	cmp	r3, #0
 801421a:	d003      	beq.n	8014224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801421c:	4b06      	ldr	r3, [pc, #24]	; (8014238 <xPortSysTickHandler+0x40>)
 801421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014222:	601a      	str	r2, [r3, #0]
 8014224:	2300      	movs	r3, #0
 8014226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	f383 8811 	msr	BASEPRI, r3
}
 801422e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014230:	bf00      	nop
 8014232:	3708      	adds	r7, #8
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}
 8014238:	e000ed04 	.word	0xe000ed04

0801423c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801423c:	b480      	push	{r7}
 801423e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014240:	4b0b      	ldr	r3, [pc, #44]	; (8014270 <vPortSetupTimerInterrupt+0x34>)
 8014242:	2200      	movs	r2, #0
 8014244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014246:	4b0b      	ldr	r3, [pc, #44]	; (8014274 <vPortSetupTimerInterrupt+0x38>)
 8014248:	2200      	movs	r2, #0
 801424a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801424c:	4b0a      	ldr	r3, [pc, #40]	; (8014278 <vPortSetupTimerInterrupt+0x3c>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	4a0a      	ldr	r2, [pc, #40]	; (801427c <vPortSetupTimerInterrupt+0x40>)
 8014252:	fba2 2303 	umull	r2, r3, r2, r3
 8014256:	099b      	lsrs	r3, r3, #6
 8014258:	4a09      	ldr	r2, [pc, #36]	; (8014280 <vPortSetupTimerInterrupt+0x44>)
 801425a:	3b01      	subs	r3, #1
 801425c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801425e:	4b04      	ldr	r3, [pc, #16]	; (8014270 <vPortSetupTimerInterrupt+0x34>)
 8014260:	2207      	movs	r2, #7
 8014262:	601a      	str	r2, [r3, #0]
}
 8014264:	bf00      	nop
 8014266:	46bd      	mov	sp, r7
 8014268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426c:	4770      	bx	lr
 801426e:	bf00      	nop
 8014270:	e000e010 	.word	0xe000e010
 8014274:	e000e018 	.word	0xe000e018
 8014278:	20000004 	.word	0x20000004
 801427c:	10624dd3 	.word	0x10624dd3
 8014280:	e000e014 	.word	0xe000e014

08014284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014294 <vPortEnableVFP+0x10>
 8014288:	6801      	ldr	r1, [r0, #0]
 801428a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801428e:	6001      	str	r1, [r0, #0]
 8014290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014292:	bf00      	nop
 8014294:	e000ed88 	.word	0xe000ed88

08014298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014298:	b480      	push	{r7}
 801429a:	b085      	sub	sp, #20
 801429c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801429e:	f3ef 8305 	mrs	r3, IPSR
 80142a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	2b0f      	cmp	r3, #15
 80142a8:	d914      	bls.n	80142d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80142aa:	4a17      	ldr	r2, [pc, #92]	; (8014308 <vPortValidateInterruptPriority+0x70>)
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	4413      	add	r3, r2
 80142b0:	781b      	ldrb	r3, [r3, #0]
 80142b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80142b4:	4b15      	ldr	r3, [pc, #84]	; (801430c <vPortValidateInterruptPriority+0x74>)
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	7afa      	ldrb	r2, [r7, #11]
 80142ba:	429a      	cmp	r2, r3
 80142bc:	d20a      	bcs.n	80142d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80142be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c2:	f383 8811 	msr	BASEPRI, r3
 80142c6:	f3bf 8f6f 	isb	sy
 80142ca:	f3bf 8f4f 	dsb	sy
 80142ce:	607b      	str	r3, [r7, #4]
}
 80142d0:	bf00      	nop
 80142d2:	e7fe      	b.n	80142d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80142d4:	4b0e      	ldr	r3, [pc, #56]	; (8014310 <vPortValidateInterruptPriority+0x78>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80142dc:	4b0d      	ldr	r3, [pc, #52]	; (8014314 <vPortValidateInterruptPriority+0x7c>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	429a      	cmp	r2, r3
 80142e2:	d90a      	bls.n	80142fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80142e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142e8:	f383 8811 	msr	BASEPRI, r3
 80142ec:	f3bf 8f6f 	isb	sy
 80142f0:	f3bf 8f4f 	dsb	sy
 80142f4:	603b      	str	r3, [r7, #0]
}
 80142f6:	bf00      	nop
 80142f8:	e7fe      	b.n	80142f8 <vPortValidateInterruptPriority+0x60>
	}
 80142fa:	bf00      	nop
 80142fc:	3714      	adds	r7, #20
 80142fe:	46bd      	mov	sp, r7
 8014300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014304:	4770      	bx	lr
 8014306:	bf00      	nop
 8014308:	e000e3f0 	.word	0xe000e3f0
 801430c:	20001578 	.word	0x20001578
 8014310:	e000ed0c 	.word	0xe000ed0c
 8014314:	2000157c 	.word	0x2000157c

08014318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b08a      	sub	sp, #40	; 0x28
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014320:	2300      	movs	r3, #0
 8014322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014324:	f7fe f9cc 	bl	80126c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014328:	4b5b      	ldr	r3, [pc, #364]	; (8014498 <pvPortMalloc+0x180>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d101      	bne.n	8014334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014330:	f000 f92c 	bl	801458c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014334:	4b59      	ldr	r3, [pc, #356]	; (801449c <pvPortMalloc+0x184>)
 8014336:	681a      	ldr	r2, [r3, #0]
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	4013      	ands	r3, r2
 801433c:	2b00      	cmp	r3, #0
 801433e:	f040 8093 	bne.w	8014468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d01d      	beq.n	8014384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014348:	2208      	movs	r2, #8
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	4413      	add	r3, r2
 801434e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f003 0307 	and.w	r3, r3, #7
 8014356:	2b00      	cmp	r3, #0
 8014358:	d014      	beq.n	8014384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f023 0307 	bic.w	r3, r3, #7
 8014360:	3308      	adds	r3, #8
 8014362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f003 0307 	and.w	r3, r3, #7
 801436a:	2b00      	cmp	r3, #0
 801436c:	d00a      	beq.n	8014384 <pvPortMalloc+0x6c>
	__asm volatile
 801436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014372:	f383 8811 	msr	BASEPRI, r3
 8014376:	f3bf 8f6f 	isb	sy
 801437a:	f3bf 8f4f 	dsb	sy
 801437e:	617b      	str	r3, [r7, #20]
}
 8014380:	bf00      	nop
 8014382:	e7fe      	b.n	8014382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d06e      	beq.n	8014468 <pvPortMalloc+0x150>
 801438a:	4b45      	ldr	r3, [pc, #276]	; (80144a0 <pvPortMalloc+0x188>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	687a      	ldr	r2, [r7, #4]
 8014390:	429a      	cmp	r2, r3
 8014392:	d869      	bhi.n	8014468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014394:	4b43      	ldr	r3, [pc, #268]	; (80144a4 <pvPortMalloc+0x18c>)
 8014396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014398:	4b42      	ldr	r3, [pc, #264]	; (80144a4 <pvPortMalloc+0x18c>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801439e:	e004      	b.n	80143aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80143a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80143a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80143aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	687a      	ldr	r2, [r7, #4]
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d903      	bls.n	80143bc <pvPortMalloc+0xa4>
 80143b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d1f1      	bne.n	80143a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80143bc:	4b36      	ldr	r3, [pc, #216]	; (8014498 <pvPortMalloc+0x180>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143c2:	429a      	cmp	r2, r3
 80143c4:	d050      	beq.n	8014468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80143c6:	6a3b      	ldr	r3, [r7, #32]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	2208      	movs	r2, #8
 80143cc:	4413      	add	r3, r2
 80143ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80143d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d2:	681a      	ldr	r2, [r3, #0]
 80143d4:	6a3b      	ldr	r3, [r7, #32]
 80143d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80143d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143da:	685a      	ldr	r2, [r3, #4]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	1ad2      	subs	r2, r2, r3
 80143e0:	2308      	movs	r3, #8
 80143e2:	005b      	lsls	r3, r3, #1
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d91f      	bls.n	8014428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80143e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	4413      	add	r3, r2
 80143ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80143f0:	69bb      	ldr	r3, [r7, #24]
 80143f2:	f003 0307 	and.w	r3, r3, #7
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d00a      	beq.n	8014410 <pvPortMalloc+0xf8>
	__asm volatile
 80143fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143fe:	f383 8811 	msr	BASEPRI, r3
 8014402:	f3bf 8f6f 	isb	sy
 8014406:	f3bf 8f4f 	dsb	sy
 801440a:	613b      	str	r3, [r7, #16]
}
 801440c:	bf00      	nop
 801440e:	e7fe      	b.n	801440e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014412:	685a      	ldr	r2, [r3, #4]
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	1ad2      	subs	r2, r2, r3
 8014418:	69bb      	ldr	r3, [r7, #24]
 801441a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441e:	687a      	ldr	r2, [r7, #4]
 8014420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014422:	69b8      	ldr	r0, [r7, #24]
 8014424:	f000 f914 	bl	8014650 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014428:	4b1d      	ldr	r3, [pc, #116]	; (80144a0 <pvPortMalloc+0x188>)
 801442a:	681a      	ldr	r2, [r3, #0]
 801442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	1ad3      	subs	r3, r2, r3
 8014432:	4a1b      	ldr	r2, [pc, #108]	; (80144a0 <pvPortMalloc+0x188>)
 8014434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014436:	4b1a      	ldr	r3, [pc, #104]	; (80144a0 <pvPortMalloc+0x188>)
 8014438:	681a      	ldr	r2, [r3, #0]
 801443a:	4b1b      	ldr	r3, [pc, #108]	; (80144a8 <pvPortMalloc+0x190>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	429a      	cmp	r2, r3
 8014440:	d203      	bcs.n	801444a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014442:	4b17      	ldr	r3, [pc, #92]	; (80144a0 <pvPortMalloc+0x188>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4a18      	ldr	r2, [pc, #96]	; (80144a8 <pvPortMalloc+0x190>)
 8014448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444c:	685a      	ldr	r2, [r3, #4]
 801444e:	4b13      	ldr	r3, [pc, #76]	; (801449c <pvPortMalloc+0x184>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	431a      	orrs	r2, r3
 8014454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445a:	2200      	movs	r2, #0
 801445c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801445e:	4b13      	ldr	r3, [pc, #76]	; (80144ac <pvPortMalloc+0x194>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	3301      	adds	r3, #1
 8014464:	4a11      	ldr	r2, [pc, #68]	; (80144ac <pvPortMalloc+0x194>)
 8014466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014468:	f7fe f938 	bl	80126dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	f003 0307 	and.w	r3, r3, #7
 8014472:	2b00      	cmp	r3, #0
 8014474:	d00a      	beq.n	801448c <pvPortMalloc+0x174>
	__asm volatile
 8014476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801447a:	f383 8811 	msr	BASEPRI, r3
 801447e:	f3bf 8f6f 	isb	sy
 8014482:	f3bf 8f4f 	dsb	sy
 8014486:	60fb      	str	r3, [r7, #12]
}
 8014488:	bf00      	nop
 801448a:	e7fe      	b.n	801448a <pvPortMalloc+0x172>
	return pvReturn;
 801448c:	69fb      	ldr	r3, [r7, #28]
}
 801448e:	4618      	mov	r0, r3
 8014490:	3728      	adds	r7, #40	; 0x28
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}
 8014496:	bf00      	nop
 8014498:	20005bd8 	.word	0x20005bd8
 801449c:	20005bec 	.word	0x20005bec
 80144a0:	20005bdc 	.word	0x20005bdc
 80144a4:	20005bd0 	.word	0x20005bd0
 80144a8:	20005be0 	.word	0x20005be0
 80144ac:	20005be4 	.word	0x20005be4

080144b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b086      	sub	sp, #24
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d04d      	beq.n	801455e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80144c2:	2308      	movs	r3, #8
 80144c4:	425b      	negs	r3, r3
 80144c6:	697a      	ldr	r2, [r7, #20]
 80144c8:	4413      	add	r3, r2
 80144ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80144cc:	697b      	ldr	r3, [r7, #20]
 80144ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80144d0:	693b      	ldr	r3, [r7, #16]
 80144d2:	685a      	ldr	r2, [r3, #4]
 80144d4:	4b24      	ldr	r3, [pc, #144]	; (8014568 <vPortFree+0xb8>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	4013      	ands	r3, r2
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d10a      	bne.n	80144f4 <vPortFree+0x44>
	__asm volatile
 80144de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e2:	f383 8811 	msr	BASEPRI, r3
 80144e6:	f3bf 8f6f 	isb	sy
 80144ea:	f3bf 8f4f 	dsb	sy
 80144ee:	60fb      	str	r3, [r7, #12]
}
 80144f0:	bf00      	nop
 80144f2:	e7fe      	b.n	80144f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d00a      	beq.n	8014512 <vPortFree+0x62>
	__asm volatile
 80144fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014500:	f383 8811 	msr	BASEPRI, r3
 8014504:	f3bf 8f6f 	isb	sy
 8014508:	f3bf 8f4f 	dsb	sy
 801450c:	60bb      	str	r3, [r7, #8]
}
 801450e:	bf00      	nop
 8014510:	e7fe      	b.n	8014510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	685a      	ldr	r2, [r3, #4]
 8014516:	4b14      	ldr	r3, [pc, #80]	; (8014568 <vPortFree+0xb8>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4013      	ands	r3, r2
 801451c:	2b00      	cmp	r3, #0
 801451e:	d01e      	beq.n	801455e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d11a      	bne.n	801455e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	685a      	ldr	r2, [r3, #4]
 801452c:	4b0e      	ldr	r3, [pc, #56]	; (8014568 <vPortFree+0xb8>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	43db      	mvns	r3, r3
 8014532:	401a      	ands	r2, r3
 8014534:	693b      	ldr	r3, [r7, #16]
 8014536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014538:	f7fe f8c2 	bl	80126c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	685a      	ldr	r2, [r3, #4]
 8014540:	4b0a      	ldr	r3, [pc, #40]	; (801456c <vPortFree+0xbc>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4413      	add	r3, r2
 8014546:	4a09      	ldr	r2, [pc, #36]	; (801456c <vPortFree+0xbc>)
 8014548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801454a:	6938      	ldr	r0, [r7, #16]
 801454c:	f000 f880 	bl	8014650 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014550:	4b07      	ldr	r3, [pc, #28]	; (8014570 <vPortFree+0xc0>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	3301      	adds	r3, #1
 8014556:	4a06      	ldr	r2, [pc, #24]	; (8014570 <vPortFree+0xc0>)
 8014558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801455a:	f7fe f8bf 	bl	80126dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801455e:	bf00      	nop
 8014560:	3718      	adds	r7, #24
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
 8014566:	bf00      	nop
 8014568:	20005bec 	.word	0x20005bec
 801456c:	20005bdc 	.word	0x20005bdc
 8014570:	20005be8 	.word	0x20005be8

08014574 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8014574:	b480      	push	{r7}
 8014576:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8014578:	4b03      	ldr	r3, [pc, #12]	; (8014588 <xPortGetFreeHeapSize+0x14>)
 801457a:	681b      	ldr	r3, [r3, #0]
}
 801457c:	4618      	mov	r0, r3
 801457e:	46bd      	mov	sp, r7
 8014580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014584:	4770      	bx	lr
 8014586:	bf00      	nop
 8014588:	20005bdc 	.word	0x20005bdc

0801458c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801458c:	b480      	push	{r7}
 801458e:	b085      	sub	sp, #20
 8014590:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014592:	f244 6350 	movw	r3, #18000	; 0x4650
 8014596:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014598:	4b27      	ldr	r3, [pc, #156]	; (8014638 <prvHeapInit+0xac>)
 801459a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	f003 0307 	and.w	r3, r3, #7
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d00c      	beq.n	80145c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	3307      	adds	r3, #7
 80145aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	f023 0307 	bic.w	r3, r3, #7
 80145b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80145b4:	68ba      	ldr	r2, [r7, #8]
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	1ad3      	subs	r3, r2, r3
 80145ba:	4a1f      	ldr	r2, [pc, #124]	; (8014638 <prvHeapInit+0xac>)
 80145bc:	4413      	add	r3, r2
 80145be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80145c4:	4a1d      	ldr	r2, [pc, #116]	; (801463c <prvHeapInit+0xb0>)
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80145ca:	4b1c      	ldr	r3, [pc, #112]	; (801463c <prvHeapInit+0xb0>)
 80145cc:	2200      	movs	r2, #0
 80145ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	68ba      	ldr	r2, [r7, #8]
 80145d4:	4413      	add	r3, r2
 80145d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80145d8:	2208      	movs	r2, #8
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	1a9b      	subs	r3, r3, r2
 80145de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	f023 0307 	bic.w	r3, r3, #7
 80145e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	4a15      	ldr	r2, [pc, #84]	; (8014640 <prvHeapInit+0xb4>)
 80145ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80145ee:	4b14      	ldr	r3, [pc, #80]	; (8014640 <prvHeapInit+0xb4>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	2200      	movs	r2, #0
 80145f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80145f6:	4b12      	ldr	r3, [pc, #72]	; (8014640 <prvHeapInit+0xb4>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2200      	movs	r2, #0
 80145fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	68fa      	ldr	r2, [r7, #12]
 8014606:	1ad2      	subs	r2, r2, r3
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801460c:	4b0c      	ldr	r3, [pc, #48]	; (8014640 <prvHeapInit+0xb4>)
 801460e:	681a      	ldr	r2, [r3, #0]
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	685b      	ldr	r3, [r3, #4]
 8014618:	4a0a      	ldr	r2, [pc, #40]	; (8014644 <prvHeapInit+0xb8>)
 801461a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	685b      	ldr	r3, [r3, #4]
 8014620:	4a09      	ldr	r2, [pc, #36]	; (8014648 <prvHeapInit+0xbc>)
 8014622:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014624:	4b09      	ldr	r3, [pc, #36]	; (801464c <prvHeapInit+0xc0>)
 8014626:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801462a:	601a      	str	r2, [r3, #0]
}
 801462c:	bf00      	nop
 801462e:	3714      	adds	r7, #20
 8014630:	46bd      	mov	sp, r7
 8014632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014636:	4770      	bx	lr
 8014638:	20001580 	.word	0x20001580
 801463c:	20005bd0 	.word	0x20005bd0
 8014640:	20005bd8 	.word	0x20005bd8
 8014644:	20005be0 	.word	0x20005be0
 8014648:	20005bdc 	.word	0x20005bdc
 801464c:	20005bec 	.word	0x20005bec

08014650 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014650:	b480      	push	{r7}
 8014652:	b085      	sub	sp, #20
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014658:	4b28      	ldr	r3, [pc, #160]	; (80146fc <prvInsertBlockIntoFreeList+0xac>)
 801465a:	60fb      	str	r3, [r7, #12]
 801465c:	e002      	b.n	8014664 <prvInsertBlockIntoFreeList+0x14>
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	60fb      	str	r3, [r7, #12]
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	687a      	ldr	r2, [r7, #4]
 801466a:	429a      	cmp	r2, r3
 801466c:	d8f7      	bhi.n	801465e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	685b      	ldr	r3, [r3, #4]
 8014676:	68ba      	ldr	r2, [r7, #8]
 8014678:	4413      	add	r3, r2
 801467a:	687a      	ldr	r2, [r7, #4]
 801467c:	429a      	cmp	r2, r3
 801467e:	d108      	bne.n	8014692 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	685a      	ldr	r2, [r3, #4]
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	685b      	ldr	r3, [r3, #4]
 8014688:	441a      	add	r2, r3
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	685b      	ldr	r3, [r3, #4]
 801469a:	68ba      	ldr	r2, [r7, #8]
 801469c:	441a      	add	r2, r3
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d118      	bne.n	80146d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	681a      	ldr	r2, [r3, #0]
 80146aa:	4b15      	ldr	r3, [pc, #84]	; (8014700 <prvInsertBlockIntoFreeList+0xb0>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d00d      	beq.n	80146ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	685a      	ldr	r2, [r3, #4]
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	685b      	ldr	r3, [r3, #4]
 80146bc:	441a      	add	r2, r3
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	681a      	ldr	r2, [r3, #0]
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	601a      	str	r2, [r3, #0]
 80146cc:	e008      	b.n	80146e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80146ce:	4b0c      	ldr	r3, [pc, #48]	; (8014700 <prvInsertBlockIntoFreeList+0xb0>)
 80146d0:	681a      	ldr	r2, [r3, #0]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	601a      	str	r2, [r3, #0]
 80146d6:	e003      	b.n	80146e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	681a      	ldr	r2, [r3, #0]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80146e0:	68fa      	ldr	r2, [r7, #12]
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d002      	beq.n	80146ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	687a      	ldr	r2, [r7, #4]
 80146ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80146ee:	bf00      	nop
 80146f0:	3714      	adds	r7, #20
 80146f2:	46bd      	mov	sp, r7
 80146f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f8:	4770      	bx	lr
 80146fa:	bf00      	nop
 80146fc:	20005bd0 	.word	0x20005bd0
 8014700:	20005bd8 	.word	0x20005bd8

08014704 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014708:	2200      	movs	r2, #0
 801470a:	4912      	ldr	r1, [pc, #72]	; (8014754 <MX_USB_DEVICE_Init+0x50>)
 801470c:	4812      	ldr	r0, [pc, #72]	; (8014758 <MX_USB_DEVICE_Init+0x54>)
 801470e:	f7f7 fba5 	bl	800be5c <USBD_Init>
 8014712:	4603      	mov	r3, r0
 8014714:	2b00      	cmp	r3, #0
 8014716:	d001      	beq.n	801471c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014718:	f7f0 f8ce 	bl	80048b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801471c:	490f      	ldr	r1, [pc, #60]	; (801475c <MX_USB_DEVICE_Init+0x58>)
 801471e:	480e      	ldr	r0, [pc, #56]	; (8014758 <MX_USB_DEVICE_Init+0x54>)
 8014720:	f7f7 fbcc 	bl	800bebc <USBD_RegisterClass>
 8014724:	4603      	mov	r3, r0
 8014726:	2b00      	cmp	r3, #0
 8014728:	d001      	beq.n	801472e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801472a:	f7f0 f8c5 	bl	80048b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801472e:	490c      	ldr	r1, [pc, #48]	; (8014760 <MX_USB_DEVICE_Init+0x5c>)
 8014730:	4809      	ldr	r0, [pc, #36]	; (8014758 <MX_USB_DEVICE_Init+0x54>)
 8014732:	f7f7 faed 	bl	800bd10 <USBD_CDC_RegisterInterface>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	d001      	beq.n	8014740 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801473c:	f7f0 f8bc 	bl	80048b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014740:	4805      	ldr	r0, [pc, #20]	; (8014758 <MX_USB_DEVICE_Init+0x54>)
 8014742:	f7f7 fbe2 	bl	800bf0a <USBD_Start>
 8014746:	4603      	mov	r3, r0
 8014748:	2b00      	cmp	r3, #0
 801474a:	d001      	beq.n	8014750 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801474c:	f7f0 f8b4 	bl	80048b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014750:	bf00      	nop
 8014752:	bd80      	pop	{r7, pc}
 8014754:	2000014c 	.word	0x2000014c
 8014758:	200132bc 	.word	0x200132bc
 801475c:	20000030 	.word	0x20000030
 8014760:	20000138 	.word	0x20000138

08014764 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014768:	2200      	movs	r2, #0
 801476a:	4905      	ldr	r1, [pc, #20]	; (8014780 <CDC_Init_FS+0x1c>)
 801476c:	4805      	ldr	r0, [pc, #20]	; (8014784 <CDC_Init_FS+0x20>)
 801476e:	f7f7 fae4 	bl	800bd3a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014772:	4905      	ldr	r1, [pc, #20]	; (8014788 <CDC_Init_FS+0x24>)
 8014774:	4803      	ldr	r0, [pc, #12]	; (8014784 <CDC_Init_FS+0x20>)
 8014776:	f7f7 fafe 	bl	800bd76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801477a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801477c:	4618      	mov	r0, r3
 801477e:	bd80      	pop	{r7, pc}
 8014780:	20013d8c 	.word	0x20013d8c
 8014784:	200132bc 	.word	0x200132bc
 8014788:	2001358c 	.word	0x2001358c

0801478c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801478c:	b480      	push	{r7}
 801478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014790:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014792:	4618      	mov	r0, r3
 8014794:	46bd      	mov	sp, r7
 8014796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479a:	4770      	bx	lr

0801479c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801479c:	b480      	push	{r7}
 801479e:	b083      	sub	sp, #12
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	4603      	mov	r3, r0
 80147a4:	6039      	str	r1, [r7, #0]
 80147a6:	71fb      	strb	r3, [r7, #7]
 80147a8:	4613      	mov	r3, r2
 80147aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80147ac:	79fb      	ldrb	r3, [r7, #7]
 80147ae:	2b23      	cmp	r3, #35	; 0x23
 80147b0:	d84a      	bhi.n	8014848 <CDC_Control_FS+0xac>
 80147b2:	a201      	add	r2, pc, #4	; (adr r2, 80147b8 <CDC_Control_FS+0x1c>)
 80147b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147b8:	08014849 	.word	0x08014849
 80147bc:	08014849 	.word	0x08014849
 80147c0:	08014849 	.word	0x08014849
 80147c4:	08014849 	.word	0x08014849
 80147c8:	08014849 	.word	0x08014849
 80147cc:	08014849 	.word	0x08014849
 80147d0:	08014849 	.word	0x08014849
 80147d4:	08014849 	.word	0x08014849
 80147d8:	08014849 	.word	0x08014849
 80147dc:	08014849 	.word	0x08014849
 80147e0:	08014849 	.word	0x08014849
 80147e4:	08014849 	.word	0x08014849
 80147e8:	08014849 	.word	0x08014849
 80147ec:	08014849 	.word	0x08014849
 80147f0:	08014849 	.word	0x08014849
 80147f4:	08014849 	.word	0x08014849
 80147f8:	08014849 	.word	0x08014849
 80147fc:	08014849 	.word	0x08014849
 8014800:	08014849 	.word	0x08014849
 8014804:	08014849 	.word	0x08014849
 8014808:	08014849 	.word	0x08014849
 801480c:	08014849 	.word	0x08014849
 8014810:	08014849 	.word	0x08014849
 8014814:	08014849 	.word	0x08014849
 8014818:	08014849 	.word	0x08014849
 801481c:	08014849 	.word	0x08014849
 8014820:	08014849 	.word	0x08014849
 8014824:	08014849 	.word	0x08014849
 8014828:	08014849 	.word	0x08014849
 801482c:	08014849 	.word	0x08014849
 8014830:	08014849 	.word	0x08014849
 8014834:	08014849 	.word	0x08014849
 8014838:	08014849 	.word	0x08014849
 801483c:	08014849 	.word	0x08014849
 8014840:	08014849 	.word	0x08014849
 8014844:	08014849 	.word	0x08014849
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014848:	bf00      	nop
  }

  return (USBD_OK);
 801484a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801484c:	4618      	mov	r0, r3
 801484e:	370c      	adds	r7, #12
 8014850:	46bd      	mov	sp, r7
 8014852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014856:	4770      	bx	lr

08014858 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b082      	sub	sp, #8
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014862:	6879      	ldr	r1, [r7, #4]
 8014864:	4805      	ldr	r0, [pc, #20]	; (801487c <CDC_Receive_FS+0x24>)
 8014866:	f7f7 fa86 	bl	800bd76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801486a:	4804      	ldr	r0, [pc, #16]	; (801487c <CDC_Receive_FS+0x24>)
 801486c:	f7f7 facc 	bl	800be08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014870:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014872:	4618      	mov	r0, r3
 8014874:	3708      	adds	r7, #8
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	200132bc 	.word	0x200132bc

08014880 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b084      	sub	sp, #16
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
 8014888:	460b      	mov	r3, r1
 801488a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801488c:	2300      	movs	r3, #0
 801488e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014890:	4b0d      	ldr	r3, [pc, #52]	; (80148c8 <CDC_Transmit_FS+0x48>)
 8014892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014896:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d001      	beq.n	80148a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80148a2:	2301      	movs	r3, #1
 80148a4:	e00b      	b.n	80148be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80148a6:	887b      	ldrh	r3, [r7, #2]
 80148a8:	461a      	mov	r2, r3
 80148aa:	6879      	ldr	r1, [r7, #4]
 80148ac:	4806      	ldr	r0, [pc, #24]	; (80148c8 <CDC_Transmit_FS+0x48>)
 80148ae:	f7f7 fa44 	bl	800bd3a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80148b2:	4805      	ldr	r0, [pc, #20]	; (80148c8 <CDC_Transmit_FS+0x48>)
 80148b4:	f7f7 fa78 	bl	800bda8 <USBD_CDC_TransmitPacket>
 80148b8:	4603      	mov	r3, r0
 80148ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80148bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3710      	adds	r7, #16
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	200132bc 	.word	0x200132bc

080148cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80148cc:	b480      	push	{r7}
 80148ce:	b087      	sub	sp, #28
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	4613      	mov	r3, r2
 80148d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80148da:	2300      	movs	r3, #0
 80148dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80148de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148e2:	4618      	mov	r0, r3
 80148e4:	371c      	adds	r7, #28
 80148e6:	46bd      	mov	sp, r7
 80148e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ec:	4770      	bx	lr
	...

080148f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80148f0:	b480      	push	{r7}
 80148f2:	b083      	sub	sp, #12
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	4603      	mov	r3, r0
 80148f8:	6039      	str	r1, [r7, #0]
 80148fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	2212      	movs	r2, #18
 8014900:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014902:	4b03      	ldr	r3, [pc, #12]	; (8014910 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014904:	4618      	mov	r0, r3
 8014906:	370c      	adds	r7, #12
 8014908:	46bd      	mov	sp, r7
 801490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490e:	4770      	bx	lr
 8014910:	20000168 	.word	0x20000168

08014914 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014914:	b480      	push	{r7}
 8014916:	b083      	sub	sp, #12
 8014918:	af00      	add	r7, sp, #0
 801491a:	4603      	mov	r3, r0
 801491c:	6039      	str	r1, [r7, #0]
 801491e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	2204      	movs	r2, #4
 8014924:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014926:	4b03      	ldr	r3, [pc, #12]	; (8014934 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014928:	4618      	mov	r0, r3
 801492a:	370c      	adds	r7, #12
 801492c:	46bd      	mov	sp, r7
 801492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014932:	4770      	bx	lr
 8014934:	2000017c 	.word	0x2000017c

08014938 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b082      	sub	sp, #8
 801493c:	af00      	add	r7, sp, #0
 801493e:	4603      	mov	r3, r0
 8014940:	6039      	str	r1, [r7, #0]
 8014942:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014944:	79fb      	ldrb	r3, [r7, #7]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d105      	bne.n	8014956 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801494a:	683a      	ldr	r2, [r7, #0]
 801494c:	4907      	ldr	r1, [pc, #28]	; (801496c <USBD_FS_ProductStrDescriptor+0x34>)
 801494e:	4808      	ldr	r0, [pc, #32]	; (8014970 <USBD_FS_ProductStrDescriptor+0x38>)
 8014950:	f7f8 fb0d 	bl	800cf6e <USBD_GetString>
 8014954:	e004      	b.n	8014960 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014956:	683a      	ldr	r2, [r7, #0]
 8014958:	4904      	ldr	r1, [pc, #16]	; (801496c <USBD_FS_ProductStrDescriptor+0x34>)
 801495a:	4805      	ldr	r0, [pc, #20]	; (8014970 <USBD_FS_ProductStrDescriptor+0x38>)
 801495c:	f7f8 fb07 	bl	800cf6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8014960:	4b02      	ldr	r3, [pc, #8]	; (801496c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014962:	4618      	mov	r0, r3
 8014964:	3708      	adds	r7, #8
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	2001458c 	.word	0x2001458c
 8014970:	08018798 	.word	0x08018798

08014974 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	4603      	mov	r3, r0
 801497c:	6039      	str	r1, [r7, #0]
 801497e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014980:	683a      	ldr	r2, [r7, #0]
 8014982:	4904      	ldr	r1, [pc, #16]	; (8014994 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014984:	4804      	ldr	r0, [pc, #16]	; (8014998 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014986:	f7f8 faf2 	bl	800cf6e <USBD_GetString>
  return USBD_StrDesc;
 801498a:	4b02      	ldr	r3, [pc, #8]	; (8014994 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801498c:	4618      	mov	r0, r3
 801498e:	3708      	adds	r7, #8
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}
 8014994:	2001458c 	.word	0x2001458c
 8014998:	080187b0 	.word	0x080187b0

0801499c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b082      	sub	sp, #8
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	4603      	mov	r3, r0
 80149a4:	6039      	str	r1, [r7, #0]
 80149a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	221a      	movs	r2, #26
 80149ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80149ae:	f000 f843 	bl	8014a38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80149b2:	4b02      	ldr	r3, [pc, #8]	; (80149bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3708      	adds	r7, #8
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}
 80149bc:	20000180 	.word	0x20000180

080149c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	4603      	mov	r3, r0
 80149c8:	6039      	str	r1, [r7, #0]
 80149ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80149cc:	79fb      	ldrb	r3, [r7, #7]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d105      	bne.n	80149de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80149d2:	683a      	ldr	r2, [r7, #0]
 80149d4:	4907      	ldr	r1, [pc, #28]	; (80149f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80149d6:	4808      	ldr	r0, [pc, #32]	; (80149f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80149d8:	f7f8 fac9 	bl	800cf6e <USBD_GetString>
 80149dc:	e004      	b.n	80149e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80149de:	683a      	ldr	r2, [r7, #0]
 80149e0:	4904      	ldr	r1, [pc, #16]	; (80149f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80149e2:	4805      	ldr	r0, [pc, #20]	; (80149f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80149e4:	f7f8 fac3 	bl	800cf6e <USBD_GetString>
  }
  return USBD_StrDesc;
 80149e8:	4b02      	ldr	r3, [pc, #8]	; (80149f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3708      	adds	r7, #8
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	bf00      	nop
 80149f4:	2001458c 	.word	0x2001458c
 80149f8:	080187c4 	.word	0x080187c4

080149fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	4603      	mov	r3, r0
 8014a04:	6039      	str	r1, [r7, #0]
 8014a06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014a08:	79fb      	ldrb	r3, [r7, #7]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d105      	bne.n	8014a1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014a0e:	683a      	ldr	r2, [r7, #0]
 8014a10:	4907      	ldr	r1, [pc, #28]	; (8014a30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014a12:	4808      	ldr	r0, [pc, #32]	; (8014a34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014a14:	f7f8 faab 	bl	800cf6e <USBD_GetString>
 8014a18:	e004      	b.n	8014a24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014a1a:	683a      	ldr	r2, [r7, #0]
 8014a1c:	4904      	ldr	r1, [pc, #16]	; (8014a30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014a1e:	4805      	ldr	r0, [pc, #20]	; (8014a34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014a20:	f7f8 faa5 	bl	800cf6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8014a24:	4b02      	ldr	r3, [pc, #8]	; (8014a30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3708      	adds	r7, #8
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}
 8014a2e:	bf00      	nop
 8014a30:	2001458c 	.word	0x2001458c
 8014a34:	080187d0 	.word	0x080187d0

08014a38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b084      	sub	sp, #16
 8014a3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014a3e:	4b0f      	ldr	r3, [pc, #60]	; (8014a7c <Get_SerialNum+0x44>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014a44:	4b0e      	ldr	r3, [pc, #56]	; (8014a80 <Get_SerialNum+0x48>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014a4a:	4b0e      	ldr	r3, [pc, #56]	; (8014a84 <Get_SerialNum+0x4c>)
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014a50:	68fa      	ldr	r2, [r7, #12]
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	4413      	add	r3, r2
 8014a56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d009      	beq.n	8014a72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014a5e:	2208      	movs	r2, #8
 8014a60:	4909      	ldr	r1, [pc, #36]	; (8014a88 <Get_SerialNum+0x50>)
 8014a62:	68f8      	ldr	r0, [r7, #12]
 8014a64:	f000 f814 	bl	8014a90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014a68:	2204      	movs	r2, #4
 8014a6a:	4908      	ldr	r1, [pc, #32]	; (8014a8c <Get_SerialNum+0x54>)
 8014a6c:	68b8      	ldr	r0, [r7, #8]
 8014a6e:	f000 f80f 	bl	8014a90 <IntToUnicode>
  }
}
 8014a72:	bf00      	nop
 8014a74:	3710      	adds	r7, #16
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
 8014a7a:	bf00      	nop
 8014a7c:	1fff7a10 	.word	0x1fff7a10
 8014a80:	1fff7a14 	.word	0x1fff7a14
 8014a84:	1fff7a18 	.word	0x1fff7a18
 8014a88:	20000182 	.word	0x20000182
 8014a8c:	20000192 	.word	0x20000192

08014a90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014a90:	b480      	push	{r7}
 8014a92:	b087      	sub	sp, #28
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	60f8      	str	r0, [r7, #12]
 8014a98:	60b9      	str	r1, [r7, #8]
 8014a9a:	4613      	mov	r3, r2
 8014a9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	75fb      	strb	r3, [r7, #23]
 8014aa6:	e027      	b.n	8014af8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	0f1b      	lsrs	r3, r3, #28
 8014aac:	2b09      	cmp	r3, #9
 8014aae:	d80b      	bhi.n	8014ac8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	0f1b      	lsrs	r3, r3, #28
 8014ab4:	b2da      	uxtb	r2, r3
 8014ab6:	7dfb      	ldrb	r3, [r7, #23]
 8014ab8:	005b      	lsls	r3, r3, #1
 8014aba:	4619      	mov	r1, r3
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	440b      	add	r3, r1
 8014ac0:	3230      	adds	r2, #48	; 0x30
 8014ac2:	b2d2      	uxtb	r2, r2
 8014ac4:	701a      	strb	r2, [r3, #0]
 8014ac6:	e00a      	b.n	8014ade <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	0f1b      	lsrs	r3, r3, #28
 8014acc:	b2da      	uxtb	r2, r3
 8014ace:	7dfb      	ldrb	r3, [r7, #23]
 8014ad0:	005b      	lsls	r3, r3, #1
 8014ad2:	4619      	mov	r1, r3
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	440b      	add	r3, r1
 8014ad8:	3237      	adds	r2, #55	; 0x37
 8014ada:	b2d2      	uxtb	r2, r2
 8014adc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	011b      	lsls	r3, r3, #4
 8014ae2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014ae4:	7dfb      	ldrb	r3, [r7, #23]
 8014ae6:	005b      	lsls	r3, r3, #1
 8014ae8:	3301      	adds	r3, #1
 8014aea:	68ba      	ldr	r2, [r7, #8]
 8014aec:	4413      	add	r3, r2
 8014aee:	2200      	movs	r2, #0
 8014af0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014af2:	7dfb      	ldrb	r3, [r7, #23]
 8014af4:	3301      	adds	r3, #1
 8014af6:	75fb      	strb	r3, [r7, #23]
 8014af8:	7dfa      	ldrb	r2, [r7, #23]
 8014afa:	79fb      	ldrb	r3, [r7, #7]
 8014afc:	429a      	cmp	r2, r3
 8014afe:	d3d3      	bcc.n	8014aa8 <IntToUnicode+0x18>
  }
}
 8014b00:	bf00      	nop
 8014b02:	bf00      	nop
 8014b04:	371c      	adds	r7, #28
 8014b06:	46bd      	mov	sp, r7
 8014b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0c:	4770      	bx	lr
	...

08014b10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b08a      	sub	sp, #40	; 0x28
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b18:	f107 0314 	add.w	r3, r7, #20
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	601a      	str	r2, [r3, #0]
 8014b20:	605a      	str	r2, [r3, #4]
 8014b22:	609a      	str	r2, [r3, #8]
 8014b24:	60da      	str	r2, [r3, #12]
 8014b26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014b30:	d147      	bne.n	8014bc2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b32:	2300      	movs	r3, #0
 8014b34:	613b      	str	r3, [r7, #16]
 8014b36:	4b25      	ldr	r3, [pc, #148]	; (8014bcc <HAL_PCD_MspInit+0xbc>)
 8014b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b3a:	4a24      	ldr	r2, [pc, #144]	; (8014bcc <HAL_PCD_MspInit+0xbc>)
 8014b3c:	f043 0301 	orr.w	r3, r3, #1
 8014b40:	6313      	str	r3, [r2, #48]	; 0x30
 8014b42:	4b22      	ldr	r3, [pc, #136]	; (8014bcc <HAL_PCD_MspInit+0xbc>)
 8014b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b46:	f003 0301 	and.w	r3, r3, #1
 8014b4a:	613b      	str	r3, [r7, #16]
 8014b4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8014b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014b54:	2300      	movs	r3, #0
 8014b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8014b5c:	f107 0314 	add.w	r3, r7, #20
 8014b60:	4619      	mov	r1, r3
 8014b62:	481b      	ldr	r0, [pc, #108]	; (8014bd0 <HAL_PCD_MspInit+0xc0>)
 8014b64:	f7f0 fb26 	bl	80051b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8014b68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8014b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b6e:	2302      	movs	r3, #2
 8014b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b72:	2300      	movs	r3, #0
 8014b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b76:	2300      	movs	r3, #0
 8014b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014b7a:	230a      	movs	r3, #10
 8014b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014b7e:	f107 0314 	add.w	r3, r7, #20
 8014b82:	4619      	mov	r1, r3
 8014b84:	4812      	ldr	r0, [pc, #72]	; (8014bd0 <HAL_PCD_MspInit+0xc0>)
 8014b86:	f7f0 fb15 	bl	80051b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014b8a:	4b10      	ldr	r3, [pc, #64]	; (8014bcc <HAL_PCD_MspInit+0xbc>)
 8014b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b8e:	4a0f      	ldr	r2, [pc, #60]	; (8014bcc <HAL_PCD_MspInit+0xbc>)
 8014b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b94:	6353      	str	r3, [r2, #52]	; 0x34
 8014b96:	2300      	movs	r3, #0
 8014b98:	60fb      	str	r3, [r7, #12]
 8014b9a:	4b0c      	ldr	r3, [pc, #48]	; (8014bcc <HAL_PCD_MspInit+0xbc>)
 8014b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b9e:	4a0b      	ldr	r2, [pc, #44]	; (8014bcc <HAL_PCD_MspInit+0xbc>)
 8014ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8014ba6:	4b09      	ldr	r3, [pc, #36]	; (8014bcc <HAL_PCD_MspInit+0xbc>)
 8014ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014bae:	60fb      	str	r3, [r7, #12]
 8014bb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	2105      	movs	r1, #5
 8014bb6:	2043      	movs	r0, #67	; 0x43
 8014bb8:	f7f0 fad2 	bl	8005160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014bbc:	2043      	movs	r0, #67	; 0x43
 8014bbe:	f7f0 faeb 	bl	8005198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014bc2:	bf00      	nop
 8014bc4:	3728      	adds	r7, #40	; 0x28
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}
 8014bca:	bf00      	nop
 8014bcc:	40023800 	.word	0x40023800
 8014bd0:	40020000 	.word	0x40020000

08014bd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b082      	sub	sp, #8
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014be8:	4619      	mov	r1, r3
 8014bea:	4610      	mov	r0, r2
 8014bec:	f7f7 f9d8 	bl	800bfa0 <USBD_LL_SetupStage>
}
 8014bf0:	bf00      	nop
 8014bf2:	3708      	adds	r7, #8
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b082      	sub	sp, #8
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	460b      	mov	r3, r1
 8014c02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014c0a:	78fa      	ldrb	r2, [r7, #3]
 8014c0c:	6879      	ldr	r1, [r7, #4]
 8014c0e:	4613      	mov	r3, r2
 8014c10:	00db      	lsls	r3, r3, #3
 8014c12:	1a9b      	subs	r3, r3, r2
 8014c14:	009b      	lsls	r3, r3, #2
 8014c16:	440b      	add	r3, r1
 8014c18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014c1c:	681a      	ldr	r2, [r3, #0]
 8014c1e:	78fb      	ldrb	r3, [r7, #3]
 8014c20:	4619      	mov	r1, r3
 8014c22:	f7f7 fa12 	bl	800c04a <USBD_LL_DataOutStage>
}
 8014c26:	bf00      	nop
 8014c28:	3708      	adds	r7, #8
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}

08014c2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c2e:	b580      	push	{r7, lr}
 8014c30:	b082      	sub	sp, #8
 8014c32:	af00      	add	r7, sp, #0
 8014c34:	6078      	str	r0, [r7, #4]
 8014c36:	460b      	mov	r3, r1
 8014c38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014c40:	78fa      	ldrb	r2, [r7, #3]
 8014c42:	6879      	ldr	r1, [r7, #4]
 8014c44:	4613      	mov	r3, r2
 8014c46:	00db      	lsls	r3, r3, #3
 8014c48:	1a9b      	subs	r3, r3, r2
 8014c4a:	009b      	lsls	r3, r3, #2
 8014c4c:	440b      	add	r3, r1
 8014c4e:	3348      	adds	r3, #72	; 0x48
 8014c50:	681a      	ldr	r2, [r3, #0]
 8014c52:	78fb      	ldrb	r3, [r7, #3]
 8014c54:	4619      	mov	r1, r3
 8014c56:	f7f7 fa5b 	bl	800c110 <USBD_LL_DataInStage>
}
 8014c5a:	bf00      	nop
 8014c5c:	3708      	adds	r7, #8
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}

08014c62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c62:	b580      	push	{r7, lr}
 8014c64:	b082      	sub	sp, #8
 8014c66:	af00      	add	r7, sp, #0
 8014c68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014c70:	4618      	mov	r0, r3
 8014c72:	f7f7 fb6f 	bl	800c354 <USBD_LL_SOF>
}
 8014c76:	bf00      	nop
 8014c78:	3708      	adds	r7, #8
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}

08014c7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c7e:	b580      	push	{r7, lr}
 8014c80:	b084      	sub	sp, #16
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014c86:	2301      	movs	r3, #1
 8014c88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	68db      	ldr	r3, [r3, #12]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d102      	bne.n	8014c98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014c92:	2300      	movs	r3, #0
 8014c94:	73fb      	strb	r3, [r7, #15]
 8014c96:	e008      	b.n	8014caa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	68db      	ldr	r3, [r3, #12]
 8014c9c:	2b02      	cmp	r3, #2
 8014c9e:	d102      	bne.n	8014ca6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	73fb      	strb	r3, [r7, #15]
 8014ca4:	e001      	b.n	8014caa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014ca6:	f7ef fe07 	bl	80048b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014cb0:	7bfa      	ldrb	r2, [r7, #15]
 8014cb2:	4611      	mov	r1, r2
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7f7 fb0f 	bl	800c2d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7f7 fabb 	bl	800c23c <USBD_LL_Reset>
}
 8014cc6:	bf00      	nop
 8014cc8:	3710      	adds	r7, #16
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
	...

08014cd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7f7 fb0a 	bl	800c2f8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	6812      	ldr	r2, [r2, #0]
 8014cf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014cf6:	f043 0301 	orr.w	r3, r3, #1
 8014cfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	6a1b      	ldr	r3, [r3, #32]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d005      	beq.n	8014d10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014d04:	4b04      	ldr	r3, [pc, #16]	; (8014d18 <HAL_PCD_SuspendCallback+0x48>)
 8014d06:	691b      	ldr	r3, [r3, #16]
 8014d08:	4a03      	ldr	r2, [pc, #12]	; (8014d18 <HAL_PCD_SuspendCallback+0x48>)
 8014d0a:	f043 0306 	orr.w	r3, r3, #6
 8014d0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014d10:	bf00      	nop
 8014d12:	3708      	adds	r7, #8
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}
 8014d18:	e000ed00 	.word	0xe000ed00

08014d1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b082      	sub	sp, #8
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f7f7 fafa 	bl	800c324 <USBD_LL_Resume>
}
 8014d30:	bf00      	nop
 8014d32:	3708      	adds	r7, #8
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}

08014d38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	460b      	mov	r3, r1
 8014d42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014d4a:	78fa      	ldrb	r2, [r7, #3]
 8014d4c:	4611      	mov	r1, r2
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7f7 fb48 	bl	800c3e4 <USBD_LL_IsoOUTIncomplete>
}
 8014d54:	bf00      	nop
 8014d56:	3708      	adds	r7, #8
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}

08014d5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	460b      	mov	r3, r1
 8014d66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014d6e:	78fa      	ldrb	r2, [r7, #3]
 8014d70:	4611      	mov	r1, r2
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7f7 fb10 	bl	800c398 <USBD_LL_IsoINIncomplete>
}
 8014d78:	bf00      	nop
 8014d7a:	3708      	adds	r7, #8
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	bd80      	pop	{r7, pc}

08014d80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b082      	sub	sp, #8
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7f7 fb4e 	bl	800c430 <USBD_LL_DevConnected>
}
 8014d94:	bf00      	nop
 8014d96:	3708      	adds	r7, #8
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7f7 fb4b 	bl	800c446 <USBD_LL_DevDisconnected>
}
 8014db0:	bf00      	nop
 8014db2:	3708      	adds	r7, #8
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}

08014db8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	781b      	ldrb	r3, [r3, #0]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d13c      	bne.n	8014e42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014dc8:	4a20      	ldr	r2, [pc, #128]	; (8014e4c <USBD_LL_Init+0x94>)
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	4a1e      	ldr	r2, [pc, #120]	; (8014e4c <USBD_LL_Init+0x94>)
 8014dd4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014dd8:	4b1c      	ldr	r3, [pc, #112]	; (8014e4c <USBD_LL_Init+0x94>)
 8014dda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014dde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8014de0:	4b1a      	ldr	r3, [pc, #104]	; (8014e4c <USBD_LL_Init+0x94>)
 8014de2:	2204      	movs	r2, #4
 8014de4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014de6:	4b19      	ldr	r3, [pc, #100]	; (8014e4c <USBD_LL_Init+0x94>)
 8014de8:	2202      	movs	r2, #2
 8014dea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014dec:	4b17      	ldr	r3, [pc, #92]	; (8014e4c <USBD_LL_Init+0x94>)
 8014dee:	2200      	movs	r2, #0
 8014df0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014df2:	4b16      	ldr	r3, [pc, #88]	; (8014e4c <USBD_LL_Init+0x94>)
 8014df4:	2202      	movs	r2, #2
 8014df6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014df8:	4b14      	ldr	r3, [pc, #80]	; (8014e4c <USBD_LL_Init+0x94>)
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014dfe:	4b13      	ldr	r3, [pc, #76]	; (8014e4c <USBD_LL_Init+0x94>)
 8014e00:	2200      	movs	r2, #0
 8014e02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014e04:	4b11      	ldr	r3, [pc, #68]	; (8014e4c <USBD_LL_Init+0x94>)
 8014e06:	2200      	movs	r2, #0
 8014e08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014e0a:	4b10      	ldr	r3, [pc, #64]	; (8014e4c <USBD_LL_Init+0x94>)
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014e10:	4b0e      	ldr	r3, [pc, #56]	; (8014e4c <USBD_LL_Init+0x94>)
 8014e12:	2200      	movs	r2, #0
 8014e14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014e16:	480d      	ldr	r0, [pc, #52]	; (8014e4c <USBD_LL_Init+0x94>)
 8014e18:	f7f1 fe3f 	bl	8006a9a <HAL_PCD_Init>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d001      	beq.n	8014e26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014e22:	f7ef fd49 	bl	80048b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014e26:	2180      	movs	r1, #128	; 0x80
 8014e28:	4808      	ldr	r0, [pc, #32]	; (8014e4c <USBD_LL_Init+0x94>)
 8014e2a:	f7f2 ff9c 	bl	8007d66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014e2e:	2240      	movs	r2, #64	; 0x40
 8014e30:	2100      	movs	r1, #0
 8014e32:	4806      	ldr	r0, [pc, #24]	; (8014e4c <USBD_LL_Init+0x94>)
 8014e34:	f7f2 ff50 	bl	8007cd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014e38:	2280      	movs	r2, #128	; 0x80
 8014e3a:	2101      	movs	r1, #1
 8014e3c:	4803      	ldr	r0, [pc, #12]	; (8014e4c <USBD_LL_Init+0x94>)
 8014e3e:	f7f2 ff4b 	bl	8007cd8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014e42:	2300      	movs	r3, #0
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	3708      	adds	r7, #8
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	bd80      	pop	{r7, pc}
 8014e4c:	2001478c 	.word	0x2001478c

08014e50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b084      	sub	sp, #16
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e58:	2300      	movs	r3, #0
 8014e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7f1 ff34 	bl	8006cd4 <HAL_PCD_Start>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e70:	7bfb      	ldrb	r3, [r7, #15]
 8014e72:	4618      	mov	r0, r3
 8014e74:	f000 f942 	bl	80150fc <USBD_Get_USB_Status>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3710      	adds	r7, #16
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}

08014e86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014e86:	b580      	push	{r7, lr}
 8014e88:	b084      	sub	sp, #16
 8014e8a:	af00      	add	r7, sp, #0
 8014e8c:	6078      	str	r0, [r7, #4]
 8014e8e:	4608      	mov	r0, r1
 8014e90:	4611      	mov	r1, r2
 8014e92:	461a      	mov	r2, r3
 8014e94:	4603      	mov	r3, r0
 8014e96:	70fb      	strb	r3, [r7, #3]
 8014e98:	460b      	mov	r3, r1
 8014e9a:	70bb      	strb	r3, [r7, #2]
 8014e9c:	4613      	mov	r3, r2
 8014e9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014eae:	78bb      	ldrb	r3, [r7, #2]
 8014eb0:	883a      	ldrh	r2, [r7, #0]
 8014eb2:	78f9      	ldrb	r1, [r7, #3]
 8014eb4:	f7f2 fb18 	bl	80074e8 <HAL_PCD_EP_Open>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ebc:	7bfb      	ldrb	r3, [r7, #15]
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f000 f91c 	bl	80150fc <USBD_Get_USB_Status>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ec8:	7bbb      	ldrb	r3, [r7, #14]
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3710      	adds	r7, #16
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}

08014ed2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ed2:	b580      	push	{r7, lr}
 8014ed4:	b084      	sub	sp, #16
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	6078      	str	r0, [r7, #4]
 8014eda:	460b      	mov	r3, r1
 8014edc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014eec:	78fa      	ldrb	r2, [r7, #3]
 8014eee:	4611      	mov	r1, r2
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7f2 fb61 	bl	80075b8 <HAL_PCD_EP_Close>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014efa:	7bfb      	ldrb	r3, [r7, #15]
 8014efc:	4618      	mov	r0, r3
 8014efe:	f000 f8fd 	bl	80150fc <USBD_Get_USB_Status>
 8014f02:	4603      	mov	r3, r0
 8014f04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f06:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3710      	adds	r7, #16
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	460b      	mov	r3, r1
 8014f1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f20:	2300      	movs	r3, #0
 8014f22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f2a:	78fa      	ldrb	r2, [r7, #3]
 8014f2c:	4611      	mov	r1, r2
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f7f2 fc39 	bl	80077a6 <HAL_PCD_EP_SetStall>
 8014f34:	4603      	mov	r3, r0
 8014f36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f38:	7bfb      	ldrb	r3, [r7, #15]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f000 f8de 	bl	80150fc <USBD_Get_USB_Status>
 8014f40:	4603      	mov	r3, r0
 8014f42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f46:	4618      	mov	r0, r3
 8014f48:	3710      	adds	r7, #16
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}

08014f4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f4e:	b580      	push	{r7, lr}
 8014f50:	b084      	sub	sp, #16
 8014f52:	af00      	add	r7, sp, #0
 8014f54:	6078      	str	r0, [r7, #4]
 8014f56:	460b      	mov	r3, r1
 8014f58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f68:	78fa      	ldrb	r2, [r7, #3]
 8014f6a:	4611      	mov	r1, r2
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7f2 fc7e 	bl	800786e <HAL_PCD_EP_ClrStall>
 8014f72:	4603      	mov	r3, r0
 8014f74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f76:	7bfb      	ldrb	r3, [r7, #15]
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f000 f8bf 	bl	80150fc <USBD_Get_USB_Status>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f82:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3710      	adds	r7, #16
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}

08014f8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f8c:	b480      	push	{r7}
 8014f8e:	b085      	sub	sp, #20
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
 8014f94:	460b      	mov	r3, r1
 8014f96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	da0b      	bge.n	8014fc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014fa8:	78fb      	ldrb	r3, [r7, #3]
 8014faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014fae:	68f9      	ldr	r1, [r7, #12]
 8014fb0:	4613      	mov	r3, r2
 8014fb2:	00db      	lsls	r3, r3, #3
 8014fb4:	1a9b      	subs	r3, r3, r2
 8014fb6:	009b      	lsls	r3, r3, #2
 8014fb8:	440b      	add	r3, r1
 8014fba:	333e      	adds	r3, #62	; 0x3e
 8014fbc:	781b      	ldrb	r3, [r3, #0]
 8014fbe:	e00b      	b.n	8014fd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014fc0:	78fb      	ldrb	r3, [r7, #3]
 8014fc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014fc6:	68f9      	ldr	r1, [r7, #12]
 8014fc8:	4613      	mov	r3, r2
 8014fca:	00db      	lsls	r3, r3, #3
 8014fcc:	1a9b      	subs	r3, r3, r2
 8014fce:	009b      	lsls	r3, r3, #2
 8014fd0:	440b      	add	r3, r1
 8014fd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014fd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3714      	adds	r7, #20
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe2:	4770      	bx	lr

08014fe4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b084      	sub	sp, #16
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
 8014fec:	460b      	mov	r3, r1
 8014fee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014ffe:	78fa      	ldrb	r2, [r7, #3]
 8015000:	4611      	mov	r1, r2
 8015002:	4618      	mov	r0, r3
 8015004:	f7f2 fa4b 	bl	800749e <HAL_PCD_SetAddress>
 8015008:	4603      	mov	r3, r0
 801500a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801500c:	7bfb      	ldrb	r3, [r7, #15]
 801500e:	4618      	mov	r0, r3
 8015010:	f000 f874 	bl	80150fc <USBD_Get_USB_Status>
 8015014:	4603      	mov	r3, r0
 8015016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015018:	7bbb      	ldrb	r3, [r7, #14]
}
 801501a:	4618      	mov	r0, r3
 801501c:	3710      	adds	r7, #16
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}

08015022 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015022:	b580      	push	{r7, lr}
 8015024:	b086      	sub	sp, #24
 8015026:	af00      	add	r7, sp, #0
 8015028:	60f8      	str	r0, [r7, #12]
 801502a:	607a      	str	r2, [r7, #4]
 801502c:	603b      	str	r3, [r7, #0]
 801502e:	460b      	mov	r3, r1
 8015030:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015032:	2300      	movs	r3, #0
 8015034:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015036:	2300      	movs	r3, #0
 8015038:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015040:	7af9      	ldrb	r1, [r7, #11]
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	687a      	ldr	r2, [r7, #4]
 8015046:	f7f2 fb64 	bl	8007712 <HAL_PCD_EP_Transmit>
 801504a:	4603      	mov	r3, r0
 801504c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801504e:	7dfb      	ldrb	r3, [r7, #23]
 8015050:	4618      	mov	r0, r3
 8015052:	f000 f853 	bl	80150fc <USBD_Get_USB_Status>
 8015056:	4603      	mov	r3, r0
 8015058:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801505a:	7dbb      	ldrb	r3, [r7, #22]
}
 801505c:	4618      	mov	r0, r3
 801505e:	3718      	adds	r7, #24
 8015060:	46bd      	mov	sp, r7
 8015062:	bd80      	pop	{r7, pc}

08015064 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b086      	sub	sp, #24
 8015068:	af00      	add	r7, sp, #0
 801506a:	60f8      	str	r0, [r7, #12]
 801506c:	607a      	str	r2, [r7, #4]
 801506e:	603b      	str	r3, [r7, #0]
 8015070:	460b      	mov	r3, r1
 8015072:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015074:	2300      	movs	r3, #0
 8015076:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015078:	2300      	movs	r3, #0
 801507a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015082:	7af9      	ldrb	r1, [r7, #11]
 8015084:	683b      	ldr	r3, [r7, #0]
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	f7f2 fae0 	bl	800764c <HAL_PCD_EP_Receive>
 801508c:	4603      	mov	r3, r0
 801508e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015090:	7dfb      	ldrb	r3, [r7, #23]
 8015092:	4618      	mov	r0, r3
 8015094:	f000 f832 	bl	80150fc <USBD_Get_USB_Status>
 8015098:	4603      	mov	r3, r0
 801509a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801509c:	7dbb      	ldrb	r3, [r7, #22]
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3718      	adds	r7, #24
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}

080150a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150a6:	b580      	push	{r7, lr}
 80150a8:	b082      	sub	sp, #8
 80150aa:	af00      	add	r7, sp, #0
 80150ac:	6078      	str	r0, [r7, #4]
 80150ae:	460b      	mov	r3, r1
 80150b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80150b8:	78fa      	ldrb	r2, [r7, #3]
 80150ba:	4611      	mov	r1, r2
 80150bc:	4618      	mov	r0, r3
 80150be:	f7f2 fb10 	bl	80076e2 <HAL_PCD_EP_GetRxCount>
 80150c2:	4603      	mov	r3, r0
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3708      	adds	r7, #8
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}

080150cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80150cc:	b480      	push	{r7}
 80150ce:	b083      	sub	sp, #12
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80150d4:	4b03      	ldr	r3, [pc, #12]	; (80150e4 <USBD_static_malloc+0x18>)
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	370c      	adds	r7, #12
 80150da:	46bd      	mov	sp, r7
 80150dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e0:	4770      	bx	lr
 80150e2:	bf00      	nop
 80150e4:	20005bf0 	.word	0x20005bf0

080150e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80150e8:	b480      	push	{r7}
 80150ea:	b083      	sub	sp, #12
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]

}
 80150f0:	bf00      	nop
 80150f2:	370c      	adds	r7, #12
 80150f4:	46bd      	mov	sp, r7
 80150f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fa:	4770      	bx	lr

080150fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80150fc:	b480      	push	{r7}
 80150fe:	b085      	sub	sp, #20
 8015100:	af00      	add	r7, sp, #0
 8015102:	4603      	mov	r3, r0
 8015104:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015106:	2300      	movs	r3, #0
 8015108:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801510a:	79fb      	ldrb	r3, [r7, #7]
 801510c:	2b03      	cmp	r3, #3
 801510e:	d817      	bhi.n	8015140 <USBD_Get_USB_Status+0x44>
 8015110:	a201      	add	r2, pc, #4	; (adr r2, 8015118 <USBD_Get_USB_Status+0x1c>)
 8015112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015116:	bf00      	nop
 8015118:	08015129 	.word	0x08015129
 801511c:	0801512f 	.word	0x0801512f
 8015120:	08015135 	.word	0x08015135
 8015124:	0801513b 	.word	0x0801513b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015128:	2300      	movs	r3, #0
 801512a:	73fb      	strb	r3, [r7, #15]
    break;
 801512c:	e00b      	b.n	8015146 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801512e:	2303      	movs	r3, #3
 8015130:	73fb      	strb	r3, [r7, #15]
    break;
 8015132:	e008      	b.n	8015146 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015134:	2301      	movs	r3, #1
 8015136:	73fb      	strb	r3, [r7, #15]
    break;
 8015138:	e005      	b.n	8015146 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801513a:	2303      	movs	r3, #3
 801513c:	73fb      	strb	r3, [r7, #15]
    break;
 801513e:	e002      	b.n	8015146 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015140:	2303      	movs	r3, #3
 8015142:	73fb      	strb	r3, [r7, #15]
    break;
 8015144:	bf00      	nop
  }
  return usb_status;
 8015146:	7bfb      	ldrb	r3, [r7, #15]
}
 8015148:	4618      	mov	r0, r3
 801514a:	3714      	adds	r7, #20
 801514c:	46bd      	mov	sp, r7
 801514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015152:	4770      	bx	lr

08015154 <__errno>:
 8015154:	4b01      	ldr	r3, [pc, #4]	; (801515c <__errno+0x8>)
 8015156:	6818      	ldr	r0, [r3, #0]
 8015158:	4770      	bx	lr
 801515a:	bf00      	nop
 801515c:	2000019c 	.word	0x2000019c

08015160 <std>:
 8015160:	2300      	movs	r3, #0
 8015162:	b510      	push	{r4, lr}
 8015164:	4604      	mov	r4, r0
 8015166:	e9c0 3300 	strd	r3, r3, [r0]
 801516a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801516e:	6083      	str	r3, [r0, #8]
 8015170:	8181      	strh	r1, [r0, #12]
 8015172:	6643      	str	r3, [r0, #100]	; 0x64
 8015174:	81c2      	strh	r2, [r0, #14]
 8015176:	6183      	str	r3, [r0, #24]
 8015178:	4619      	mov	r1, r3
 801517a:	2208      	movs	r2, #8
 801517c:	305c      	adds	r0, #92	; 0x5c
 801517e:	f000 f945 	bl	801540c <memset>
 8015182:	4b05      	ldr	r3, [pc, #20]	; (8015198 <std+0x38>)
 8015184:	6263      	str	r3, [r4, #36]	; 0x24
 8015186:	4b05      	ldr	r3, [pc, #20]	; (801519c <std+0x3c>)
 8015188:	62a3      	str	r3, [r4, #40]	; 0x28
 801518a:	4b05      	ldr	r3, [pc, #20]	; (80151a0 <std+0x40>)
 801518c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801518e:	4b05      	ldr	r3, [pc, #20]	; (80151a4 <std+0x44>)
 8015190:	6224      	str	r4, [r4, #32]
 8015192:	6323      	str	r3, [r4, #48]	; 0x30
 8015194:	bd10      	pop	{r4, pc}
 8015196:	bf00      	nop
 8015198:	08015f79 	.word	0x08015f79
 801519c:	08015f9b 	.word	0x08015f9b
 80151a0:	08015fd3 	.word	0x08015fd3
 80151a4:	08015ff7 	.word	0x08015ff7

080151a8 <_cleanup_r>:
 80151a8:	4901      	ldr	r1, [pc, #4]	; (80151b0 <_cleanup_r+0x8>)
 80151aa:	f000 b8af 	b.w	801530c <_fwalk_reent>
 80151ae:	bf00      	nop
 80151b0:	08016ef5 	.word	0x08016ef5

080151b4 <__sfmoreglue>:
 80151b4:	b570      	push	{r4, r5, r6, lr}
 80151b6:	1e4a      	subs	r2, r1, #1
 80151b8:	2568      	movs	r5, #104	; 0x68
 80151ba:	4355      	muls	r5, r2
 80151bc:	460e      	mov	r6, r1
 80151be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80151c2:	f000 f97b 	bl	80154bc <_malloc_r>
 80151c6:	4604      	mov	r4, r0
 80151c8:	b140      	cbz	r0, 80151dc <__sfmoreglue+0x28>
 80151ca:	2100      	movs	r1, #0
 80151cc:	e9c0 1600 	strd	r1, r6, [r0]
 80151d0:	300c      	adds	r0, #12
 80151d2:	60a0      	str	r0, [r4, #8]
 80151d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80151d8:	f000 f918 	bl	801540c <memset>
 80151dc:	4620      	mov	r0, r4
 80151de:	bd70      	pop	{r4, r5, r6, pc}

080151e0 <__sfp_lock_acquire>:
 80151e0:	4801      	ldr	r0, [pc, #4]	; (80151e8 <__sfp_lock_acquire+0x8>)
 80151e2:	f000 b8f2 	b.w	80153ca <__retarget_lock_acquire_recursive>
 80151e6:	bf00      	nop
 80151e8:	20014b9c 	.word	0x20014b9c

080151ec <__sfp_lock_release>:
 80151ec:	4801      	ldr	r0, [pc, #4]	; (80151f4 <__sfp_lock_release+0x8>)
 80151ee:	f000 b8ed 	b.w	80153cc <__retarget_lock_release_recursive>
 80151f2:	bf00      	nop
 80151f4:	20014b9c 	.word	0x20014b9c

080151f8 <__sinit_lock_acquire>:
 80151f8:	4801      	ldr	r0, [pc, #4]	; (8015200 <__sinit_lock_acquire+0x8>)
 80151fa:	f000 b8e6 	b.w	80153ca <__retarget_lock_acquire_recursive>
 80151fe:	bf00      	nop
 8015200:	20014b97 	.word	0x20014b97

08015204 <__sinit_lock_release>:
 8015204:	4801      	ldr	r0, [pc, #4]	; (801520c <__sinit_lock_release+0x8>)
 8015206:	f000 b8e1 	b.w	80153cc <__retarget_lock_release_recursive>
 801520a:	bf00      	nop
 801520c:	20014b97 	.word	0x20014b97

08015210 <__sinit>:
 8015210:	b510      	push	{r4, lr}
 8015212:	4604      	mov	r4, r0
 8015214:	f7ff fff0 	bl	80151f8 <__sinit_lock_acquire>
 8015218:	69a3      	ldr	r3, [r4, #24]
 801521a:	b11b      	cbz	r3, 8015224 <__sinit+0x14>
 801521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015220:	f7ff bff0 	b.w	8015204 <__sinit_lock_release>
 8015224:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015228:	6523      	str	r3, [r4, #80]	; 0x50
 801522a:	4b13      	ldr	r3, [pc, #76]	; (8015278 <__sinit+0x68>)
 801522c:	4a13      	ldr	r2, [pc, #76]	; (801527c <__sinit+0x6c>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	62a2      	str	r2, [r4, #40]	; 0x28
 8015232:	42a3      	cmp	r3, r4
 8015234:	bf04      	itt	eq
 8015236:	2301      	moveq	r3, #1
 8015238:	61a3      	streq	r3, [r4, #24]
 801523a:	4620      	mov	r0, r4
 801523c:	f000 f820 	bl	8015280 <__sfp>
 8015240:	6060      	str	r0, [r4, #4]
 8015242:	4620      	mov	r0, r4
 8015244:	f000 f81c 	bl	8015280 <__sfp>
 8015248:	60a0      	str	r0, [r4, #8]
 801524a:	4620      	mov	r0, r4
 801524c:	f000 f818 	bl	8015280 <__sfp>
 8015250:	2200      	movs	r2, #0
 8015252:	60e0      	str	r0, [r4, #12]
 8015254:	2104      	movs	r1, #4
 8015256:	6860      	ldr	r0, [r4, #4]
 8015258:	f7ff ff82 	bl	8015160 <std>
 801525c:	68a0      	ldr	r0, [r4, #8]
 801525e:	2201      	movs	r2, #1
 8015260:	2109      	movs	r1, #9
 8015262:	f7ff ff7d 	bl	8015160 <std>
 8015266:	68e0      	ldr	r0, [r4, #12]
 8015268:	2202      	movs	r2, #2
 801526a:	2112      	movs	r1, #18
 801526c:	f7ff ff78 	bl	8015160 <std>
 8015270:	2301      	movs	r3, #1
 8015272:	61a3      	str	r3, [r4, #24]
 8015274:	e7d2      	b.n	801521c <__sinit+0xc>
 8015276:	bf00      	nop
 8015278:	08018dac 	.word	0x08018dac
 801527c:	080151a9 	.word	0x080151a9

08015280 <__sfp>:
 8015280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015282:	4607      	mov	r7, r0
 8015284:	f7ff ffac 	bl	80151e0 <__sfp_lock_acquire>
 8015288:	4b1e      	ldr	r3, [pc, #120]	; (8015304 <__sfp+0x84>)
 801528a:	681e      	ldr	r6, [r3, #0]
 801528c:	69b3      	ldr	r3, [r6, #24]
 801528e:	b913      	cbnz	r3, 8015296 <__sfp+0x16>
 8015290:	4630      	mov	r0, r6
 8015292:	f7ff ffbd 	bl	8015210 <__sinit>
 8015296:	3648      	adds	r6, #72	; 0x48
 8015298:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801529c:	3b01      	subs	r3, #1
 801529e:	d503      	bpl.n	80152a8 <__sfp+0x28>
 80152a0:	6833      	ldr	r3, [r6, #0]
 80152a2:	b30b      	cbz	r3, 80152e8 <__sfp+0x68>
 80152a4:	6836      	ldr	r6, [r6, #0]
 80152a6:	e7f7      	b.n	8015298 <__sfp+0x18>
 80152a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80152ac:	b9d5      	cbnz	r5, 80152e4 <__sfp+0x64>
 80152ae:	4b16      	ldr	r3, [pc, #88]	; (8015308 <__sfp+0x88>)
 80152b0:	60e3      	str	r3, [r4, #12]
 80152b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80152b6:	6665      	str	r5, [r4, #100]	; 0x64
 80152b8:	f000 f886 	bl	80153c8 <__retarget_lock_init_recursive>
 80152bc:	f7ff ff96 	bl	80151ec <__sfp_lock_release>
 80152c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80152c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80152c8:	6025      	str	r5, [r4, #0]
 80152ca:	61a5      	str	r5, [r4, #24]
 80152cc:	2208      	movs	r2, #8
 80152ce:	4629      	mov	r1, r5
 80152d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80152d4:	f000 f89a 	bl	801540c <memset>
 80152d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80152dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80152e0:	4620      	mov	r0, r4
 80152e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152e4:	3468      	adds	r4, #104	; 0x68
 80152e6:	e7d9      	b.n	801529c <__sfp+0x1c>
 80152e8:	2104      	movs	r1, #4
 80152ea:	4638      	mov	r0, r7
 80152ec:	f7ff ff62 	bl	80151b4 <__sfmoreglue>
 80152f0:	4604      	mov	r4, r0
 80152f2:	6030      	str	r0, [r6, #0]
 80152f4:	2800      	cmp	r0, #0
 80152f6:	d1d5      	bne.n	80152a4 <__sfp+0x24>
 80152f8:	f7ff ff78 	bl	80151ec <__sfp_lock_release>
 80152fc:	230c      	movs	r3, #12
 80152fe:	603b      	str	r3, [r7, #0]
 8015300:	e7ee      	b.n	80152e0 <__sfp+0x60>
 8015302:	bf00      	nop
 8015304:	08018dac 	.word	0x08018dac
 8015308:	ffff0001 	.word	0xffff0001

0801530c <_fwalk_reent>:
 801530c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015310:	4606      	mov	r6, r0
 8015312:	4688      	mov	r8, r1
 8015314:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015318:	2700      	movs	r7, #0
 801531a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801531e:	f1b9 0901 	subs.w	r9, r9, #1
 8015322:	d505      	bpl.n	8015330 <_fwalk_reent+0x24>
 8015324:	6824      	ldr	r4, [r4, #0]
 8015326:	2c00      	cmp	r4, #0
 8015328:	d1f7      	bne.n	801531a <_fwalk_reent+0xe>
 801532a:	4638      	mov	r0, r7
 801532c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015330:	89ab      	ldrh	r3, [r5, #12]
 8015332:	2b01      	cmp	r3, #1
 8015334:	d907      	bls.n	8015346 <_fwalk_reent+0x3a>
 8015336:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801533a:	3301      	adds	r3, #1
 801533c:	d003      	beq.n	8015346 <_fwalk_reent+0x3a>
 801533e:	4629      	mov	r1, r5
 8015340:	4630      	mov	r0, r6
 8015342:	47c0      	blx	r8
 8015344:	4307      	orrs	r7, r0
 8015346:	3568      	adds	r5, #104	; 0x68
 8015348:	e7e9      	b.n	801531e <_fwalk_reent+0x12>
	...

0801534c <__libc_init_array>:
 801534c:	b570      	push	{r4, r5, r6, lr}
 801534e:	4d0d      	ldr	r5, [pc, #52]	; (8015384 <__libc_init_array+0x38>)
 8015350:	4c0d      	ldr	r4, [pc, #52]	; (8015388 <__libc_init_array+0x3c>)
 8015352:	1b64      	subs	r4, r4, r5
 8015354:	10a4      	asrs	r4, r4, #2
 8015356:	2600      	movs	r6, #0
 8015358:	42a6      	cmp	r6, r4
 801535a:	d109      	bne.n	8015370 <__libc_init_array+0x24>
 801535c:	4d0b      	ldr	r5, [pc, #44]	; (801538c <__libc_init_array+0x40>)
 801535e:	4c0c      	ldr	r4, [pc, #48]	; (8015390 <__libc_init_array+0x44>)
 8015360:	f002 fea4 	bl	80180ac <_init>
 8015364:	1b64      	subs	r4, r4, r5
 8015366:	10a4      	asrs	r4, r4, #2
 8015368:	2600      	movs	r6, #0
 801536a:	42a6      	cmp	r6, r4
 801536c:	d105      	bne.n	801537a <__libc_init_array+0x2e>
 801536e:	bd70      	pop	{r4, r5, r6, pc}
 8015370:	f855 3b04 	ldr.w	r3, [r5], #4
 8015374:	4798      	blx	r3
 8015376:	3601      	adds	r6, #1
 8015378:	e7ee      	b.n	8015358 <__libc_init_array+0xc>
 801537a:	f855 3b04 	ldr.w	r3, [r5], #4
 801537e:	4798      	blx	r3
 8015380:	3601      	adds	r6, #1
 8015382:	e7f2      	b.n	801536a <__libc_init_array+0x1e>
 8015384:	0801915c 	.word	0x0801915c
 8015388:	0801915c 	.word	0x0801915c
 801538c:	0801915c 	.word	0x0801915c
 8015390:	08019160 	.word	0x08019160

08015394 <__itoa>:
 8015394:	1e93      	subs	r3, r2, #2
 8015396:	2b22      	cmp	r3, #34	; 0x22
 8015398:	b510      	push	{r4, lr}
 801539a:	460c      	mov	r4, r1
 801539c:	d904      	bls.n	80153a8 <__itoa+0x14>
 801539e:	2300      	movs	r3, #0
 80153a0:	700b      	strb	r3, [r1, #0]
 80153a2:	461c      	mov	r4, r3
 80153a4:	4620      	mov	r0, r4
 80153a6:	bd10      	pop	{r4, pc}
 80153a8:	2a0a      	cmp	r2, #10
 80153aa:	d109      	bne.n	80153c0 <__itoa+0x2c>
 80153ac:	2800      	cmp	r0, #0
 80153ae:	da07      	bge.n	80153c0 <__itoa+0x2c>
 80153b0:	232d      	movs	r3, #45	; 0x2d
 80153b2:	700b      	strb	r3, [r1, #0]
 80153b4:	4240      	negs	r0, r0
 80153b6:	2101      	movs	r1, #1
 80153b8:	4421      	add	r1, r4
 80153ba:	f000 fe37 	bl	801602c <__utoa>
 80153be:	e7f1      	b.n	80153a4 <__itoa+0x10>
 80153c0:	2100      	movs	r1, #0
 80153c2:	e7f9      	b.n	80153b8 <__itoa+0x24>

080153c4 <itoa>:
 80153c4:	f7ff bfe6 	b.w	8015394 <__itoa>

080153c8 <__retarget_lock_init_recursive>:
 80153c8:	4770      	bx	lr

080153ca <__retarget_lock_acquire_recursive>:
 80153ca:	4770      	bx	lr

080153cc <__retarget_lock_release_recursive>:
 80153cc:	4770      	bx	lr
	...

080153d0 <malloc>:
 80153d0:	4b02      	ldr	r3, [pc, #8]	; (80153dc <malloc+0xc>)
 80153d2:	4601      	mov	r1, r0
 80153d4:	6818      	ldr	r0, [r3, #0]
 80153d6:	f000 b871 	b.w	80154bc <_malloc_r>
 80153da:	bf00      	nop
 80153dc:	2000019c 	.word	0x2000019c

080153e0 <free>:
 80153e0:	4b02      	ldr	r3, [pc, #8]	; (80153ec <free+0xc>)
 80153e2:	4601      	mov	r1, r0
 80153e4:	6818      	ldr	r0, [r3, #0]
 80153e6:	f000 b819 	b.w	801541c <_free_r>
 80153ea:	bf00      	nop
 80153ec:	2000019c 	.word	0x2000019c

080153f0 <memcpy>:
 80153f0:	440a      	add	r2, r1
 80153f2:	4291      	cmp	r1, r2
 80153f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80153f8:	d100      	bne.n	80153fc <memcpy+0xc>
 80153fa:	4770      	bx	lr
 80153fc:	b510      	push	{r4, lr}
 80153fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015406:	4291      	cmp	r1, r2
 8015408:	d1f9      	bne.n	80153fe <memcpy+0xe>
 801540a:	bd10      	pop	{r4, pc}

0801540c <memset>:
 801540c:	4402      	add	r2, r0
 801540e:	4603      	mov	r3, r0
 8015410:	4293      	cmp	r3, r2
 8015412:	d100      	bne.n	8015416 <memset+0xa>
 8015414:	4770      	bx	lr
 8015416:	f803 1b01 	strb.w	r1, [r3], #1
 801541a:	e7f9      	b.n	8015410 <memset+0x4>

0801541c <_free_r>:
 801541c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801541e:	2900      	cmp	r1, #0
 8015420:	d048      	beq.n	80154b4 <_free_r+0x98>
 8015422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015426:	9001      	str	r0, [sp, #4]
 8015428:	2b00      	cmp	r3, #0
 801542a:	f1a1 0404 	sub.w	r4, r1, #4
 801542e:	bfb8      	it	lt
 8015430:	18e4      	addlt	r4, r4, r3
 8015432:	f001 fdb1 	bl	8016f98 <__malloc_lock>
 8015436:	4a20      	ldr	r2, [pc, #128]	; (80154b8 <_free_r+0x9c>)
 8015438:	9801      	ldr	r0, [sp, #4]
 801543a:	6813      	ldr	r3, [r2, #0]
 801543c:	4615      	mov	r5, r2
 801543e:	b933      	cbnz	r3, 801544e <_free_r+0x32>
 8015440:	6063      	str	r3, [r4, #4]
 8015442:	6014      	str	r4, [r2, #0]
 8015444:	b003      	add	sp, #12
 8015446:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801544a:	f001 bdab 	b.w	8016fa4 <__malloc_unlock>
 801544e:	42a3      	cmp	r3, r4
 8015450:	d90b      	bls.n	801546a <_free_r+0x4e>
 8015452:	6821      	ldr	r1, [r4, #0]
 8015454:	1862      	adds	r2, r4, r1
 8015456:	4293      	cmp	r3, r2
 8015458:	bf04      	itt	eq
 801545a:	681a      	ldreq	r2, [r3, #0]
 801545c:	685b      	ldreq	r3, [r3, #4]
 801545e:	6063      	str	r3, [r4, #4]
 8015460:	bf04      	itt	eq
 8015462:	1852      	addeq	r2, r2, r1
 8015464:	6022      	streq	r2, [r4, #0]
 8015466:	602c      	str	r4, [r5, #0]
 8015468:	e7ec      	b.n	8015444 <_free_r+0x28>
 801546a:	461a      	mov	r2, r3
 801546c:	685b      	ldr	r3, [r3, #4]
 801546e:	b10b      	cbz	r3, 8015474 <_free_r+0x58>
 8015470:	42a3      	cmp	r3, r4
 8015472:	d9fa      	bls.n	801546a <_free_r+0x4e>
 8015474:	6811      	ldr	r1, [r2, #0]
 8015476:	1855      	adds	r5, r2, r1
 8015478:	42a5      	cmp	r5, r4
 801547a:	d10b      	bne.n	8015494 <_free_r+0x78>
 801547c:	6824      	ldr	r4, [r4, #0]
 801547e:	4421      	add	r1, r4
 8015480:	1854      	adds	r4, r2, r1
 8015482:	42a3      	cmp	r3, r4
 8015484:	6011      	str	r1, [r2, #0]
 8015486:	d1dd      	bne.n	8015444 <_free_r+0x28>
 8015488:	681c      	ldr	r4, [r3, #0]
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	6053      	str	r3, [r2, #4]
 801548e:	4421      	add	r1, r4
 8015490:	6011      	str	r1, [r2, #0]
 8015492:	e7d7      	b.n	8015444 <_free_r+0x28>
 8015494:	d902      	bls.n	801549c <_free_r+0x80>
 8015496:	230c      	movs	r3, #12
 8015498:	6003      	str	r3, [r0, #0]
 801549a:	e7d3      	b.n	8015444 <_free_r+0x28>
 801549c:	6825      	ldr	r5, [r4, #0]
 801549e:	1961      	adds	r1, r4, r5
 80154a0:	428b      	cmp	r3, r1
 80154a2:	bf04      	itt	eq
 80154a4:	6819      	ldreq	r1, [r3, #0]
 80154a6:	685b      	ldreq	r3, [r3, #4]
 80154a8:	6063      	str	r3, [r4, #4]
 80154aa:	bf04      	itt	eq
 80154ac:	1949      	addeq	r1, r1, r5
 80154ae:	6021      	streq	r1, [r4, #0]
 80154b0:	6054      	str	r4, [r2, #4]
 80154b2:	e7c7      	b.n	8015444 <_free_r+0x28>
 80154b4:	b003      	add	sp, #12
 80154b6:	bd30      	pop	{r4, r5, pc}
 80154b8:	20005e10 	.word	0x20005e10

080154bc <_malloc_r>:
 80154bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154be:	1ccd      	adds	r5, r1, #3
 80154c0:	f025 0503 	bic.w	r5, r5, #3
 80154c4:	3508      	adds	r5, #8
 80154c6:	2d0c      	cmp	r5, #12
 80154c8:	bf38      	it	cc
 80154ca:	250c      	movcc	r5, #12
 80154cc:	2d00      	cmp	r5, #0
 80154ce:	4606      	mov	r6, r0
 80154d0:	db01      	blt.n	80154d6 <_malloc_r+0x1a>
 80154d2:	42a9      	cmp	r1, r5
 80154d4:	d903      	bls.n	80154de <_malloc_r+0x22>
 80154d6:	230c      	movs	r3, #12
 80154d8:	6033      	str	r3, [r6, #0]
 80154da:	2000      	movs	r0, #0
 80154dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154de:	f001 fd5b 	bl	8016f98 <__malloc_lock>
 80154e2:	4921      	ldr	r1, [pc, #132]	; (8015568 <_malloc_r+0xac>)
 80154e4:	680a      	ldr	r2, [r1, #0]
 80154e6:	4614      	mov	r4, r2
 80154e8:	b99c      	cbnz	r4, 8015512 <_malloc_r+0x56>
 80154ea:	4f20      	ldr	r7, [pc, #128]	; (801556c <_malloc_r+0xb0>)
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	b923      	cbnz	r3, 80154fa <_malloc_r+0x3e>
 80154f0:	4621      	mov	r1, r4
 80154f2:	4630      	mov	r0, r6
 80154f4:	f000 fd10 	bl	8015f18 <_sbrk_r>
 80154f8:	6038      	str	r0, [r7, #0]
 80154fa:	4629      	mov	r1, r5
 80154fc:	4630      	mov	r0, r6
 80154fe:	f000 fd0b 	bl	8015f18 <_sbrk_r>
 8015502:	1c43      	adds	r3, r0, #1
 8015504:	d123      	bne.n	801554e <_malloc_r+0x92>
 8015506:	230c      	movs	r3, #12
 8015508:	6033      	str	r3, [r6, #0]
 801550a:	4630      	mov	r0, r6
 801550c:	f001 fd4a 	bl	8016fa4 <__malloc_unlock>
 8015510:	e7e3      	b.n	80154da <_malloc_r+0x1e>
 8015512:	6823      	ldr	r3, [r4, #0]
 8015514:	1b5b      	subs	r3, r3, r5
 8015516:	d417      	bmi.n	8015548 <_malloc_r+0x8c>
 8015518:	2b0b      	cmp	r3, #11
 801551a:	d903      	bls.n	8015524 <_malloc_r+0x68>
 801551c:	6023      	str	r3, [r4, #0]
 801551e:	441c      	add	r4, r3
 8015520:	6025      	str	r5, [r4, #0]
 8015522:	e004      	b.n	801552e <_malloc_r+0x72>
 8015524:	6863      	ldr	r3, [r4, #4]
 8015526:	42a2      	cmp	r2, r4
 8015528:	bf0c      	ite	eq
 801552a:	600b      	streq	r3, [r1, #0]
 801552c:	6053      	strne	r3, [r2, #4]
 801552e:	4630      	mov	r0, r6
 8015530:	f001 fd38 	bl	8016fa4 <__malloc_unlock>
 8015534:	f104 000b 	add.w	r0, r4, #11
 8015538:	1d23      	adds	r3, r4, #4
 801553a:	f020 0007 	bic.w	r0, r0, #7
 801553e:	1ac2      	subs	r2, r0, r3
 8015540:	d0cc      	beq.n	80154dc <_malloc_r+0x20>
 8015542:	1a1b      	subs	r3, r3, r0
 8015544:	50a3      	str	r3, [r4, r2]
 8015546:	e7c9      	b.n	80154dc <_malloc_r+0x20>
 8015548:	4622      	mov	r2, r4
 801554a:	6864      	ldr	r4, [r4, #4]
 801554c:	e7cc      	b.n	80154e8 <_malloc_r+0x2c>
 801554e:	1cc4      	adds	r4, r0, #3
 8015550:	f024 0403 	bic.w	r4, r4, #3
 8015554:	42a0      	cmp	r0, r4
 8015556:	d0e3      	beq.n	8015520 <_malloc_r+0x64>
 8015558:	1a21      	subs	r1, r4, r0
 801555a:	4630      	mov	r0, r6
 801555c:	f000 fcdc 	bl	8015f18 <_sbrk_r>
 8015560:	3001      	adds	r0, #1
 8015562:	d1dd      	bne.n	8015520 <_malloc_r+0x64>
 8015564:	e7cf      	b.n	8015506 <_malloc_r+0x4a>
 8015566:	bf00      	nop
 8015568:	20005e10 	.word	0x20005e10
 801556c:	20005e14 	.word	0x20005e14

08015570 <__cvt>:
 8015570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015574:	ec55 4b10 	vmov	r4, r5, d0
 8015578:	2d00      	cmp	r5, #0
 801557a:	460e      	mov	r6, r1
 801557c:	4619      	mov	r1, r3
 801557e:	462b      	mov	r3, r5
 8015580:	bfbb      	ittet	lt
 8015582:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015586:	461d      	movlt	r5, r3
 8015588:	2300      	movge	r3, #0
 801558a:	232d      	movlt	r3, #45	; 0x2d
 801558c:	700b      	strb	r3, [r1, #0]
 801558e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015590:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015594:	4691      	mov	r9, r2
 8015596:	f023 0820 	bic.w	r8, r3, #32
 801559a:	bfbc      	itt	lt
 801559c:	4622      	movlt	r2, r4
 801559e:	4614      	movlt	r4, r2
 80155a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80155a4:	d005      	beq.n	80155b2 <__cvt+0x42>
 80155a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80155aa:	d100      	bne.n	80155ae <__cvt+0x3e>
 80155ac:	3601      	adds	r6, #1
 80155ae:	2102      	movs	r1, #2
 80155b0:	e000      	b.n	80155b4 <__cvt+0x44>
 80155b2:	2103      	movs	r1, #3
 80155b4:	ab03      	add	r3, sp, #12
 80155b6:	9301      	str	r3, [sp, #4]
 80155b8:	ab02      	add	r3, sp, #8
 80155ba:	9300      	str	r3, [sp, #0]
 80155bc:	ec45 4b10 	vmov	d0, r4, r5
 80155c0:	4653      	mov	r3, sl
 80155c2:	4632      	mov	r2, r6
 80155c4:	f000 fe24 	bl	8016210 <_dtoa_r>
 80155c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80155cc:	4607      	mov	r7, r0
 80155ce:	d102      	bne.n	80155d6 <__cvt+0x66>
 80155d0:	f019 0f01 	tst.w	r9, #1
 80155d4:	d022      	beq.n	801561c <__cvt+0xac>
 80155d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80155da:	eb07 0906 	add.w	r9, r7, r6
 80155de:	d110      	bne.n	8015602 <__cvt+0x92>
 80155e0:	783b      	ldrb	r3, [r7, #0]
 80155e2:	2b30      	cmp	r3, #48	; 0x30
 80155e4:	d10a      	bne.n	80155fc <__cvt+0x8c>
 80155e6:	2200      	movs	r2, #0
 80155e8:	2300      	movs	r3, #0
 80155ea:	4620      	mov	r0, r4
 80155ec:	4629      	mov	r1, r5
 80155ee:	f7eb fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80155f2:	b918      	cbnz	r0, 80155fc <__cvt+0x8c>
 80155f4:	f1c6 0601 	rsb	r6, r6, #1
 80155f8:	f8ca 6000 	str.w	r6, [sl]
 80155fc:	f8da 3000 	ldr.w	r3, [sl]
 8015600:	4499      	add	r9, r3
 8015602:	2200      	movs	r2, #0
 8015604:	2300      	movs	r3, #0
 8015606:	4620      	mov	r0, r4
 8015608:	4629      	mov	r1, r5
 801560a:	f7eb fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 801560e:	b108      	cbz	r0, 8015614 <__cvt+0xa4>
 8015610:	f8cd 900c 	str.w	r9, [sp, #12]
 8015614:	2230      	movs	r2, #48	; 0x30
 8015616:	9b03      	ldr	r3, [sp, #12]
 8015618:	454b      	cmp	r3, r9
 801561a:	d307      	bcc.n	801562c <__cvt+0xbc>
 801561c:	9b03      	ldr	r3, [sp, #12]
 801561e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015620:	1bdb      	subs	r3, r3, r7
 8015622:	4638      	mov	r0, r7
 8015624:	6013      	str	r3, [r2, #0]
 8015626:	b004      	add	sp, #16
 8015628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801562c:	1c59      	adds	r1, r3, #1
 801562e:	9103      	str	r1, [sp, #12]
 8015630:	701a      	strb	r2, [r3, #0]
 8015632:	e7f0      	b.n	8015616 <__cvt+0xa6>

08015634 <__exponent>:
 8015634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015636:	4603      	mov	r3, r0
 8015638:	2900      	cmp	r1, #0
 801563a:	bfb8      	it	lt
 801563c:	4249      	neglt	r1, r1
 801563e:	f803 2b02 	strb.w	r2, [r3], #2
 8015642:	bfb4      	ite	lt
 8015644:	222d      	movlt	r2, #45	; 0x2d
 8015646:	222b      	movge	r2, #43	; 0x2b
 8015648:	2909      	cmp	r1, #9
 801564a:	7042      	strb	r2, [r0, #1]
 801564c:	dd2a      	ble.n	80156a4 <__exponent+0x70>
 801564e:	f10d 0407 	add.w	r4, sp, #7
 8015652:	46a4      	mov	ip, r4
 8015654:	270a      	movs	r7, #10
 8015656:	46a6      	mov	lr, r4
 8015658:	460a      	mov	r2, r1
 801565a:	fb91 f6f7 	sdiv	r6, r1, r7
 801565e:	fb07 1516 	mls	r5, r7, r6, r1
 8015662:	3530      	adds	r5, #48	; 0x30
 8015664:	2a63      	cmp	r2, #99	; 0x63
 8015666:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801566a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801566e:	4631      	mov	r1, r6
 8015670:	dcf1      	bgt.n	8015656 <__exponent+0x22>
 8015672:	3130      	adds	r1, #48	; 0x30
 8015674:	f1ae 0502 	sub.w	r5, lr, #2
 8015678:	f804 1c01 	strb.w	r1, [r4, #-1]
 801567c:	1c44      	adds	r4, r0, #1
 801567e:	4629      	mov	r1, r5
 8015680:	4561      	cmp	r1, ip
 8015682:	d30a      	bcc.n	801569a <__exponent+0x66>
 8015684:	f10d 0209 	add.w	r2, sp, #9
 8015688:	eba2 020e 	sub.w	r2, r2, lr
 801568c:	4565      	cmp	r5, ip
 801568e:	bf88      	it	hi
 8015690:	2200      	movhi	r2, #0
 8015692:	4413      	add	r3, r2
 8015694:	1a18      	subs	r0, r3, r0
 8015696:	b003      	add	sp, #12
 8015698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801569a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801569e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80156a2:	e7ed      	b.n	8015680 <__exponent+0x4c>
 80156a4:	2330      	movs	r3, #48	; 0x30
 80156a6:	3130      	adds	r1, #48	; 0x30
 80156a8:	7083      	strb	r3, [r0, #2]
 80156aa:	70c1      	strb	r1, [r0, #3]
 80156ac:	1d03      	adds	r3, r0, #4
 80156ae:	e7f1      	b.n	8015694 <__exponent+0x60>

080156b0 <_printf_float>:
 80156b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156b4:	ed2d 8b02 	vpush	{d8}
 80156b8:	b08d      	sub	sp, #52	; 0x34
 80156ba:	460c      	mov	r4, r1
 80156bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80156c0:	4616      	mov	r6, r2
 80156c2:	461f      	mov	r7, r3
 80156c4:	4605      	mov	r5, r0
 80156c6:	f001 fc51 	bl	8016f6c <_localeconv_r>
 80156ca:	f8d0 a000 	ldr.w	sl, [r0]
 80156ce:	4650      	mov	r0, sl
 80156d0:	f7ea fd7e 	bl	80001d0 <strlen>
 80156d4:	2300      	movs	r3, #0
 80156d6:	930a      	str	r3, [sp, #40]	; 0x28
 80156d8:	6823      	ldr	r3, [r4, #0]
 80156da:	9305      	str	r3, [sp, #20]
 80156dc:	f8d8 3000 	ldr.w	r3, [r8]
 80156e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80156e4:	3307      	adds	r3, #7
 80156e6:	f023 0307 	bic.w	r3, r3, #7
 80156ea:	f103 0208 	add.w	r2, r3, #8
 80156ee:	f8c8 2000 	str.w	r2, [r8]
 80156f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80156fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80156fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015702:	9307      	str	r3, [sp, #28]
 8015704:	f8cd 8018 	str.w	r8, [sp, #24]
 8015708:	ee08 0a10 	vmov	s16, r0
 801570c:	4b9f      	ldr	r3, [pc, #636]	; (801598c <_printf_float+0x2dc>)
 801570e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015716:	f7eb fa09 	bl	8000b2c <__aeabi_dcmpun>
 801571a:	bb88      	cbnz	r0, 8015780 <_printf_float+0xd0>
 801571c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015720:	4b9a      	ldr	r3, [pc, #616]	; (801598c <_printf_float+0x2dc>)
 8015722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015726:	f7eb f9e3 	bl	8000af0 <__aeabi_dcmple>
 801572a:	bb48      	cbnz	r0, 8015780 <_printf_float+0xd0>
 801572c:	2200      	movs	r2, #0
 801572e:	2300      	movs	r3, #0
 8015730:	4640      	mov	r0, r8
 8015732:	4649      	mov	r1, r9
 8015734:	f7eb f9d2 	bl	8000adc <__aeabi_dcmplt>
 8015738:	b110      	cbz	r0, 8015740 <_printf_float+0x90>
 801573a:	232d      	movs	r3, #45	; 0x2d
 801573c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015740:	4b93      	ldr	r3, [pc, #588]	; (8015990 <_printf_float+0x2e0>)
 8015742:	4894      	ldr	r0, [pc, #592]	; (8015994 <_printf_float+0x2e4>)
 8015744:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015748:	bf94      	ite	ls
 801574a:	4698      	movls	r8, r3
 801574c:	4680      	movhi	r8, r0
 801574e:	2303      	movs	r3, #3
 8015750:	6123      	str	r3, [r4, #16]
 8015752:	9b05      	ldr	r3, [sp, #20]
 8015754:	f023 0204 	bic.w	r2, r3, #4
 8015758:	6022      	str	r2, [r4, #0]
 801575a:	f04f 0900 	mov.w	r9, #0
 801575e:	9700      	str	r7, [sp, #0]
 8015760:	4633      	mov	r3, r6
 8015762:	aa0b      	add	r2, sp, #44	; 0x2c
 8015764:	4621      	mov	r1, r4
 8015766:	4628      	mov	r0, r5
 8015768:	f000 f9d8 	bl	8015b1c <_printf_common>
 801576c:	3001      	adds	r0, #1
 801576e:	f040 8090 	bne.w	8015892 <_printf_float+0x1e2>
 8015772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015776:	b00d      	add	sp, #52	; 0x34
 8015778:	ecbd 8b02 	vpop	{d8}
 801577c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015780:	4642      	mov	r2, r8
 8015782:	464b      	mov	r3, r9
 8015784:	4640      	mov	r0, r8
 8015786:	4649      	mov	r1, r9
 8015788:	f7eb f9d0 	bl	8000b2c <__aeabi_dcmpun>
 801578c:	b140      	cbz	r0, 80157a0 <_printf_float+0xf0>
 801578e:	464b      	mov	r3, r9
 8015790:	2b00      	cmp	r3, #0
 8015792:	bfbc      	itt	lt
 8015794:	232d      	movlt	r3, #45	; 0x2d
 8015796:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801579a:	487f      	ldr	r0, [pc, #508]	; (8015998 <_printf_float+0x2e8>)
 801579c:	4b7f      	ldr	r3, [pc, #508]	; (801599c <_printf_float+0x2ec>)
 801579e:	e7d1      	b.n	8015744 <_printf_float+0x94>
 80157a0:	6863      	ldr	r3, [r4, #4]
 80157a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80157a6:	9206      	str	r2, [sp, #24]
 80157a8:	1c5a      	adds	r2, r3, #1
 80157aa:	d13f      	bne.n	801582c <_printf_float+0x17c>
 80157ac:	2306      	movs	r3, #6
 80157ae:	6063      	str	r3, [r4, #4]
 80157b0:	9b05      	ldr	r3, [sp, #20]
 80157b2:	6861      	ldr	r1, [r4, #4]
 80157b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80157b8:	2300      	movs	r3, #0
 80157ba:	9303      	str	r3, [sp, #12]
 80157bc:	ab0a      	add	r3, sp, #40	; 0x28
 80157be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80157c2:	ab09      	add	r3, sp, #36	; 0x24
 80157c4:	ec49 8b10 	vmov	d0, r8, r9
 80157c8:	9300      	str	r3, [sp, #0]
 80157ca:	6022      	str	r2, [r4, #0]
 80157cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80157d0:	4628      	mov	r0, r5
 80157d2:	f7ff fecd 	bl	8015570 <__cvt>
 80157d6:	9b06      	ldr	r3, [sp, #24]
 80157d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157da:	2b47      	cmp	r3, #71	; 0x47
 80157dc:	4680      	mov	r8, r0
 80157de:	d108      	bne.n	80157f2 <_printf_float+0x142>
 80157e0:	1cc8      	adds	r0, r1, #3
 80157e2:	db02      	blt.n	80157ea <_printf_float+0x13a>
 80157e4:	6863      	ldr	r3, [r4, #4]
 80157e6:	4299      	cmp	r1, r3
 80157e8:	dd41      	ble.n	801586e <_printf_float+0x1be>
 80157ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80157ee:	fa5f fb8b 	uxtb.w	fp, fp
 80157f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80157f6:	d820      	bhi.n	801583a <_printf_float+0x18a>
 80157f8:	3901      	subs	r1, #1
 80157fa:	465a      	mov	r2, fp
 80157fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015800:	9109      	str	r1, [sp, #36]	; 0x24
 8015802:	f7ff ff17 	bl	8015634 <__exponent>
 8015806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015808:	1813      	adds	r3, r2, r0
 801580a:	2a01      	cmp	r2, #1
 801580c:	4681      	mov	r9, r0
 801580e:	6123      	str	r3, [r4, #16]
 8015810:	dc02      	bgt.n	8015818 <_printf_float+0x168>
 8015812:	6822      	ldr	r2, [r4, #0]
 8015814:	07d2      	lsls	r2, r2, #31
 8015816:	d501      	bpl.n	801581c <_printf_float+0x16c>
 8015818:	3301      	adds	r3, #1
 801581a:	6123      	str	r3, [r4, #16]
 801581c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015820:	2b00      	cmp	r3, #0
 8015822:	d09c      	beq.n	801575e <_printf_float+0xae>
 8015824:	232d      	movs	r3, #45	; 0x2d
 8015826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801582a:	e798      	b.n	801575e <_printf_float+0xae>
 801582c:	9a06      	ldr	r2, [sp, #24]
 801582e:	2a47      	cmp	r2, #71	; 0x47
 8015830:	d1be      	bne.n	80157b0 <_printf_float+0x100>
 8015832:	2b00      	cmp	r3, #0
 8015834:	d1bc      	bne.n	80157b0 <_printf_float+0x100>
 8015836:	2301      	movs	r3, #1
 8015838:	e7b9      	b.n	80157ae <_printf_float+0xfe>
 801583a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801583e:	d118      	bne.n	8015872 <_printf_float+0x1c2>
 8015840:	2900      	cmp	r1, #0
 8015842:	6863      	ldr	r3, [r4, #4]
 8015844:	dd0b      	ble.n	801585e <_printf_float+0x1ae>
 8015846:	6121      	str	r1, [r4, #16]
 8015848:	b913      	cbnz	r3, 8015850 <_printf_float+0x1a0>
 801584a:	6822      	ldr	r2, [r4, #0]
 801584c:	07d0      	lsls	r0, r2, #31
 801584e:	d502      	bpl.n	8015856 <_printf_float+0x1a6>
 8015850:	3301      	adds	r3, #1
 8015852:	440b      	add	r3, r1
 8015854:	6123      	str	r3, [r4, #16]
 8015856:	65a1      	str	r1, [r4, #88]	; 0x58
 8015858:	f04f 0900 	mov.w	r9, #0
 801585c:	e7de      	b.n	801581c <_printf_float+0x16c>
 801585e:	b913      	cbnz	r3, 8015866 <_printf_float+0x1b6>
 8015860:	6822      	ldr	r2, [r4, #0]
 8015862:	07d2      	lsls	r2, r2, #31
 8015864:	d501      	bpl.n	801586a <_printf_float+0x1ba>
 8015866:	3302      	adds	r3, #2
 8015868:	e7f4      	b.n	8015854 <_printf_float+0x1a4>
 801586a:	2301      	movs	r3, #1
 801586c:	e7f2      	b.n	8015854 <_printf_float+0x1a4>
 801586e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015874:	4299      	cmp	r1, r3
 8015876:	db05      	blt.n	8015884 <_printf_float+0x1d4>
 8015878:	6823      	ldr	r3, [r4, #0]
 801587a:	6121      	str	r1, [r4, #16]
 801587c:	07d8      	lsls	r0, r3, #31
 801587e:	d5ea      	bpl.n	8015856 <_printf_float+0x1a6>
 8015880:	1c4b      	adds	r3, r1, #1
 8015882:	e7e7      	b.n	8015854 <_printf_float+0x1a4>
 8015884:	2900      	cmp	r1, #0
 8015886:	bfd4      	ite	le
 8015888:	f1c1 0202 	rsble	r2, r1, #2
 801588c:	2201      	movgt	r2, #1
 801588e:	4413      	add	r3, r2
 8015890:	e7e0      	b.n	8015854 <_printf_float+0x1a4>
 8015892:	6823      	ldr	r3, [r4, #0]
 8015894:	055a      	lsls	r2, r3, #21
 8015896:	d407      	bmi.n	80158a8 <_printf_float+0x1f8>
 8015898:	6923      	ldr	r3, [r4, #16]
 801589a:	4642      	mov	r2, r8
 801589c:	4631      	mov	r1, r6
 801589e:	4628      	mov	r0, r5
 80158a0:	47b8      	blx	r7
 80158a2:	3001      	adds	r0, #1
 80158a4:	d12c      	bne.n	8015900 <_printf_float+0x250>
 80158a6:	e764      	b.n	8015772 <_printf_float+0xc2>
 80158a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80158ac:	f240 80e0 	bls.w	8015a70 <_printf_float+0x3c0>
 80158b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80158b4:	2200      	movs	r2, #0
 80158b6:	2300      	movs	r3, #0
 80158b8:	f7eb f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80158bc:	2800      	cmp	r0, #0
 80158be:	d034      	beq.n	801592a <_printf_float+0x27a>
 80158c0:	4a37      	ldr	r2, [pc, #220]	; (80159a0 <_printf_float+0x2f0>)
 80158c2:	2301      	movs	r3, #1
 80158c4:	4631      	mov	r1, r6
 80158c6:	4628      	mov	r0, r5
 80158c8:	47b8      	blx	r7
 80158ca:	3001      	adds	r0, #1
 80158cc:	f43f af51 	beq.w	8015772 <_printf_float+0xc2>
 80158d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80158d4:	429a      	cmp	r2, r3
 80158d6:	db02      	blt.n	80158de <_printf_float+0x22e>
 80158d8:	6823      	ldr	r3, [r4, #0]
 80158da:	07d8      	lsls	r0, r3, #31
 80158dc:	d510      	bpl.n	8015900 <_printf_float+0x250>
 80158de:	ee18 3a10 	vmov	r3, s16
 80158e2:	4652      	mov	r2, sl
 80158e4:	4631      	mov	r1, r6
 80158e6:	4628      	mov	r0, r5
 80158e8:	47b8      	blx	r7
 80158ea:	3001      	adds	r0, #1
 80158ec:	f43f af41 	beq.w	8015772 <_printf_float+0xc2>
 80158f0:	f04f 0800 	mov.w	r8, #0
 80158f4:	f104 091a 	add.w	r9, r4, #26
 80158f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158fa:	3b01      	subs	r3, #1
 80158fc:	4543      	cmp	r3, r8
 80158fe:	dc09      	bgt.n	8015914 <_printf_float+0x264>
 8015900:	6823      	ldr	r3, [r4, #0]
 8015902:	079b      	lsls	r3, r3, #30
 8015904:	f100 8105 	bmi.w	8015b12 <_printf_float+0x462>
 8015908:	68e0      	ldr	r0, [r4, #12]
 801590a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801590c:	4298      	cmp	r0, r3
 801590e:	bfb8      	it	lt
 8015910:	4618      	movlt	r0, r3
 8015912:	e730      	b.n	8015776 <_printf_float+0xc6>
 8015914:	2301      	movs	r3, #1
 8015916:	464a      	mov	r2, r9
 8015918:	4631      	mov	r1, r6
 801591a:	4628      	mov	r0, r5
 801591c:	47b8      	blx	r7
 801591e:	3001      	adds	r0, #1
 8015920:	f43f af27 	beq.w	8015772 <_printf_float+0xc2>
 8015924:	f108 0801 	add.w	r8, r8, #1
 8015928:	e7e6      	b.n	80158f8 <_printf_float+0x248>
 801592a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801592c:	2b00      	cmp	r3, #0
 801592e:	dc39      	bgt.n	80159a4 <_printf_float+0x2f4>
 8015930:	4a1b      	ldr	r2, [pc, #108]	; (80159a0 <_printf_float+0x2f0>)
 8015932:	2301      	movs	r3, #1
 8015934:	4631      	mov	r1, r6
 8015936:	4628      	mov	r0, r5
 8015938:	47b8      	blx	r7
 801593a:	3001      	adds	r0, #1
 801593c:	f43f af19 	beq.w	8015772 <_printf_float+0xc2>
 8015940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015944:	4313      	orrs	r3, r2
 8015946:	d102      	bne.n	801594e <_printf_float+0x29e>
 8015948:	6823      	ldr	r3, [r4, #0]
 801594a:	07d9      	lsls	r1, r3, #31
 801594c:	d5d8      	bpl.n	8015900 <_printf_float+0x250>
 801594e:	ee18 3a10 	vmov	r3, s16
 8015952:	4652      	mov	r2, sl
 8015954:	4631      	mov	r1, r6
 8015956:	4628      	mov	r0, r5
 8015958:	47b8      	blx	r7
 801595a:	3001      	adds	r0, #1
 801595c:	f43f af09 	beq.w	8015772 <_printf_float+0xc2>
 8015960:	f04f 0900 	mov.w	r9, #0
 8015964:	f104 0a1a 	add.w	sl, r4, #26
 8015968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801596a:	425b      	negs	r3, r3
 801596c:	454b      	cmp	r3, r9
 801596e:	dc01      	bgt.n	8015974 <_printf_float+0x2c4>
 8015970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015972:	e792      	b.n	801589a <_printf_float+0x1ea>
 8015974:	2301      	movs	r3, #1
 8015976:	4652      	mov	r2, sl
 8015978:	4631      	mov	r1, r6
 801597a:	4628      	mov	r0, r5
 801597c:	47b8      	blx	r7
 801597e:	3001      	adds	r0, #1
 8015980:	f43f aef7 	beq.w	8015772 <_printf_float+0xc2>
 8015984:	f109 0901 	add.w	r9, r9, #1
 8015988:	e7ee      	b.n	8015968 <_printf_float+0x2b8>
 801598a:	bf00      	nop
 801598c:	7fefffff 	.word	0x7fefffff
 8015990:	08018db0 	.word	0x08018db0
 8015994:	08018db4 	.word	0x08018db4
 8015998:	08018dbc 	.word	0x08018dbc
 801599c:	08018db8 	.word	0x08018db8
 80159a0:	08018dc0 	.word	0x08018dc0
 80159a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80159a8:	429a      	cmp	r2, r3
 80159aa:	bfa8      	it	ge
 80159ac:	461a      	movge	r2, r3
 80159ae:	2a00      	cmp	r2, #0
 80159b0:	4691      	mov	r9, r2
 80159b2:	dc37      	bgt.n	8015a24 <_printf_float+0x374>
 80159b4:	f04f 0b00 	mov.w	fp, #0
 80159b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80159bc:	f104 021a 	add.w	r2, r4, #26
 80159c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80159c2:	9305      	str	r3, [sp, #20]
 80159c4:	eba3 0309 	sub.w	r3, r3, r9
 80159c8:	455b      	cmp	r3, fp
 80159ca:	dc33      	bgt.n	8015a34 <_printf_float+0x384>
 80159cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159d0:	429a      	cmp	r2, r3
 80159d2:	db3b      	blt.n	8015a4c <_printf_float+0x39c>
 80159d4:	6823      	ldr	r3, [r4, #0]
 80159d6:	07da      	lsls	r2, r3, #31
 80159d8:	d438      	bmi.n	8015a4c <_printf_float+0x39c>
 80159da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159dc:	9b05      	ldr	r3, [sp, #20]
 80159de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159e0:	1ad3      	subs	r3, r2, r3
 80159e2:	eba2 0901 	sub.w	r9, r2, r1
 80159e6:	4599      	cmp	r9, r3
 80159e8:	bfa8      	it	ge
 80159ea:	4699      	movge	r9, r3
 80159ec:	f1b9 0f00 	cmp.w	r9, #0
 80159f0:	dc35      	bgt.n	8015a5e <_printf_float+0x3ae>
 80159f2:	f04f 0800 	mov.w	r8, #0
 80159f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80159fa:	f104 0a1a 	add.w	sl, r4, #26
 80159fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a02:	1a9b      	subs	r3, r3, r2
 8015a04:	eba3 0309 	sub.w	r3, r3, r9
 8015a08:	4543      	cmp	r3, r8
 8015a0a:	f77f af79 	ble.w	8015900 <_printf_float+0x250>
 8015a0e:	2301      	movs	r3, #1
 8015a10:	4652      	mov	r2, sl
 8015a12:	4631      	mov	r1, r6
 8015a14:	4628      	mov	r0, r5
 8015a16:	47b8      	blx	r7
 8015a18:	3001      	adds	r0, #1
 8015a1a:	f43f aeaa 	beq.w	8015772 <_printf_float+0xc2>
 8015a1e:	f108 0801 	add.w	r8, r8, #1
 8015a22:	e7ec      	b.n	80159fe <_printf_float+0x34e>
 8015a24:	4613      	mov	r3, r2
 8015a26:	4631      	mov	r1, r6
 8015a28:	4642      	mov	r2, r8
 8015a2a:	4628      	mov	r0, r5
 8015a2c:	47b8      	blx	r7
 8015a2e:	3001      	adds	r0, #1
 8015a30:	d1c0      	bne.n	80159b4 <_printf_float+0x304>
 8015a32:	e69e      	b.n	8015772 <_printf_float+0xc2>
 8015a34:	2301      	movs	r3, #1
 8015a36:	4631      	mov	r1, r6
 8015a38:	4628      	mov	r0, r5
 8015a3a:	9205      	str	r2, [sp, #20]
 8015a3c:	47b8      	blx	r7
 8015a3e:	3001      	adds	r0, #1
 8015a40:	f43f ae97 	beq.w	8015772 <_printf_float+0xc2>
 8015a44:	9a05      	ldr	r2, [sp, #20]
 8015a46:	f10b 0b01 	add.w	fp, fp, #1
 8015a4a:	e7b9      	b.n	80159c0 <_printf_float+0x310>
 8015a4c:	ee18 3a10 	vmov	r3, s16
 8015a50:	4652      	mov	r2, sl
 8015a52:	4631      	mov	r1, r6
 8015a54:	4628      	mov	r0, r5
 8015a56:	47b8      	blx	r7
 8015a58:	3001      	adds	r0, #1
 8015a5a:	d1be      	bne.n	80159da <_printf_float+0x32a>
 8015a5c:	e689      	b.n	8015772 <_printf_float+0xc2>
 8015a5e:	9a05      	ldr	r2, [sp, #20]
 8015a60:	464b      	mov	r3, r9
 8015a62:	4442      	add	r2, r8
 8015a64:	4631      	mov	r1, r6
 8015a66:	4628      	mov	r0, r5
 8015a68:	47b8      	blx	r7
 8015a6a:	3001      	adds	r0, #1
 8015a6c:	d1c1      	bne.n	80159f2 <_printf_float+0x342>
 8015a6e:	e680      	b.n	8015772 <_printf_float+0xc2>
 8015a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a72:	2a01      	cmp	r2, #1
 8015a74:	dc01      	bgt.n	8015a7a <_printf_float+0x3ca>
 8015a76:	07db      	lsls	r3, r3, #31
 8015a78:	d538      	bpl.n	8015aec <_printf_float+0x43c>
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	4642      	mov	r2, r8
 8015a7e:	4631      	mov	r1, r6
 8015a80:	4628      	mov	r0, r5
 8015a82:	47b8      	blx	r7
 8015a84:	3001      	adds	r0, #1
 8015a86:	f43f ae74 	beq.w	8015772 <_printf_float+0xc2>
 8015a8a:	ee18 3a10 	vmov	r3, s16
 8015a8e:	4652      	mov	r2, sl
 8015a90:	4631      	mov	r1, r6
 8015a92:	4628      	mov	r0, r5
 8015a94:	47b8      	blx	r7
 8015a96:	3001      	adds	r0, #1
 8015a98:	f43f ae6b 	beq.w	8015772 <_printf_float+0xc2>
 8015a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	f7eb f810 	bl	8000ac8 <__aeabi_dcmpeq>
 8015aa8:	b9d8      	cbnz	r0, 8015ae2 <_printf_float+0x432>
 8015aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015aac:	f108 0201 	add.w	r2, r8, #1
 8015ab0:	3b01      	subs	r3, #1
 8015ab2:	4631      	mov	r1, r6
 8015ab4:	4628      	mov	r0, r5
 8015ab6:	47b8      	blx	r7
 8015ab8:	3001      	adds	r0, #1
 8015aba:	d10e      	bne.n	8015ada <_printf_float+0x42a>
 8015abc:	e659      	b.n	8015772 <_printf_float+0xc2>
 8015abe:	2301      	movs	r3, #1
 8015ac0:	4652      	mov	r2, sl
 8015ac2:	4631      	mov	r1, r6
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	47b8      	blx	r7
 8015ac8:	3001      	adds	r0, #1
 8015aca:	f43f ae52 	beq.w	8015772 <_printf_float+0xc2>
 8015ace:	f108 0801 	add.w	r8, r8, #1
 8015ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ad4:	3b01      	subs	r3, #1
 8015ad6:	4543      	cmp	r3, r8
 8015ad8:	dcf1      	bgt.n	8015abe <_printf_float+0x40e>
 8015ada:	464b      	mov	r3, r9
 8015adc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015ae0:	e6dc      	b.n	801589c <_printf_float+0x1ec>
 8015ae2:	f04f 0800 	mov.w	r8, #0
 8015ae6:	f104 0a1a 	add.w	sl, r4, #26
 8015aea:	e7f2      	b.n	8015ad2 <_printf_float+0x422>
 8015aec:	2301      	movs	r3, #1
 8015aee:	4642      	mov	r2, r8
 8015af0:	e7df      	b.n	8015ab2 <_printf_float+0x402>
 8015af2:	2301      	movs	r3, #1
 8015af4:	464a      	mov	r2, r9
 8015af6:	4631      	mov	r1, r6
 8015af8:	4628      	mov	r0, r5
 8015afa:	47b8      	blx	r7
 8015afc:	3001      	adds	r0, #1
 8015afe:	f43f ae38 	beq.w	8015772 <_printf_float+0xc2>
 8015b02:	f108 0801 	add.w	r8, r8, #1
 8015b06:	68e3      	ldr	r3, [r4, #12]
 8015b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b0a:	1a5b      	subs	r3, r3, r1
 8015b0c:	4543      	cmp	r3, r8
 8015b0e:	dcf0      	bgt.n	8015af2 <_printf_float+0x442>
 8015b10:	e6fa      	b.n	8015908 <_printf_float+0x258>
 8015b12:	f04f 0800 	mov.w	r8, #0
 8015b16:	f104 0919 	add.w	r9, r4, #25
 8015b1a:	e7f4      	b.n	8015b06 <_printf_float+0x456>

08015b1c <_printf_common>:
 8015b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b20:	4616      	mov	r6, r2
 8015b22:	4699      	mov	r9, r3
 8015b24:	688a      	ldr	r2, [r1, #8]
 8015b26:	690b      	ldr	r3, [r1, #16]
 8015b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	bfb8      	it	lt
 8015b30:	4613      	movlt	r3, r2
 8015b32:	6033      	str	r3, [r6, #0]
 8015b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015b38:	4607      	mov	r7, r0
 8015b3a:	460c      	mov	r4, r1
 8015b3c:	b10a      	cbz	r2, 8015b42 <_printf_common+0x26>
 8015b3e:	3301      	adds	r3, #1
 8015b40:	6033      	str	r3, [r6, #0]
 8015b42:	6823      	ldr	r3, [r4, #0]
 8015b44:	0699      	lsls	r1, r3, #26
 8015b46:	bf42      	ittt	mi
 8015b48:	6833      	ldrmi	r3, [r6, #0]
 8015b4a:	3302      	addmi	r3, #2
 8015b4c:	6033      	strmi	r3, [r6, #0]
 8015b4e:	6825      	ldr	r5, [r4, #0]
 8015b50:	f015 0506 	ands.w	r5, r5, #6
 8015b54:	d106      	bne.n	8015b64 <_printf_common+0x48>
 8015b56:	f104 0a19 	add.w	sl, r4, #25
 8015b5a:	68e3      	ldr	r3, [r4, #12]
 8015b5c:	6832      	ldr	r2, [r6, #0]
 8015b5e:	1a9b      	subs	r3, r3, r2
 8015b60:	42ab      	cmp	r3, r5
 8015b62:	dc26      	bgt.n	8015bb2 <_printf_common+0x96>
 8015b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015b68:	1e13      	subs	r3, r2, #0
 8015b6a:	6822      	ldr	r2, [r4, #0]
 8015b6c:	bf18      	it	ne
 8015b6e:	2301      	movne	r3, #1
 8015b70:	0692      	lsls	r2, r2, #26
 8015b72:	d42b      	bmi.n	8015bcc <_printf_common+0xb0>
 8015b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b78:	4649      	mov	r1, r9
 8015b7a:	4638      	mov	r0, r7
 8015b7c:	47c0      	blx	r8
 8015b7e:	3001      	adds	r0, #1
 8015b80:	d01e      	beq.n	8015bc0 <_printf_common+0xa4>
 8015b82:	6823      	ldr	r3, [r4, #0]
 8015b84:	68e5      	ldr	r5, [r4, #12]
 8015b86:	6832      	ldr	r2, [r6, #0]
 8015b88:	f003 0306 	and.w	r3, r3, #6
 8015b8c:	2b04      	cmp	r3, #4
 8015b8e:	bf08      	it	eq
 8015b90:	1aad      	subeq	r5, r5, r2
 8015b92:	68a3      	ldr	r3, [r4, #8]
 8015b94:	6922      	ldr	r2, [r4, #16]
 8015b96:	bf0c      	ite	eq
 8015b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b9c:	2500      	movne	r5, #0
 8015b9e:	4293      	cmp	r3, r2
 8015ba0:	bfc4      	itt	gt
 8015ba2:	1a9b      	subgt	r3, r3, r2
 8015ba4:	18ed      	addgt	r5, r5, r3
 8015ba6:	2600      	movs	r6, #0
 8015ba8:	341a      	adds	r4, #26
 8015baa:	42b5      	cmp	r5, r6
 8015bac:	d11a      	bne.n	8015be4 <_printf_common+0xc8>
 8015bae:	2000      	movs	r0, #0
 8015bb0:	e008      	b.n	8015bc4 <_printf_common+0xa8>
 8015bb2:	2301      	movs	r3, #1
 8015bb4:	4652      	mov	r2, sl
 8015bb6:	4649      	mov	r1, r9
 8015bb8:	4638      	mov	r0, r7
 8015bba:	47c0      	blx	r8
 8015bbc:	3001      	adds	r0, #1
 8015bbe:	d103      	bne.n	8015bc8 <_printf_common+0xac>
 8015bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bc8:	3501      	adds	r5, #1
 8015bca:	e7c6      	b.n	8015b5a <_printf_common+0x3e>
 8015bcc:	18e1      	adds	r1, r4, r3
 8015bce:	1c5a      	adds	r2, r3, #1
 8015bd0:	2030      	movs	r0, #48	; 0x30
 8015bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015bd6:	4422      	add	r2, r4
 8015bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015be0:	3302      	adds	r3, #2
 8015be2:	e7c7      	b.n	8015b74 <_printf_common+0x58>
 8015be4:	2301      	movs	r3, #1
 8015be6:	4622      	mov	r2, r4
 8015be8:	4649      	mov	r1, r9
 8015bea:	4638      	mov	r0, r7
 8015bec:	47c0      	blx	r8
 8015bee:	3001      	adds	r0, #1
 8015bf0:	d0e6      	beq.n	8015bc0 <_printf_common+0xa4>
 8015bf2:	3601      	adds	r6, #1
 8015bf4:	e7d9      	b.n	8015baa <_printf_common+0x8e>
	...

08015bf8 <_printf_i>:
 8015bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015bfc:	460c      	mov	r4, r1
 8015bfe:	4691      	mov	r9, r2
 8015c00:	7e27      	ldrb	r7, [r4, #24]
 8015c02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c04:	2f78      	cmp	r7, #120	; 0x78
 8015c06:	4680      	mov	r8, r0
 8015c08:	469a      	mov	sl, r3
 8015c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c0e:	d807      	bhi.n	8015c20 <_printf_i+0x28>
 8015c10:	2f62      	cmp	r7, #98	; 0x62
 8015c12:	d80a      	bhi.n	8015c2a <_printf_i+0x32>
 8015c14:	2f00      	cmp	r7, #0
 8015c16:	f000 80d8 	beq.w	8015dca <_printf_i+0x1d2>
 8015c1a:	2f58      	cmp	r7, #88	; 0x58
 8015c1c:	f000 80a3 	beq.w	8015d66 <_printf_i+0x16e>
 8015c20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015c28:	e03a      	b.n	8015ca0 <_printf_i+0xa8>
 8015c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015c2e:	2b15      	cmp	r3, #21
 8015c30:	d8f6      	bhi.n	8015c20 <_printf_i+0x28>
 8015c32:	a001      	add	r0, pc, #4	; (adr r0, 8015c38 <_printf_i+0x40>)
 8015c34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015c38:	08015c91 	.word	0x08015c91
 8015c3c:	08015ca5 	.word	0x08015ca5
 8015c40:	08015c21 	.word	0x08015c21
 8015c44:	08015c21 	.word	0x08015c21
 8015c48:	08015c21 	.word	0x08015c21
 8015c4c:	08015c21 	.word	0x08015c21
 8015c50:	08015ca5 	.word	0x08015ca5
 8015c54:	08015c21 	.word	0x08015c21
 8015c58:	08015c21 	.word	0x08015c21
 8015c5c:	08015c21 	.word	0x08015c21
 8015c60:	08015c21 	.word	0x08015c21
 8015c64:	08015db1 	.word	0x08015db1
 8015c68:	08015cd5 	.word	0x08015cd5
 8015c6c:	08015d93 	.word	0x08015d93
 8015c70:	08015c21 	.word	0x08015c21
 8015c74:	08015c21 	.word	0x08015c21
 8015c78:	08015dd3 	.word	0x08015dd3
 8015c7c:	08015c21 	.word	0x08015c21
 8015c80:	08015cd5 	.word	0x08015cd5
 8015c84:	08015c21 	.word	0x08015c21
 8015c88:	08015c21 	.word	0x08015c21
 8015c8c:	08015d9b 	.word	0x08015d9b
 8015c90:	680b      	ldr	r3, [r1, #0]
 8015c92:	1d1a      	adds	r2, r3, #4
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	600a      	str	r2, [r1, #0]
 8015c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	e0a3      	b.n	8015dec <_printf_i+0x1f4>
 8015ca4:	6825      	ldr	r5, [r4, #0]
 8015ca6:	6808      	ldr	r0, [r1, #0]
 8015ca8:	062e      	lsls	r6, r5, #24
 8015caa:	f100 0304 	add.w	r3, r0, #4
 8015cae:	d50a      	bpl.n	8015cc6 <_printf_i+0xce>
 8015cb0:	6805      	ldr	r5, [r0, #0]
 8015cb2:	600b      	str	r3, [r1, #0]
 8015cb4:	2d00      	cmp	r5, #0
 8015cb6:	da03      	bge.n	8015cc0 <_printf_i+0xc8>
 8015cb8:	232d      	movs	r3, #45	; 0x2d
 8015cba:	426d      	negs	r5, r5
 8015cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015cc0:	485e      	ldr	r0, [pc, #376]	; (8015e3c <_printf_i+0x244>)
 8015cc2:	230a      	movs	r3, #10
 8015cc4:	e019      	b.n	8015cfa <_printf_i+0x102>
 8015cc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015cca:	6805      	ldr	r5, [r0, #0]
 8015ccc:	600b      	str	r3, [r1, #0]
 8015cce:	bf18      	it	ne
 8015cd0:	b22d      	sxthne	r5, r5
 8015cd2:	e7ef      	b.n	8015cb4 <_printf_i+0xbc>
 8015cd4:	680b      	ldr	r3, [r1, #0]
 8015cd6:	6825      	ldr	r5, [r4, #0]
 8015cd8:	1d18      	adds	r0, r3, #4
 8015cda:	6008      	str	r0, [r1, #0]
 8015cdc:	0628      	lsls	r0, r5, #24
 8015cde:	d501      	bpl.n	8015ce4 <_printf_i+0xec>
 8015ce0:	681d      	ldr	r5, [r3, #0]
 8015ce2:	e002      	b.n	8015cea <_printf_i+0xf2>
 8015ce4:	0669      	lsls	r1, r5, #25
 8015ce6:	d5fb      	bpl.n	8015ce0 <_printf_i+0xe8>
 8015ce8:	881d      	ldrh	r5, [r3, #0]
 8015cea:	4854      	ldr	r0, [pc, #336]	; (8015e3c <_printf_i+0x244>)
 8015cec:	2f6f      	cmp	r7, #111	; 0x6f
 8015cee:	bf0c      	ite	eq
 8015cf0:	2308      	moveq	r3, #8
 8015cf2:	230a      	movne	r3, #10
 8015cf4:	2100      	movs	r1, #0
 8015cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015cfa:	6866      	ldr	r6, [r4, #4]
 8015cfc:	60a6      	str	r6, [r4, #8]
 8015cfe:	2e00      	cmp	r6, #0
 8015d00:	bfa2      	ittt	ge
 8015d02:	6821      	ldrge	r1, [r4, #0]
 8015d04:	f021 0104 	bicge.w	r1, r1, #4
 8015d08:	6021      	strge	r1, [r4, #0]
 8015d0a:	b90d      	cbnz	r5, 8015d10 <_printf_i+0x118>
 8015d0c:	2e00      	cmp	r6, #0
 8015d0e:	d04d      	beq.n	8015dac <_printf_i+0x1b4>
 8015d10:	4616      	mov	r6, r2
 8015d12:	fbb5 f1f3 	udiv	r1, r5, r3
 8015d16:	fb03 5711 	mls	r7, r3, r1, r5
 8015d1a:	5dc7      	ldrb	r7, [r0, r7]
 8015d1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015d20:	462f      	mov	r7, r5
 8015d22:	42bb      	cmp	r3, r7
 8015d24:	460d      	mov	r5, r1
 8015d26:	d9f4      	bls.n	8015d12 <_printf_i+0x11a>
 8015d28:	2b08      	cmp	r3, #8
 8015d2a:	d10b      	bne.n	8015d44 <_printf_i+0x14c>
 8015d2c:	6823      	ldr	r3, [r4, #0]
 8015d2e:	07df      	lsls	r7, r3, #31
 8015d30:	d508      	bpl.n	8015d44 <_printf_i+0x14c>
 8015d32:	6923      	ldr	r3, [r4, #16]
 8015d34:	6861      	ldr	r1, [r4, #4]
 8015d36:	4299      	cmp	r1, r3
 8015d38:	bfde      	ittt	le
 8015d3a:	2330      	movle	r3, #48	; 0x30
 8015d3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015d40:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8015d44:	1b92      	subs	r2, r2, r6
 8015d46:	6122      	str	r2, [r4, #16]
 8015d48:	f8cd a000 	str.w	sl, [sp]
 8015d4c:	464b      	mov	r3, r9
 8015d4e:	aa03      	add	r2, sp, #12
 8015d50:	4621      	mov	r1, r4
 8015d52:	4640      	mov	r0, r8
 8015d54:	f7ff fee2 	bl	8015b1c <_printf_common>
 8015d58:	3001      	adds	r0, #1
 8015d5a:	d14c      	bne.n	8015df6 <_printf_i+0x1fe>
 8015d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d60:	b004      	add	sp, #16
 8015d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d66:	4835      	ldr	r0, [pc, #212]	; (8015e3c <_printf_i+0x244>)
 8015d68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015d6c:	6823      	ldr	r3, [r4, #0]
 8015d6e:	680e      	ldr	r6, [r1, #0]
 8015d70:	061f      	lsls	r7, r3, #24
 8015d72:	f856 5b04 	ldr.w	r5, [r6], #4
 8015d76:	600e      	str	r6, [r1, #0]
 8015d78:	d514      	bpl.n	8015da4 <_printf_i+0x1ac>
 8015d7a:	07d9      	lsls	r1, r3, #31
 8015d7c:	bf44      	itt	mi
 8015d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8015d82:	6023      	strmi	r3, [r4, #0]
 8015d84:	b91d      	cbnz	r5, 8015d8e <_printf_i+0x196>
 8015d86:	6823      	ldr	r3, [r4, #0]
 8015d88:	f023 0320 	bic.w	r3, r3, #32
 8015d8c:	6023      	str	r3, [r4, #0]
 8015d8e:	2310      	movs	r3, #16
 8015d90:	e7b0      	b.n	8015cf4 <_printf_i+0xfc>
 8015d92:	6823      	ldr	r3, [r4, #0]
 8015d94:	f043 0320 	orr.w	r3, r3, #32
 8015d98:	6023      	str	r3, [r4, #0]
 8015d9a:	2378      	movs	r3, #120	; 0x78
 8015d9c:	4828      	ldr	r0, [pc, #160]	; (8015e40 <_printf_i+0x248>)
 8015d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015da2:	e7e3      	b.n	8015d6c <_printf_i+0x174>
 8015da4:	065e      	lsls	r6, r3, #25
 8015da6:	bf48      	it	mi
 8015da8:	b2ad      	uxthmi	r5, r5
 8015daa:	e7e6      	b.n	8015d7a <_printf_i+0x182>
 8015dac:	4616      	mov	r6, r2
 8015dae:	e7bb      	b.n	8015d28 <_printf_i+0x130>
 8015db0:	680b      	ldr	r3, [r1, #0]
 8015db2:	6826      	ldr	r6, [r4, #0]
 8015db4:	6960      	ldr	r0, [r4, #20]
 8015db6:	1d1d      	adds	r5, r3, #4
 8015db8:	600d      	str	r5, [r1, #0]
 8015dba:	0635      	lsls	r5, r6, #24
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	d501      	bpl.n	8015dc4 <_printf_i+0x1cc>
 8015dc0:	6018      	str	r0, [r3, #0]
 8015dc2:	e002      	b.n	8015dca <_printf_i+0x1d2>
 8015dc4:	0671      	lsls	r1, r6, #25
 8015dc6:	d5fb      	bpl.n	8015dc0 <_printf_i+0x1c8>
 8015dc8:	8018      	strh	r0, [r3, #0]
 8015dca:	2300      	movs	r3, #0
 8015dcc:	6123      	str	r3, [r4, #16]
 8015dce:	4616      	mov	r6, r2
 8015dd0:	e7ba      	b.n	8015d48 <_printf_i+0x150>
 8015dd2:	680b      	ldr	r3, [r1, #0]
 8015dd4:	1d1a      	adds	r2, r3, #4
 8015dd6:	600a      	str	r2, [r1, #0]
 8015dd8:	681e      	ldr	r6, [r3, #0]
 8015dda:	6862      	ldr	r2, [r4, #4]
 8015ddc:	2100      	movs	r1, #0
 8015dde:	4630      	mov	r0, r6
 8015de0:	f7ea f9fe 	bl	80001e0 <memchr>
 8015de4:	b108      	cbz	r0, 8015dea <_printf_i+0x1f2>
 8015de6:	1b80      	subs	r0, r0, r6
 8015de8:	6060      	str	r0, [r4, #4]
 8015dea:	6863      	ldr	r3, [r4, #4]
 8015dec:	6123      	str	r3, [r4, #16]
 8015dee:	2300      	movs	r3, #0
 8015df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015df4:	e7a8      	b.n	8015d48 <_printf_i+0x150>
 8015df6:	6923      	ldr	r3, [r4, #16]
 8015df8:	4632      	mov	r2, r6
 8015dfa:	4649      	mov	r1, r9
 8015dfc:	4640      	mov	r0, r8
 8015dfe:	47d0      	blx	sl
 8015e00:	3001      	adds	r0, #1
 8015e02:	d0ab      	beq.n	8015d5c <_printf_i+0x164>
 8015e04:	6823      	ldr	r3, [r4, #0]
 8015e06:	079b      	lsls	r3, r3, #30
 8015e08:	d413      	bmi.n	8015e32 <_printf_i+0x23a>
 8015e0a:	68e0      	ldr	r0, [r4, #12]
 8015e0c:	9b03      	ldr	r3, [sp, #12]
 8015e0e:	4298      	cmp	r0, r3
 8015e10:	bfb8      	it	lt
 8015e12:	4618      	movlt	r0, r3
 8015e14:	e7a4      	b.n	8015d60 <_printf_i+0x168>
 8015e16:	2301      	movs	r3, #1
 8015e18:	4632      	mov	r2, r6
 8015e1a:	4649      	mov	r1, r9
 8015e1c:	4640      	mov	r0, r8
 8015e1e:	47d0      	blx	sl
 8015e20:	3001      	adds	r0, #1
 8015e22:	d09b      	beq.n	8015d5c <_printf_i+0x164>
 8015e24:	3501      	adds	r5, #1
 8015e26:	68e3      	ldr	r3, [r4, #12]
 8015e28:	9903      	ldr	r1, [sp, #12]
 8015e2a:	1a5b      	subs	r3, r3, r1
 8015e2c:	42ab      	cmp	r3, r5
 8015e2e:	dcf2      	bgt.n	8015e16 <_printf_i+0x21e>
 8015e30:	e7eb      	b.n	8015e0a <_printf_i+0x212>
 8015e32:	2500      	movs	r5, #0
 8015e34:	f104 0619 	add.w	r6, r4, #25
 8015e38:	e7f5      	b.n	8015e26 <_printf_i+0x22e>
 8015e3a:	bf00      	nop
 8015e3c:	08018dc2 	.word	0x08018dc2
 8015e40:	08018dd3 	.word	0x08018dd3

08015e44 <cleanup_glue>:
 8015e44:	b538      	push	{r3, r4, r5, lr}
 8015e46:	460c      	mov	r4, r1
 8015e48:	6809      	ldr	r1, [r1, #0]
 8015e4a:	4605      	mov	r5, r0
 8015e4c:	b109      	cbz	r1, 8015e52 <cleanup_glue+0xe>
 8015e4e:	f7ff fff9 	bl	8015e44 <cleanup_glue>
 8015e52:	4621      	mov	r1, r4
 8015e54:	4628      	mov	r0, r5
 8015e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e5a:	f7ff badf 	b.w	801541c <_free_r>
	...

08015e60 <_reclaim_reent>:
 8015e60:	4b2c      	ldr	r3, [pc, #176]	; (8015f14 <_reclaim_reent+0xb4>)
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	4283      	cmp	r3, r0
 8015e66:	b570      	push	{r4, r5, r6, lr}
 8015e68:	4604      	mov	r4, r0
 8015e6a:	d051      	beq.n	8015f10 <_reclaim_reent+0xb0>
 8015e6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015e6e:	b143      	cbz	r3, 8015e82 <_reclaim_reent+0x22>
 8015e70:	68db      	ldr	r3, [r3, #12]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d14a      	bne.n	8015f0c <_reclaim_reent+0xac>
 8015e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e78:	6819      	ldr	r1, [r3, #0]
 8015e7a:	b111      	cbz	r1, 8015e82 <_reclaim_reent+0x22>
 8015e7c:	4620      	mov	r0, r4
 8015e7e:	f7ff facd 	bl	801541c <_free_r>
 8015e82:	6961      	ldr	r1, [r4, #20]
 8015e84:	b111      	cbz	r1, 8015e8c <_reclaim_reent+0x2c>
 8015e86:	4620      	mov	r0, r4
 8015e88:	f7ff fac8 	bl	801541c <_free_r>
 8015e8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015e8e:	b111      	cbz	r1, 8015e96 <_reclaim_reent+0x36>
 8015e90:	4620      	mov	r0, r4
 8015e92:	f7ff fac3 	bl	801541c <_free_r>
 8015e96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015e98:	b111      	cbz	r1, 8015ea0 <_reclaim_reent+0x40>
 8015e9a:	4620      	mov	r0, r4
 8015e9c:	f7ff fabe 	bl	801541c <_free_r>
 8015ea0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015ea2:	b111      	cbz	r1, 8015eaa <_reclaim_reent+0x4a>
 8015ea4:	4620      	mov	r0, r4
 8015ea6:	f7ff fab9 	bl	801541c <_free_r>
 8015eaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015eac:	b111      	cbz	r1, 8015eb4 <_reclaim_reent+0x54>
 8015eae:	4620      	mov	r0, r4
 8015eb0:	f7ff fab4 	bl	801541c <_free_r>
 8015eb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015eb6:	b111      	cbz	r1, 8015ebe <_reclaim_reent+0x5e>
 8015eb8:	4620      	mov	r0, r4
 8015eba:	f7ff faaf 	bl	801541c <_free_r>
 8015ebe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015ec0:	b111      	cbz	r1, 8015ec8 <_reclaim_reent+0x68>
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	f7ff faaa 	bl	801541c <_free_r>
 8015ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015eca:	b111      	cbz	r1, 8015ed2 <_reclaim_reent+0x72>
 8015ecc:	4620      	mov	r0, r4
 8015ece:	f7ff faa5 	bl	801541c <_free_r>
 8015ed2:	69a3      	ldr	r3, [r4, #24]
 8015ed4:	b1e3      	cbz	r3, 8015f10 <_reclaim_reent+0xb0>
 8015ed6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015ed8:	4620      	mov	r0, r4
 8015eda:	4798      	blx	r3
 8015edc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015ede:	b1b9      	cbz	r1, 8015f10 <_reclaim_reent+0xb0>
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ee6:	f7ff bfad 	b.w	8015e44 <cleanup_glue>
 8015eea:	5949      	ldr	r1, [r1, r5]
 8015eec:	b941      	cbnz	r1, 8015f00 <_reclaim_reent+0xa0>
 8015eee:	3504      	adds	r5, #4
 8015ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ef2:	2d80      	cmp	r5, #128	; 0x80
 8015ef4:	68d9      	ldr	r1, [r3, #12]
 8015ef6:	d1f8      	bne.n	8015eea <_reclaim_reent+0x8a>
 8015ef8:	4620      	mov	r0, r4
 8015efa:	f7ff fa8f 	bl	801541c <_free_r>
 8015efe:	e7ba      	b.n	8015e76 <_reclaim_reent+0x16>
 8015f00:	680e      	ldr	r6, [r1, #0]
 8015f02:	4620      	mov	r0, r4
 8015f04:	f7ff fa8a 	bl	801541c <_free_r>
 8015f08:	4631      	mov	r1, r6
 8015f0a:	e7ef      	b.n	8015eec <_reclaim_reent+0x8c>
 8015f0c:	2500      	movs	r5, #0
 8015f0e:	e7ef      	b.n	8015ef0 <_reclaim_reent+0x90>
 8015f10:	bd70      	pop	{r4, r5, r6, pc}
 8015f12:	bf00      	nop
 8015f14:	2000019c 	.word	0x2000019c

08015f18 <_sbrk_r>:
 8015f18:	b538      	push	{r3, r4, r5, lr}
 8015f1a:	4d06      	ldr	r5, [pc, #24]	; (8015f34 <_sbrk_r+0x1c>)
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	4604      	mov	r4, r0
 8015f20:	4608      	mov	r0, r1
 8015f22:	602b      	str	r3, [r5, #0]
 8015f24:	f7ee ff8c 	bl	8004e40 <_sbrk>
 8015f28:	1c43      	adds	r3, r0, #1
 8015f2a:	d102      	bne.n	8015f32 <_sbrk_r+0x1a>
 8015f2c:	682b      	ldr	r3, [r5, #0]
 8015f2e:	b103      	cbz	r3, 8015f32 <_sbrk_r+0x1a>
 8015f30:	6023      	str	r3, [r4, #0]
 8015f32:	bd38      	pop	{r3, r4, r5, pc}
 8015f34:	20014ba0 	.word	0x20014ba0

08015f38 <siprintf>:
 8015f38:	b40e      	push	{r1, r2, r3}
 8015f3a:	b500      	push	{lr}
 8015f3c:	b09c      	sub	sp, #112	; 0x70
 8015f3e:	ab1d      	add	r3, sp, #116	; 0x74
 8015f40:	9002      	str	r0, [sp, #8]
 8015f42:	9006      	str	r0, [sp, #24]
 8015f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015f48:	4809      	ldr	r0, [pc, #36]	; (8015f70 <siprintf+0x38>)
 8015f4a:	9107      	str	r1, [sp, #28]
 8015f4c:	9104      	str	r1, [sp, #16]
 8015f4e:	4909      	ldr	r1, [pc, #36]	; (8015f74 <siprintf+0x3c>)
 8015f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f54:	9105      	str	r1, [sp, #20]
 8015f56:	6800      	ldr	r0, [r0, #0]
 8015f58:	9301      	str	r3, [sp, #4]
 8015f5a:	a902      	add	r1, sp, #8
 8015f5c:	f001 fc10 	bl	8017780 <_svfiprintf_r>
 8015f60:	9b02      	ldr	r3, [sp, #8]
 8015f62:	2200      	movs	r2, #0
 8015f64:	701a      	strb	r2, [r3, #0]
 8015f66:	b01c      	add	sp, #112	; 0x70
 8015f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f6c:	b003      	add	sp, #12
 8015f6e:	4770      	bx	lr
 8015f70:	2000019c 	.word	0x2000019c
 8015f74:	ffff0208 	.word	0xffff0208

08015f78 <__sread>:
 8015f78:	b510      	push	{r4, lr}
 8015f7a:	460c      	mov	r4, r1
 8015f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f80:	f001 fcfe 	bl	8017980 <_read_r>
 8015f84:	2800      	cmp	r0, #0
 8015f86:	bfab      	itete	ge
 8015f88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8015f8c:	181b      	addge	r3, r3, r0
 8015f8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015f92:	bfac      	ite	ge
 8015f94:	6563      	strge	r3, [r4, #84]	; 0x54
 8015f96:	81a3      	strhlt	r3, [r4, #12]
 8015f98:	bd10      	pop	{r4, pc}

08015f9a <__swrite>:
 8015f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f9e:	461f      	mov	r7, r3
 8015fa0:	898b      	ldrh	r3, [r1, #12]
 8015fa2:	05db      	lsls	r3, r3, #23
 8015fa4:	4605      	mov	r5, r0
 8015fa6:	460c      	mov	r4, r1
 8015fa8:	4616      	mov	r6, r2
 8015faa:	d505      	bpl.n	8015fb8 <__swrite+0x1e>
 8015fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fb0:	2302      	movs	r3, #2
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f000 ffde 	bl	8016f74 <_lseek_r>
 8015fb8:	89a3      	ldrh	r3, [r4, #12]
 8015fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015fc2:	81a3      	strh	r3, [r4, #12]
 8015fc4:	4632      	mov	r2, r6
 8015fc6:	463b      	mov	r3, r7
 8015fc8:	4628      	mov	r0, r5
 8015fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015fce:	f000 b86f 	b.w	80160b0 <_write_r>

08015fd2 <__sseek>:
 8015fd2:	b510      	push	{r4, lr}
 8015fd4:	460c      	mov	r4, r1
 8015fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fda:	f000 ffcb 	bl	8016f74 <_lseek_r>
 8015fde:	1c43      	adds	r3, r0, #1
 8015fe0:	89a3      	ldrh	r3, [r4, #12]
 8015fe2:	bf15      	itete	ne
 8015fe4:	6560      	strne	r0, [r4, #84]	; 0x54
 8015fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015fee:	81a3      	strheq	r3, [r4, #12]
 8015ff0:	bf18      	it	ne
 8015ff2:	81a3      	strhne	r3, [r4, #12]
 8015ff4:	bd10      	pop	{r4, pc}

08015ff6 <__sclose>:
 8015ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ffa:	f000 b86b 	b.w	80160d4 <_close_r>

08015ffe <strcat>:
 8015ffe:	b510      	push	{r4, lr}
 8016000:	4602      	mov	r2, r0
 8016002:	7814      	ldrb	r4, [r2, #0]
 8016004:	4613      	mov	r3, r2
 8016006:	3201      	adds	r2, #1
 8016008:	2c00      	cmp	r4, #0
 801600a:	d1fa      	bne.n	8016002 <strcat+0x4>
 801600c:	3b01      	subs	r3, #1
 801600e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016016:	2a00      	cmp	r2, #0
 8016018:	d1f9      	bne.n	801600e <strcat+0x10>
 801601a:	bd10      	pop	{r4, pc}

0801601c <strcpy>:
 801601c:	4603      	mov	r3, r0
 801601e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016022:	f803 2b01 	strb.w	r2, [r3], #1
 8016026:	2a00      	cmp	r2, #0
 8016028:	d1f9      	bne.n	801601e <strcpy+0x2>
 801602a:	4770      	bx	lr

0801602c <__utoa>:
 801602c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801602e:	4c1f      	ldr	r4, [pc, #124]	; (80160ac <__utoa+0x80>)
 8016030:	b08b      	sub	sp, #44	; 0x2c
 8016032:	4605      	mov	r5, r0
 8016034:	460b      	mov	r3, r1
 8016036:	466e      	mov	r6, sp
 8016038:	f104 0c20 	add.w	ip, r4, #32
 801603c:	6820      	ldr	r0, [r4, #0]
 801603e:	6861      	ldr	r1, [r4, #4]
 8016040:	4637      	mov	r7, r6
 8016042:	c703      	stmia	r7!, {r0, r1}
 8016044:	3408      	adds	r4, #8
 8016046:	4564      	cmp	r4, ip
 8016048:	463e      	mov	r6, r7
 801604a:	d1f7      	bne.n	801603c <__utoa+0x10>
 801604c:	7921      	ldrb	r1, [r4, #4]
 801604e:	7139      	strb	r1, [r7, #4]
 8016050:	1e91      	subs	r1, r2, #2
 8016052:	6820      	ldr	r0, [r4, #0]
 8016054:	6038      	str	r0, [r7, #0]
 8016056:	2922      	cmp	r1, #34	; 0x22
 8016058:	f04f 0100 	mov.w	r1, #0
 801605c:	d904      	bls.n	8016068 <__utoa+0x3c>
 801605e:	7019      	strb	r1, [r3, #0]
 8016060:	460b      	mov	r3, r1
 8016062:	4618      	mov	r0, r3
 8016064:	b00b      	add	sp, #44	; 0x2c
 8016066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016068:	1e58      	subs	r0, r3, #1
 801606a:	4684      	mov	ip, r0
 801606c:	fbb5 f7f2 	udiv	r7, r5, r2
 8016070:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8016074:	fb02 5617 	mls	r6, r2, r7, r5
 8016078:	4476      	add	r6, lr
 801607a:	460c      	mov	r4, r1
 801607c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8016080:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8016084:	462e      	mov	r6, r5
 8016086:	42b2      	cmp	r2, r6
 8016088:	f101 0101 	add.w	r1, r1, #1
 801608c:	463d      	mov	r5, r7
 801608e:	d9ed      	bls.n	801606c <__utoa+0x40>
 8016090:	2200      	movs	r2, #0
 8016092:	545a      	strb	r2, [r3, r1]
 8016094:	1919      	adds	r1, r3, r4
 8016096:	1aa5      	subs	r5, r4, r2
 8016098:	42aa      	cmp	r2, r5
 801609a:	dae2      	bge.n	8016062 <__utoa+0x36>
 801609c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80160a0:	780e      	ldrb	r6, [r1, #0]
 80160a2:	7006      	strb	r6, [r0, #0]
 80160a4:	3201      	adds	r2, #1
 80160a6:	f801 5901 	strb.w	r5, [r1], #-1
 80160aa:	e7f4      	b.n	8016096 <__utoa+0x6a>
 80160ac:	08018de4 	.word	0x08018de4

080160b0 <_write_r>:
 80160b0:	b538      	push	{r3, r4, r5, lr}
 80160b2:	4d07      	ldr	r5, [pc, #28]	; (80160d0 <_write_r+0x20>)
 80160b4:	4604      	mov	r4, r0
 80160b6:	4608      	mov	r0, r1
 80160b8:	4611      	mov	r1, r2
 80160ba:	2200      	movs	r2, #0
 80160bc:	602a      	str	r2, [r5, #0]
 80160be:	461a      	mov	r2, r3
 80160c0:	f7ee fe6d 	bl	8004d9e <_write>
 80160c4:	1c43      	adds	r3, r0, #1
 80160c6:	d102      	bne.n	80160ce <_write_r+0x1e>
 80160c8:	682b      	ldr	r3, [r5, #0]
 80160ca:	b103      	cbz	r3, 80160ce <_write_r+0x1e>
 80160cc:	6023      	str	r3, [r4, #0]
 80160ce:	bd38      	pop	{r3, r4, r5, pc}
 80160d0:	20014ba0 	.word	0x20014ba0

080160d4 <_close_r>:
 80160d4:	b538      	push	{r3, r4, r5, lr}
 80160d6:	4d06      	ldr	r5, [pc, #24]	; (80160f0 <_close_r+0x1c>)
 80160d8:	2300      	movs	r3, #0
 80160da:	4604      	mov	r4, r0
 80160dc:	4608      	mov	r0, r1
 80160de:	602b      	str	r3, [r5, #0]
 80160e0:	f7ee fe79 	bl	8004dd6 <_close>
 80160e4:	1c43      	adds	r3, r0, #1
 80160e6:	d102      	bne.n	80160ee <_close_r+0x1a>
 80160e8:	682b      	ldr	r3, [r5, #0]
 80160ea:	b103      	cbz	r3, 80160ee <_close_r+0x1a>
 80160ec:	6023      	str	r3, [r4, #0]
 80160ee:	bd38      	pop	{r3, r4, r5, pc}
 80160f0:	20014ba0 	.word	0x20014ba0

080160f4 <quorem>:
 80160f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160f8:	6903      	ldr	r3, [r0, #16]
 80160fa:	690c      	ldr	r4, [r1, #16]
 80160fc:	42a3      	cmp	r3, r4
 80160fe:	4607      	mov	r7, r0
 8016100:	f2c0 8081 	blt.w	8016206 <quorem+0x112>
 8016104:	3c01      	subs	r4, #1
 8016106:	f101 0814 	add.w	r8, r1, #20
 801610a:	f100 0514 	add.w	r5, r0, #20
 801610e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016112:	9301      	str	r3, [sp, #4]
 8016114:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801611c:	3301      	adds	r3, #1
 801611e:	429a      	cmp	r2, r3
 8016120:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016124:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016128:	fbb2 f6f3 	udiv	r6, r2, r3
 801612c:	d331      	bcc.n	8016192 <quorem+0x9e>
 801612e:	f04f 0e00 	mov.w	lr, #0
 8016132:	4640      	mov	r0, r8
 8016134:	46ac      	mov	ip, r5
 8016136:	46f2      	mov	sl, lr
 8016138:	f850 2b04 	ldr.w	r2, [r0], #4
 801613c:	b293      	uxth	r3, r2
 801613e:	fb06 e303 	mla	r3, r6, r3, lr
 8016142:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016146:	b29b      	uxth	r3, r3
 8016148:	ebaa 0303 	sub.w	r3, sl, r3
 801614c:	0c12      	lsrs	r2, r2, #16
 801614e:	f8dc a000 	ldr.w	sl, [ip]
 8016152:	fb06 e202 	mla	r2, r6, r2, lr
 8016156:	fa13 f38a 	uxtah	r3, r3, sl
 801615a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801615e:	fa1f fa82 	uxth.w	sl, r2
 8016162:	f8dc 2000 	ldr.w	r2, [ip]
 8016166:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801616a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801616e:	b29b      	uxth	r3, r3
 8016170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016174:	4581      	cmp	r9, r0
 8016176:	f84c 3b04 	str.w	r3, [ip], #4
 801617a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801617e:	d2db      	bcs.n	8016138 <quorem+0x44>
 8016180:	f855 300b 	ldr.w	r3, [r5, fp]
 8016184:	b92b      	cbnz	r3, 8016192 <quorem+0x9e>
 8016186:	9b01      	ldr	r3, [sp, #4]
 8016188:	3b04      	subs	r3, #4
 801618a:	429d      	cmp	r5, r3
 801618c:	461a      	mov	r2, r3
 801618e:	d32e      	bcc.n	80161ee <quorem+0xfa>
 8016190:	613c      	str	r4, [r7, #16]
 8016192:	4638      	mov	r0, r7
 8016194:	f001 f98a 	bl	80174ac <__mcmp>
 8016198:	2800      	cmp	r0, #0
 801619a:	db24      	blt.n	80161e6 <quorem+0xf2>
 801619c:	3601      	adds	r6, #1
 801619e:	4628      	mov	r0, r5
 80161a0:	f04f 0c00 	mov.w	ip, #0
 80161a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80161a8:	f8d0 e000 	ldr.w	lr, [r0]
 80161ac:	b293      	uxth	r3, r2
 80161ae:	ebac 0303 	sub.w	r3, ip, r3
 80161b2:	0c12      	lsrs	r2, r2, #16
 80161b4:	fa13 f38e 	uxtah	r3, r3, lr
 80161b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80161bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80161c0:	b29b      	uxth	r3, r3
 80161c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80161c6:	45c1      	cmp	r9, r8
 80161c8:	f840 3b04 	str.w	r3, [r0], #4
 80161cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80161d0:	d2e8      	bcs.n	80161a4 <quorem+0xb0>
 80161d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80161d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80161da:	b922      	cbnz	r2, 80161e6 <quorem+0xf2>
 80161dc:	3b04      	subs	r3, #4
 80161de:	429d      	cmp	r5, r3
 80161e0:	461a      	mov	r2, r3
 80161e2:	d30a      	bcc.n	80161fa <quorem+0x106>
 80161e4:	613c      	str	r4, [r7, #16]
 80161e6:	4630      	mov	r0, r6
 80161e8:	b003      	add	sp, #12
 80161ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ee:	6812      	ldr	r2, [r2, #0]
 80161f0:	3b04      	subs	r3, #4
 80161f2:	2a00      	cmp	r2, #0
 80161f4:	d1cc      	bne.n	8016190 <quorem+0x9c>
 80161f6:	3c01      	subs	r4, #1
 80161f8:	e7c7      	b.n	801618a <quorem+0x96>
 80161fa:	6812      	ldr	r2, [r2, #0]
 80161fc:	3b04      	subs	r3, #4
 80161fe:	2a00      	cmp	r2, #0
 8016200:	d1f0      	bne.n	80161e4 <quorem+0xf0>
 8016202:	3c01      	subs	r4, #1
 8016204:	e7eb      	b.n	80161de <quorem+0xea>
 8016206:	2000      	movs	r0, #0
 8016208:	e7ee      	b.n	80161e8 <quorem+0xf4>
 801620a:	0000      	movs	r0, r0
 801620c:	0000      	movs	r0, r0
	...

08016210 <_dtoa_r>:
 8016210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016214:	ed2d 8b02 	vpush	{d8}
 8016218:	ec57 6b10 	vmov	r6, r7, d0
 801621c:	b095      	sub	sp, #84	; 0x54
 801621e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016220:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016224:	9105      	str	r1, [sp, #20]
 8016226:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801622a:	4604      	mov	r4, r0
 801622c:	9209      	str	r2, [sp, #36]	; 0x24
 801622e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016230:	b975      	cbnz	r5, 8016250 <_dtoa_r+0x40>
 8016232:	2010      	movs	r0, #16
 8016234:	f7ff f8cc 	bl	80153d0 <malloc>
 8016238:	4602      	mov	r2, r0
 801623a:	6260      	str	r0, [r4, #36]	; 0x24
 801623c:	b920      	cbnz	r0, 8016248 <_dtoa_r+0x38>
 801623e:	4bb2      	ldr	r3, [pc, #712]	; (8016508 <_dtoa_r+0x2f8>)
 8016240:	21ea      	movs	r1, #234	; 0xea
 8016242:	48b2      	ldr	r0, [pc, #712]	; (801650c <_dtoa_r+0x2fc>)
 8016244:	f001 fbae 	bl	80179a4 <__assert_func>
 8016248:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801624c:	6005      	str	r5, [r0, #0]
 801624e:	60c5      	str	r5, [r0, #12]
 8016250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016252:	6819      	ldr	r1, [r3, #0]
 8016254:	b151      	cbz	r1, 801626c <_dtoa_r+0x5c>
 8016256:	685a      	ldr	r2, [r3, #4]
 8016258:	604a      	str	r2, [r1, #4]
 801625a:	2301      	movs	r3, #1
 801625c:	4093      	lsls	r3, r2
 801625e:	608b      	str	r3, [r1, #8]
 8016260:	4620      	mov	r0, r4
 8016262:	f000 fee5 	bl	8017030 <_Bfree>
 8016266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016268:	2200      	movs	r2, #0
 801626a:	601a      	str	r2, [r3, #0]
 801626c:	1e3b      	subs	r3, r7, #0
 801626e:	bfb9      	ittee	lt
 8016270:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016274:	9303      	strlt	r3, [sp, #12]
 8016276:	2300      	movge	r3, #0
 8016278:	f8c8 3000 	strge.w	r3, [r8]
 801627c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8016280:	4ba3      	ldr	r3, [pc, #652]	; (8016510 <_dtoa_r+0x300>)
 8016282:	bfbc      	itt	lt
 8016284:	2201      	movlt	r2, #1
 8016286:	f8c8 2000 	strlt.w	r2, [r8]
 801628a:	ea33 0309 	bics.w	r3, r3, r9
 801628e:	d11b      	bne.n	80162c8 <_dtoa_r+0xb8>
 8016290:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016292:	f242 730f 	movw	r3, #9999	; 0x270f
 8016296:	6013      	str	r3, [r2, #0]
 8016298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801629c:	4333      	orrs	r3, r6
 801629e:	f000 857a 	beq.w	8016d96 <_dtoa_r+0xb86>
 80162a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162a4:	b963      	cbnz	r3, 80162c0 <_dtoa_r+0xb0>
 80162a6:	4b9b      	ldr	r3, [pc, #620]	; (8016514 <_dtoa_r+0x304>)
 80162a8:	e024      	b.n	80162f4 <_dtoa_r+0xe4>
 80162aa:	4b9b      	ldr	r3, [pc, #620]	; (8016518 <_dtoa_r+0x308>)
 80162ac:	9300      	str	r3, [sp, #0]
 80162ae:	3308      	adds	r3, #8
 80162b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80162b2:	6013      	str	r3, [r2, #0]
 80162b4:	9800      	ldr	r0, [sp, #0]
 80162b6:	b015      	add	sp, #84	; 0x54
 80162b8:	ecbd 8b02 	vpop	{d8}
 80162bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162c0:	4b94      	ldr	r3, [pc, #592]	; (8016514 <_dtoa_r+0x304>)
 80162c2:	9300      	str	r3, [sp, #0]
 80162c4:	3303      	adds	r3, #3
 80162c6:	e7f3      	b.n	80162b0 <_dtoa_r+0xa0>
 80162c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80162cc:	2200      	movs	r2, #0
 80162ce:	ec51 0b17 	vmov	r0, r1, d7
 80162d2:	2300      	movs	r3, #0
 80162d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80162d8:	f7ea fbf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80162dc:	4680      	mov	r8, r0
 80162de:	b158      	cbz	r0, 80162f8 <_dtoa_r+0xe8>
 80162e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80162e2:	2301      	movs	r3, #1
 80162e4:	6013      	str	r3, [r2, #0]
 80162e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	f000 8551 	beq.w	8016d90 <_dtoa_r+0xb80>
 80162ee:	488b      	ldr	r0, [pc, #556]	; (801651c <_dtoa_r+0x30c>)
 80162f0:	6018      	str	r0, [r3, #0]
 80162f2:	1e43      	subs	r3, r0, #1
 80162f4:	9300      	str	r3, [sp, #0]
 80162f6:	e7dd      	b.n	80162b4 <_dtoa_r+0xa4>
 80162f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80162fc:	aa12      	add	r2, sp, #72	; 0x48
 80162fe:	a913      	add	r1, sp, #76	; 0x4c
 8016300:	4620      	mov	r0, r4
 8016302:	f001 f977 	bl	80175f4 <__d2b>
 8016306:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801630a:	4683      	mov	fp, r0
 801630c:	2d00      	cmp	r5, #0
 801630e:	d07c      	beq.n	801640a <_dtoa_r+0x1fa>
 8016310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016312:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8016316:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801631a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801631e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801632a:	4b7d      	ldr	r3, [pc, #500]	; (8016520 <_dtoa_r+0x310>)
 801632c:	2200      	movs	r2, #0
 801632e:	4630      	mov	r0, r6
 8016330:	4639      	mov	r1, r7
 8016332:	f7e9 ffa9 	bl	8000288 <__aeabi_dsub>
 8016336:	a36e      	add	r3, pc, #440	; (adr r3, 80164f0 <_dtoa_r+0x2e0>)
 8016338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801633c:	f7ea f95c 	bl	80005f8 <__aeabi_dmul>
 8016340:	a36d      	add	r3, pc, #436	; (adr r3, 80164f8 <_dtoa_r+0x2e8>)
 8016342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016346:	f7e9 ffa1 	bl	800028c <__adddf3>
 801634a:	4606      	mov	r6, r0
 801634c:	4628      	mov	r0, r5
 801634e:	460f      	mov	r7, r1
 8016350:	f7ea f8e8 	bl	8000524 <__aeabi_i2d>
 8016354:	a36a      	add	r3, pc, #424	; (adr r3, 8016500 <_dtoa_r+0x2f0>)
 8016356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801635a:	f7ea f94d 	bl	80005f8 <__aeabi_dmul>
 801635e:	4602      	mov	r2, r0
 8016360:	460b      	mov	r3, r1
 8016362:	4630      	mov	r0, r6
 8016364:	4639      	mov	r1, r7
 8016366:	f7e9 ff91 	bl	800028c <__adddf3>
 801636a:	4606      	mov	r6, r0
 801636c:	460f      	mov	r7, r1
 801636e:	f7ea fbf3 	bl	8000b58 <__aeabi_d2iz>
 8016372:	2200      	movs	r2, #0
 8016374:	4682      	mov	sl, r0
 8016376:	2300      	movs	r3, #0
 8016378:	4630      	mov	r0, r6
 801637a:	4639      	mov	r1, r7
 801637c:	f7ea fbae 	bl	8000adc <__aeabi_dcmplt>
 8016380:	b148      	cbz	r0, 8016396 <_dtoa_r+0x186>
 8016382:	4650      	mov	r0, sl
 8016384:	f7ea f8ce 	bl	8000524 <__aeabi_i2d>
 8016388:	4632      	mov	r2, r6
 801638a:	463b      	mov	r3, r7
 801638c:	f7ea fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8016390:	b908      	cbnz	r0, 8016396 <_dtoa_r+0x186>
 8016392:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8016396:	f1ba 0f16 	cmp.w	sl, #22
 801639a:	d854      	bhi.n	8016446 <_dtoa_r+0x236>
 801639c:	4b61      	ldr	r3, [pc, #388]	; (8016524 <_dtoa_r+0x314>)
 801639e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80163a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80163aa:	f7ea fb97 	bl	8000adc <__aeabi_dcmplt>
 80163ae:	2800      	cmp	r0, #0
 80163b0:	d04b      	beq.n	801644a <_dtoa_r+0x23a>
 80163b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80163b6:	2300      	movs	r3, #0
 80163b8:	930e      	str	r3, [sp, #56]	; 0x38
 80163ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80163bc:	1b5d      	subs	r5, r3, r5
 80163be:	1e6b      	subs	r3, r5, #1
 80163c0:	9304      	str	r3, [sp, #16]
 80163c2:	bf43      	ittte	mi
 80163c4:	2300      	movmi	r3, #0
 80163c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80163ca:	9304      	strmi	r3, [sp, #16]
 80163cc:	f04f 0800 	movpl.w	r8, #0
 80163d0:	f1ba 0f00 	cmp.w	sl, #0
 80163d4:	db3b      	blt.n	801644e <_dtoa_r+0x23e>
 80163d6:	9b04      	ldr	r3, [sp, #16]
 80163d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80163dc:	4453      	add	r3, sl
 80163de:	9304      	str	r3, [sp, #16]
 80163e0:	2300      	movs	r3, #0
 80163e2:	9306      	str	r3, [sp, #24]
 80163e4:	9b05      	ldr	r3, [sp, #20]
 80163e6:	2b09      	cmp	r3, #9
 80163e8:	d869      	bhi.n	80164be <_dtoa_r+0x2ae>
 80163ea:	2b05      	cmp	r3, #5
 80163ec:	bfc4      	itt	gt
 80163ee:	3b04      	subgt	r3, #4
 80163f0:	9305      	strgt	r3, [sp, #20]
 80163f2:	9b05      	ldr	r3, [sp, #20]
 80163f4:	f1a3 0302 	sub.w	r3, r3, #2
 80163f8:	bfcc      	ite	gt
 80163fa:	2500      	movgt	r5, #0
 80163fc:	2501      	movle	r5, #1
 80163fe:	2b03      	cmp	r3, #3
 8016400:	d869      	bhi.n	80164d6 <_dtoa_r+0x2c6>
 8016402:	e8df f003 	tbb	[pc, r3]
 8016406:	4e2c      	.short	0x4e2c
 8016408:	5a4c      	.short	0x5a4c
 801640a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801640e:	441d      	add	r5, r3
 8016410:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016414:	2b20      	cmp	r3, #32
 8016416:	bfc1      	itttt	gt
 8016418:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801641c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016420:	fa09 f303 	lslgt.w	r3, r9, r3
 8016424:	fa26 f000 	lsrgt.w	r0, r6, r0
 8016428:	bfda      	itte	le
 801642a:	f1c3 0320 	rsble	r3, r3, #32
 801642e:	fa06 f003 	lslle.w	r0, r6, r3
 8016432:	4318      	orrgt	r0, r3
 8016434:	f7ea f866 	bl	8000504 <__aeabi_ui2d>
 8016438:	2301      	movs	r3, #1
 801643a:	4606      	mov	r6, r0
 801643c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016440:	3d01      	subs	r5, #1
 8016442:	9310      	str	r3, [sp, #64]	; 0x40
 8016444:	e771      	b.n	801632a <_dtoa_r+0x11a>
 8016446:	2301      	movs	r3, #1
 8016448:	e7b6      	b.n	80163b8 <_dtoa_r+0x1a8>
 801644a:	900e      	str	r0, [sp, #56]	; 0x38
 801644c:	e7b5      	b.n	80163ba <_dtoa_r+0x1aa>
 801644e:	f1ca 0300 	rsb	r3, sl, #0
 8016452:	9306      	str	r3, [sp, #24]
 8016454:	2300      	movs	r3, #0
 8016456:	eba8 080a 	sub.w	r8, r8, sl
 801645a:	930d      	str	r3, [sp, #52]	; 0x34
 801645c:	e7c2      	b.n	80163e4 <_dtoa_r+0x1d4>
 801645e:	2300      	movs	r3, #0
 8016460:	9308      	str	r3, [sp, #32]
 8016462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016464:	2b00      	cmp	r3, #0
 8016466:	dc39      	bgt.n	80164dc <_dtoa_r+0x2cc>
 8016468:	f04f 0901 	mov.w	r9, #1
 801646c:	f8cd 9004 	str.w	r9, [sp, #4]
 8016470:	464b      	mov	r3, r9
 8016472:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016476:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016478:	2200      	movs	r2, #0
 801647a:	6042      	str	r2, [r0, #4]
 801647c:	2204      	movs	r2, #4
 801647e:	f102 0614 	add.w	r6, r2, #20
 8016482:	429e      	cmp	r6, r3
 8016484:	6841      	ldr	r1, [r0, #4]
 8016486:	d92f      	bls.n	80164e8 <_dtoa_r+0x2d8>
 8016488:	4620      	mov	r0, r4
 801648a:	f000 fd91 	bl	8016fb0 <_Balloc>
 801648e:	9000      	str	r0, [sp, #0]
 8016490:	2800      	cmp	r0, #0
 8016492:	d14b      	bne.n	801652c <_dtoa_r+0x31c>
 8016494:	4b24      	ldr	r3, [pc, #144]	; (8016528 <_dtoa_r+0x318>)
 8016496:	4602      	mov	r2, r0
 8016498:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801649c:	e6d1      	b.n	8016242 <_dtoa_r+0x32>
 801649e:	2301      	movs	r3, #1
 80164a0:	e7de      	b.n	8016460 <_dtoa_r+0x250>
 80164a2:	2300      	movs	r3, #0
 80164a4:	9308      	str	r3, [sp, #32]
 80164a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164a8:	eb0a 0903 	add.w	r9, sl, r3
 80164ac:	f109 0301 	add.w	r3, r9, #1
 80164b0:	2b01      	cmp	r3, #1
 80164b2:	9301      	str	r3, [sp, #4]
 80164b4:	bfb8      	it	lt
 80164b6:	2301      	movlt	r3, #1
 80164b8:	e7dd      	b.n	8016476 <_dtoa_r+0x266>
 80164ba:	2301      	movs	r3, #1
 80164bc:	e7f2      	b.n	80164a4 <_dtoa_r+0x294>
 80164be:	2501      	movs	r5, #1
 80164c0:	2300      	movs	r3, #0
 80164c2:	9305      	str	r3, [sp, #20]
 80164c4:	9508      	str	r5, [sp, #32]
 80164c6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80164ca:	2200      	movs	r2, #0
 80164cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80164d0:	2312      	movs	r3, #18
 80164d2:	9209      	str	r2, [sp, #36]	; 0x24
 80164d4:	e7cf      	b.n	8016476 <_dtoa_r+0x266>
 80164d6:	2301      	movs	r3, #1
 80164d8:	9308      	str	r3, [sp, #32]
 80164da:	e7f4      	b.n	80164c6 <_dtoa_r+0x2b6>
 80164dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80164e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80164e4:	464b      	mov	r3, r9
 80164e6:	e7c6      	b.n	8016476 <_dtoa_r+0x266>
 80164e8:	3101      	adds	r1, #1
 80164ea:	6041      	str	r1, [r0, #4]
 80164ec:	0052      	lsls	r2, r2, #1
 80164ee:	e7c6      	b.n	801647e <_dtoa_r+0x26e>
 80164f0:	636f4361 	.word	0x636f4361
 80164f4:	3fd287a7 	.word	0x3fd287a7
 80164f8:	8b60c8b3 	.word	0x8b60c8b3
 80164fc:	3fc68a28 	.word	0x3fc68a28
 8016500:	509f79fb 	.word	0x509f79fb
 8016504:	3fd34413 	.word	0x3fd34413
 8016508:	08018e16 	.word	0x08018e16
 801650c:	08018e2d 	.word	0x08018e2d
 8016510:	7ff00000 	.word	0x7ff00000
 8016514:	08018e12 	.word	0x08018e12
 8016518:	08018e09 	.word	0x08018e09
 801651c:	08018dc1 	.word	0x08018dc1
 8016520:	3ff80000 	.word	0x3ff80000
 8016524:	08018f28 	.word	0x08018f28
 8016528:	08018e8c 	.word	0x08018e8c
 801652c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801652e:	9a00      	ldr	r2, [sp, #0]
 8016530:	601a      	str	r2, [r3, #0]
 8016532:	9b01      	ldr	r3, [sp, #4]
 8016534:	2b0e      	cmp	r3, #14
 8016536:	f200 80ad 	bhi.w	8016694 <_dtoa_r+0x484>
 801653a:	2d00      	cmp	r5, #0
 801653c:	f000 80aa 	beq.w	8016694 <_dtoa_r+0x484>
 8016540:	f1ba 0f00 	cmp.w	sl, #0
 8016544:	dd36      	ble.n	80165b4 <_dtoa_r+0x3a4>
 8016546:	4ac3      	ldr	r2, [pc, #780]	; (8016854 <_dtoa_r+0x644>)
 8016548:	f00a 030f 	and.w	r3, sl, #15
 801654c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016550:	ed93 7b00 	vldr	d7, [r3]
 8016554:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8016558:	ea4f 172a 	mov.w	r7, sl, asr #4
 801655c:	eeb0 8a47 	vmov.f32	s16, s14
 8016560:	eef0 8a67 	vmov.f32	s17, s15
 8016564:	d016      	beq.n	8016594 <_dtoa_r+0x384>
 8016566:	4bbc      	ldr	r3, [pc, #752]	; (8016858 <_dtoa_r+0x648>)
 8016568:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801656c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016570:	f7ea f96c 	bl	800084c <__aeabi_ddiv>
 8016574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016578:	f007 070f 	and.w	r7, r7, #15
 801657c:	2503      	movs	r5, #3
 801657e:	4eb6      	ldr	r6, [pc, #728]	; (8016858 <_dtoa_r+0x648>)
 8016580:	b957      	cbnz	r7, 8016598 <_dtoa_r+0x388>
 8016582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016586:	ec53 2b18 	vmov	r2, r3, d8
 801658a:	f7ea f95f 	bl	800084c <__aeabi_ddiv>
 801658e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016592:	e029      	b.n	80165e8 <_dtoa_r+0x3d8>
 8016594:	2502      	movs	r5, #2
 8016596:	e7f2      	b.n	801657e <_dtoa_r+0x36e>
 8016598:	07f9      	lsls	r1, r7, #31
 801659a:	d508      	bpl.n	80165ae <_dtoa_r+0x39e>
 801659c:	ec51 0b18 	vmov	r0, r1, d8
 80165a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80165a4:	f7ea f828 	bl	80005f8 <__aeabi_dmul>
 80165a8:	ec41 0b18 	vmov	d8, r0, r1
 80165ac:	3501      	adds	r5, #1
 80165ae:	107f      	asrs	r7, r7, #1
 80165b0:	3608      	adds	r6, #8
 80165b2:	e7e5      	b.n	8016580 <_dtoa_r+0x370>
 80165b4:	f000 80a6 	beq.w	8016704 <_dtoa_r+0x4f4>
 80165b8:	f1ca 0600 	rsb	r6, sl, #0
 80165bc:	4ba5      	ldr	r3, [pc, #660]	; (8016854 <_dtoa_r+0x644>)
 80165be:	4fa6      	ldr	r7, [pc, #664]	; (8016858 <_dtoa_r+0x648>)
 80165c0:	f006 020f 	and.w	r2, r6, #15
 80165c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80165c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80165d0:	f7ea f812 	bl	80005f8 <__aeabi_dmul>
 80165d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80165d8:	1136      	asrs	r6, r6, #4
 80165da:	2300      	movs	r3, #0
 80165dc:	2502      	movs	r5, #2
 80165de:	2e00      	cmp	r6, #0
 80165e0:	f040 8085 	bne.w	80166ee <_dtoa_r+0x4de>
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d1d2      	bne.n	801658e <_dtoa_r+0x37e>
 80165e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	f000 808c 	beq.w	8016708 <_dtoa_r+0x4f8>
 80165f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80165f4:	4b99      	ldr	r3, [pc, #612]	; (801685c <_dtoa_r+0x64c>)
 80165f6:	2200      	movs	r2, #0
 80165f8:	4630      	mov	r0, r6
 80165fa:	4639      	mov	r1, r7
 80165fc:	f7ea fa6e 	bl	8000adc <__aeabi_dcmplt>
 8016600:	2800      	cmp	r0, #0
 8016602:	f000 8081 	beq.w	8016708 <_dtoa_r+0x4f8>
 8016606:	9b01      	ldr	r3, [sp, #4]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d07d      	beq.n	8016708 <_dtoa_r+0x4f8>
 801660c:	f1b9 0f00 	cmp.w	r9, #0
 8016610:	dd3c      	ble.n	801668c <_dtoa_r+0x47c>
 8016612:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8016616:	9307      	str	r3, [sp, #28]
 8016618:	2200      	movs	r2, #0
 801661a:	4b91      	ldr	r3, [pc, #580]	; (8016860 <_dtoa_r+0x650>)
 801661c:	4630      	mov	r0, r6
 801661e:	4639      	mov	r1, r7
 8016620:	f7e9 ffea 	bl	80005f8 <__aeabi_dmul>
 8016624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016628:	3501      	adds	r5, #1
 801662a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801662e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016632:	4628      	mov	r0, r5
 8016634:	f7e9 ff76 	bl	8000524 <__aeabi_i2d>
 8016638:	4632      	mov	r2, r6
 801663a:	463b      	mov	r3, r7
 801663c:	f7e9 ffdc 	bl	80005f8 <__aeabi_dmul>
 8016640:	4b88      	ldr	r3, [pc, #544]	; (8016864 <_dtoa_r+0x654>)
 8016642:	2200      	movs	r2, #0
 8016644:	f7e9 fe22 	bl	800028c <__adddf3>
 8016648:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801664c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016650:	9303      	str	r3, [sp, #12]
 8016652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016654:	2b00      	cmp	r3, #0
 8016656:	d15c      	bne.n	8016712 <_dtoa_r+0x502>
 8016658:	4b83      	ldr	r3, [pc, #524]	; (8016868 <_dtoa_r+0x658>)
 801665a:	2200      	movs	r2, #0
 801665c:	4630      	mov	r0, r6
 801665e:	4639      	mov	r1, r7
 8016660:	f7e9 fe12 	bl	8000288 <__aeabi_dsub>
 8016664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016668:	4606      	mov	r6, r0
 801666a:	460f      	mov	r7, r1
 801666c:	f7ea fa54 	bl	8000b18 <__aeabi_dcmpgt>
 8016670:	2800      	cmp	r0, #0
 8016672:	f040 8296 	bne.w	8016ba2 <_dtoa_r+0x992>
 8016676:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801667a:	4630      	mov	r0, r6
 801667c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016680:	4639      	mov	r1, r7
 8016682:	f7ea fa2b 	bl	8000adc <__aeabi_dcmplt>
 8016686:	2800      	cmp	r0, #0
 8016688:	f040 8288 	bne.w	8016b9c <_dtoa_r+0x98c>
 801668c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016690:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016696:	2b00      	cmp	r3, #0
 8016698:	f2c0 8158 	blt.w	801694c <_dtoa_r+0x73c>
 801669c:	f1ba 0f0e 	cmp.w	sl, #14
 80166a0:	f300 8154 	bgt.w	801694c <_dtoa_r+0x73c>
 80166a4:	4b6b      	ldr	r3, [pc, #428]	; (8016854 <_dtoa_r+0x644>)
 80166a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80166aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80166ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	f280 80e3 	bge.w	801687c <_dtoa_r+0x66c>
 80166b6:	9b01      	ldr	r3, [sp, #4]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	f300 80df 	bgt.w	801687c <_dtoa_r+0x66c>
 80166be:	f040 826d 	bne.w	8016b9c <_dtoa_r+0x98c>
 80166c2:	4b69      	ldr	r3, [pc, #420]	; (8016868 <_dtoa_r+0x658>)
 80166c4:	2200      	movs	r2, #0
 80166c6:	4640      	mov	r0, r8
 80166c8:	4649      	mov	r1, r9
 80166ca:	f7e9 ff95 	bl	80005f8 <__aeabi_dmul>
 80166ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80166d2:	f7ea fa17 	bl	8000b04 <__aeabi_dcmpge>
 80166d6:	9e01      	ldr	r6, [sp, #4]
 80166d8:	4637      	mov	r7, r6
 80166da:	2800      	cmp	r0, #0
 80166dc:	f040 8243 	bne.w	8016b66 <_dtoa_r+0x956>
 80166e0:	9d00      	ldr	r5, [sp, #0]
 80166e2:	2331      	movs	r3, #49	; 0x31
 80166e4:	f805 3b01 	strb.w	r3, [r5], #1
 80166e8:	f10a 0a01 	add.w	sl, sl, #1
 80166ec:	e23f      	b.n	8016b6e <_dtoa_r+0x95e>
 80166ee:	07f2      	lsls	r2, r6, #31
 80166f0:	d505      	bpl.n	80166fe <_dtoa_r+0x4ee>
 80166f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80166f6:	f7e9 ff7f 	bl	80005f8 <__aeabi_dmul>
 80166fa:	3501      	adds	r5, #1
 80166fc:	2301      	movs	r3, #1
 80166fe:	1076      	asrs	r6, r6, #1
 8016700:	3708      	adds	r7, #8
 8016702:	e76c      	b.n	80165de <_dtoa_r+0x3ce>
 8016704:	2502      	movs	r5, #2
 8016706:	e76f      	b.n	80165e8 <_dtoa_r+0x3d8>
 8016708:	9b01      	ldr	r3, [sp, #4]
 801670a:	f8cd a01c 	str.w	sl, [sp, #28]
 801670e:	930c      	str	r3, [sp, #48]	; 0x30
 8016710:	e78d      	b.n	801662e <_dtoa_r+0x41e>
 8016712:	9900      	ldr	r1, [sp, #0]
 8016714:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016718:	4b4e      	ldr	r3, [pc, #312]	; (8016854 <_dtoa_r+0x644>)
 801671a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801671e:	4401      	add	r1, r0
 8016720:	9102      	str	r1, [sp, #8]
 8016722:	9908      	ldr	r1, [sp, #32]
 8016724:	eeb0 8a47 	vmov.f32	s16, s14
 8016728:	eef0 8a67 	vmov.f32	s17, s15
 801672c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016730:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016734:	2900      	cmp	r1, #0
 8016736:	d045      	beq.n	80167c4 <_dtoa_r+0x5b4>
 8016738:	494c      	ldr	r1, [pc, #304]	; (801686c <_dtoa_r+0x65c>)
 801673a:	2000      	movs	r0, #0
 801673c:	f7ea f886 	bl	800084c <__aeabi_ddiv>
 8016740:	ec53 2b18 	vmov	r2, r3, d8
 8016744:	f7e9 fda0 	bl	8000288 <__aeabi_dsub>
 8016748:	9d00      	ldr	r5, [sp, #0]
 801674a:	ec41 0b18 	vmov	d8, r0, r1
 801674e:	4639      	mov	r1, r7
 8016750:	4630      	mov	r0, r6
 8016752:	f7ea fa01 	bl	8000b58 <__aeabi_d2iz>
 8016756:	900c      	str	r0, [sp, #48]	; 0x30
 8016758:	f7e9 fee4 	bl	8000524 <__aeabi_i2d>
 801675c:	4602      	mov	r2, r0
 801675e:	460b      	mov	r3, r1
 8016760:	4630      	mov	r0, r6
 8016762:	4639      	mov	r1, r7
 8016764:	f7e9 fd90 	bl	8000288 <__aeabi_dsub>
 8016768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801676a:	3330      	adds	r3, #48	; 0x30
 801676c:	f805 3b01 	strb.w	r3, [r5], #1
 8016770:	ec53 2b18 	vmov	r2, r3, d8
 8016774:	4606      	mov	r6, r0
 8016776:	460f      	mov	r7, r1
 8016778:	f7ea f9b0 	bl	8000adc <__aeabi_dcmplt>
 801677c:	2800      	cmp	r0, #0
 801677e:	d165      	bne.n	801684c <_dtoa_r+0x63c>
 8016780:	4632      	mov	r2, r6
 8016782:	463b      	mov	r3, r7
 8016784:	4935      	ldr	r1, [pc, #212]	; (801685c <_dtoa_r+0x64c>)
 8016786:	2000      	movs	r0, #0
 8016788:	f7e9 fd7e 	bl	8000288 <__aeabi_dsub>
 801678c:	ec53 2b18 	vmov	r2, r3, d8
 8016790:	f7ea f9a4 	bl	8000adc <__aeabi_dcmplt>
 8016794:	2800      	cmp	r0, #0
 8016796:	f040 80b9 	bne.w	801690c <_dtoa_r+0x6fc>
 801679a:	9b02      	ldr	r3, [sp, #8]
 801679c:	429d      	cmp	r5, r3
 801679e:	f43f af75 	beq.w	801668c <_dtoa_r+0x47c>
 80167a2:	4b2f      	ldr	r3, [pc, #188]	; (8016860 <_dtoa_r+0x650>)
 80167a4:	ec51 0b18 	vmov	r0, r1, d8
 80167a8:	2200      	movs	r2, #0
 80167aa:	f7e9 ff25 	bl	80005f8 <__aeabi_dmul>
 80167ae:	4b2c      	ldr	r3, [pc, #176]	; (8016860 <_dtoa_r+0x650>)
 80167b0:	ec41 0b18 	vmov	d8, r0, r1
 80167b4:	2200      	movs	r2, #0
 80167b6:	4630      	mov	r0, r6
 80167b8:	4639      	mov	r1, r7
 80167ba:	f7e9 ff1d 	bl	80005f8 <__aeabi_dmul>
 80167be:	4606      	mov	r6, r0
 80167c0:	460f      	mov	r7, r1
 80167c2:	e7c4      	b.n	801674e <_dtoa_r+0x53e>
 80167c4:	ec51 0b17 	vmov	r0, r1, d7
 80167c8:	f7e9 ff16 	bl	80005f8 <__aeabi_dmul>
 80167cc:	9b02      	ldr	r3, [sp, #8]
 80167ce:	9d00      	ldr	r5, [sp, #0]
 80167d0:	930c      	str	r3, [sp, #48]	; 0x30
 80167d2:	ec41 0b18 	vmov	d8, r0, r1
 80167d6:	4639      	mov	r1, r7
 80167d8:	4630      	mov	r0, r6
 80167da:	f7ea f9bd 	bl	8000b58 <__aeabi_d2iz>
 80167de:	9011      	str	r0, [sp, #68]	; 0x44
 80167e0:	f7e9 fea0 	bl	8000524 <__aeabi_i2d>
 80167e4:	4602      	mov	r2, r0
 80167e6:	460b      	mov	r3, r1
 80167e8:	4630      	mov	r0, r6
 80167ea:	4639      	mov	r1, r7
 80167ec:	f7e9 fd4c 	bl	8000288 <__aeabi_dsub>
 80167f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80167f2:	3330      	adds	r3, #48	; 0x30
 80167f4:	f805 3b01 	strb.w	r3, [r5], #1
 80167f8:	9b02      	ldr	r3, [sp, #8]
 80167fa:	429d      	cmp	r5, r3
 80167fc:	4606      	mov	r6, r0
 80167fe:	460f      	mov	r7, r1
 8016800:	f04f 0200 	mov.w	r2, #0
 8016804:	d134      	bne.n	8016870 <_dtoa_r+0x660>
 8016806:	4b19      	ldr	r3, [pc, #100]	; (801686c <_dtoa_r+0x65c>)
 8016808:	ec51 0b18 	vmov	r0, r1, d8
 801680c:	f7e9 fd3e 	bl	800028c <__adddf3>
 8016810:	4602      	mov	r2, r0
 8016812:	460b      	mov	r3, r1
 8016814:	4630      	mov	r0, r6
 8016816:	4639      	mov	r1, r7
 8016818:	f7ea f97e 	bl	8000b18 <__aeabi_dcmpgt>
 801681c:	2800      	cmp	r0, #0
 801681e:	d175      	bne.n	801690c <_dtoa_r+0x6fc>
 8016820:	ec53 2b18 	vmov	r2, r3, d8
 8016824:	4911      	ldr	r1, [pc, #68]	; (801686c <_dtoa_r+0x65c>)
 8016826:	2000      	movs	r0, #0
 8016828:	f7e9 fd2e 	bl	8000288 <__aeabi_dsub>
 801682c:	4602      	mov	r2, r0
 801682e:	460b      	mov	r3, r1
 8016830:	4630      	mov	r0, r6
 8016832:	4639      	mov	r1, r7
 8016834:	f7ea f952 	bl	8000adc <__aeabi_dcmplt>
 8016838:	2800      	cmp	r0, #0
 801683a:	f43f af27 	beq.w	801668c <_dtoa_r+0x47c>
 801683e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016840:	1e6b      	subs	r3, r5, #1
 8016842:	930c      	str	r3, [sp, #48]	; 0x30
 8016844:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016848:	2b30      	cmp	r3, #48	; 0x30
 801684a:	d0f8      	beq.n	801683e <_dtoa_r+0x62e>
 801684c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016850:	e04a      	b.n	80168e8 <_dtoa_r+0x6d8>
 8016852:	bf00      	nop
 8016854:	08018f28 	.word	0x08018f28
 8016858:	08018f00 	.word	0x08018f00
 801685c:	3ff00000 	.word	0x3ff00000
 8016860:	40240000 	.word	0x40240000
 8016864:	401c0000 	.word	0x401c0000
 8016868:	40140000 	.word	0x40140000
 801686c:	3fe00000 	.word	0x3fe00000
 8016870:	4baf      	ldr	r3, [pc, #700]	; (8016b30 <_dtoa_r+0x920>)
 8016872:	f7e9 fec1 	bl	80005f8 <__aeabi_dmul>
 8016876:	4606      	mov	r6, r0
 8016878:	460f      	mov	r7, r1
 801687a:	e7ac      	b.n	80167d6 <_dtoa_r+0x5c6>
 801687c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016880:	9d00      	ldr	r5, [sp, #0]
 8016882:	4642      	mov	r2, r8
 8016884:	464b      	mov	r3, r9
 8016886:	4630      	mov	r0, r6
 8016888:	4639      	mov	r1, r7
 801688a:	f7e9 ffdf 	bl	800084c <__aeabi_ddiv>
 801688e:	f7ea f963 	bl	8000b58 <__aeabi_d2iz>
 8016892:	9002      	str	r0, [sp, #8]
 8016894:	f7e9 fe46 	bl	8000524 <__aeabi_i2d>
 8016898:	4642      	mov	r2, r8
 801689a:	464b      	mov	r3, r9
 801689c:	f7e9 feac 	bl	80005f8 <__aeabi_dmul>
 80168a0:	4602      	mov	r2, r0
 80168a2:	460b      	mov	r3, r1
 80168a4:	4630      	mov	r0, r6
 80168a6:	4639      	mov	r1, r7
 80168a8:	f7e9 fcee 	bl	8000288 <__aeabi_dsub>
 80168ac:	9e02      	ldr	r6, [sp, #8]
 80168ae:	9f01      	ldr	r7, [sp, #4]
 80168b0:	3630      	adds	r6, #48	; 0x30
 80168b2:	f805 6b01 	strb.w	r6, [r5], #1
 80168b6:	9e00      	ldr	r6, [sp, #0]
 80168b8:	1bae      	subs	r6, r5, r6
 80168ba:	42b7      	cmp	r7, r6
 80168bc:	4602      	mov	r2, r0
 80168be:	460b      	mov	r3, r1
 80168c0:	d137      	bne.n	8016932 <_dtoa_r+0x722>
 80168c2:	f7e9 fce3 	bl	800028c <__adddf3>
 80168c6:	4642      	mov	r2, r8
 80168c8:	464b      	mov	r3, r9
 80168ca:	4606      	mov	r6, r0
 80168cc:	460f      	mov	r7, r1
 80168ce:	f7ea f923 	bl	8000b18 <__aeabi_dcmpgt>
 80168d2:	b9c8      	cbnz	r0, 8016908 <_dtoa_r+0x6f8>
 80168d4:	4642      	mov	r2, r8
 80168d6:	464b      	mov	r3, r9
 80168d8:	4630      	mov	r0, r6
 80168da:	4639      	mov	r1, r7
 80168dc:	f7ea f8f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80168e0:	b110      	cbz	r0, 80168e8 <_dtoa_r+0x6d8>
 80168e2:	9b02      	ldr	r3, [sp, #8]
 80168e4:	07d9      	lsls	r1, r3, #31
 80168e6:	d40f      	bmi.n	8016908 <_dtoa_r+0x6f8>
 80168e8:	4620      	mov	r0, r4
 80168ea:	4659      	mov	r1, fp
 80168ec:	f000 fba0 	bl	8017030 <_Bfree>
 80168f0:	2300      	movs	r3, #0
 80168f2:	702b      	strb	r3, [r5, #0]
 80168f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168f6:	f10a 0001 	add.w	r0, sl, #1
 80168fa:	6018      	str	r0, [r3, #0]
 80168fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80168fe:	2b00      	cmp	r3, #0
 8016900:	f43f acd8 	beq.w	80162b4 <_dtoa_r+0xa4>
 8016904:	601d      	str	r5, [r3, #0]
 8016906:	e4d5      	b.n	80162b4 <_dtoa_r+0xa4>
 8016908:	f8cd a01c 	str.w	sl, [sp, #28]
 801690c:	462b      	mov	r3, r5
 801690e:	461d      	mov	r5, r3
 8016910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016914:	2a39      	cmp	r2, #57	; 0x39
 8016916:	d108      	bne.n	801692a <_dtoa_r+0x71a>
 8016918:	9a00      	ldr	r2, [sp, #0]
 801691a:	429a      	cmp	r2, r3
 801691c:	d1f7      	bne.n	801690e <_dtoa_r+0x6fe>
 801691e:	9a07      	ldr	r2, [sp, #28]
 8016920:	9900      	ldr	r1, [sp, #0]
 8016922:	3201      	adds	r2, #1
 8016924:	9207      	str	r2, [sp, #28]
 8016926:	2230      	movs	r2, #48	; 0x30
 8016928:	700a      	strb	r2, [r1, #0]
 801692a:	781a      	ldrb	r2, [r3, #0]
 801692c:	3201      	adds	r2, #1
 801692e:	701a      	strb	r2, [r3, #0]
 8016930:	e78c      	b.n	801684c <_dtoa_r+0x63c>
 8016932:	4b7f      	ldr	r3, [pc, #508]	; (8016b30 <_dtoa_r+0x920>)
 8016934:	2200      	movs	r2, #0
 8016936:	f7e9 fe5f 	bl	80005f8 <__aeabi_dmul>
 801693a:	2200      	movs	r2, #0
 801693c:	2300      	movs	r3, #0
 801693e:	4606      	mov	r6, r0
 8016940:	460f      	mov	r7, r1
 8016942:	f7ea f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8016946:	2800      	cmp	r0, #0
 8016948:	d09b      	beq.n	8016882 <_dtoa_r+0x672>
 801694a:	e7cd      	b.n	80168e8 <_dtoa_r+0x6d8>
 801694c:	9a08      	ldr	r2, [sp, #32]
 801694e:	2a00      	cmp	r2, #0
 8016950:	f000 80c4 	beq.w	8016adc <_dtoa_r+0x8cc>
 8016954:	9a05      	ldr	r2, [sp, #20]
 8016956:	2a01      	cmp	r2, #1
 8016958:	f300 80a8 	bgt.w	8016aac <_dtoa_r+0x89c>
 801695c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801695e:	2a00      	cmp	r2, #0
 8016960:	f000 80a0 	beq.w	8016aa4 <_dtoa_r+0x894>
 8016964:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016968:	9e06      	ldr	r6, [sp, #24]
 801696a:	4645      	mov	r5, r8
 801696c:	9a04      	ldr	r2, [sp, #16]
 801696e:	2101      	movs	r1, #1
 8016970:	441a      	add	r2, r3
 8016972:	4620      	mov	r0, r4
 8016974:	4498      	add	r8, r3
 8016976:	9204      	str	r2, [sp, #16]
 8016978:	f000 fc16 	bl	80171a8 <__i2b>
 801697c:	4607      	mov	r7, r0
 801697e:	2d00      	cmp	r5, #0
 8016980:	dd0b      	ble.n	801699a <_dtoa_r+0x78a>
 8016982:	9b04      	ldr	r3, [sp, #16]
 8016984:	2b00      	cmp	r3, #0
 8016986:	dd08      	ble.n	801699a <_dtoa_r+0x78a>
 8016988:	42ab      	cmp	r3, r5
 801698a:	9a04      	ldr	r2, [sp, #16]
 801698c:	bfa8      	it	ge
 801698e:	462b      	movge	r3, r5
 8016990:	eba8 0803 	sub.w	r8, r8, r3
 8016994:	1aed      	subs	r5, r5, r3
 8016996:	1ad3      	subs	r3, r2, r3
 8016998:	9304      	str	r3, [sp, #16]
 801699a:	9b06      	ldr	r3, [sp, #24]
 801699c:	b1fb      	cbz	r3, 80169de <_dtoa_r+0x7ce>
 801699e:	9b08      	ldr	r3, [sp, #32]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	f000 809f 	beq.w	8016ae4 <_dtoa_r+0x8d4>
 80169a6:	2e00      	cmp	r6, #0
 80169a8:	dd11      	ble.n	80169ce <_dtoa_r+0x7be>
 80169aa:	4639      	mov	r1, r7
 80169ac:	4632      	mov	r2, r6
 80169ae:	4620      	mov	r0, r4
 80169b0:	f000 fcb6 	bl	8017320 <__pow5mult>
 80169b4:	465a      	mov	r2, fp
 80169b6:	4601      	mov	r1, r0
 80169b8:	4607      	mov	r7, r0
 80169ba:	4620      	mov	r0, r4
 80169bc:	f000 fc0a 	bl	80171d4 <__multiply>
 80169c0:	4659      	mov	r1, fp
 80169c2:	9007      	str	r0, [sp, #28]
 80169c4:	4620      	mov	r0, r4
 80169c6:	f000 fb33 	bl	8017030 <_Bfree>
 80169ca:	9b07      	ldr	r3, [sp, #28]
 80169cc:	469b      	mov	fp, r3
 80169ce:	9b06      	ldr	r3, [sp, #24]
 80169d0:	1b9a      	subs	r2, r3, r6
 80169d2:	d004      	beq.n	80169de <_dtoa_r+0x7ce>
 80169d4:	4659      	mov	r1, fp
 80169d6:	4620      	mov	r0, r4
 80169d8:	f000 fca2 	bl	8017320 <__pow5mult>
 80169dc:	4683      	mov	fp, r0
 80169de:	2101      	movs	r1, #1
 80169e0:	4620      	mov	r0, r4
 80169e2:	f000 fbe1 	bl	80171a8 <__i2b>
 80169e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	4606      	mov	r6, r0
 80169ec:	dd7c      	ble.n	8016ae8 <_dtoa_r+0x8d8>
 80169ee:	461a      	mov	r2, r3
 80169f0:	4601      	mov	r1, r0
 80169f2:	4620      	mov	r0, r4
 80169f4:	f000 fc94 	bl	8017320 <__pow5mult>
 80169f8:	9b05      	ldr	r3, [sp, #20]
 80169fa:	2b01      	cmp	r3, #1
 80169fc:	4606      	mov	r6, r0
 80169fe:	dd76      	ble.n	8016aee <_dtoa_r+0x8de>
 8016a00:	2300      	movs	r3, #0
 8016a02:	9306      	str	r3, [sp, #24]
 8016a04:	6933      	ldr	r3, [r6, #16]
 8016a06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016a0a:	6918      	ldr	r0, [r3, #16]
 8016a0c:	f000 fb7c 	bl	8017108 <__hi0bits>
 8016a10:	f1c0 0020 	rsb	r0, r0, #32
 8016a14:	9b04      	ldr	r3, [sp, #16]
 8016a16:	4418      	add	r0, r3
 8016a18:	f010 001f 	ands.w	r0, r0, #31
 8016a1c:	f000 8086 	beq.w	8016b2c <_dtoa_r+0x91c>
 8016a20:	f1c0 0320 	rsb	r3, r0, #32
 8016a24:	2b04      	cmp	r3, #4
 8016a26:	dd7f      	ble.n	8016b28 <_dtoa_r+0x918>
 8016a28:	f1c0 001c 	rsb	r0, r0, #28
 8016a2c:	9b04      	ldr	r3, [sp, #16]
 8016a2e:	4403      	add	r3, r0
 8016a30:	4480      	add	r8, r0
 8016a32:	4405      	add	r5, r0
 8016a34:	9304      	str	r3, [sp, #16]
 8016a36:	f1b8 0f00 	cmp.w	r8, #0
 8016a3a:	dd05      	ble.n	8016a48 <_dtoa_r+0x838>
 8016a3c:	4659      	mov	r1, fp
 8016a3e:	4642      	mov	r2, r8
 8016a40:	4620      	mov	r0, r4
 8016a42:	f000 fcc7 	bl	80173d4 <__lshift>
 8016a46:	4683      	mov	fp, r0
 8016a48:	9b04      	ldr	r3, [sp, #16]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	dd05      	ble.n	8016a5a <_dtoa_r+0x84a>
 8016a4e:	4631      	mov	r1, r6
 8016a50:	461a      	mov	r2, r3
 8016a52:	4620      	mov	r0, r4
 8016a54:	f000 fcbe 	bl	80173d4 <__lshift>
 8016a58:	4606      	mov	r6, r0
 8016a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d069      	beq.n	8016b34 <_dtoa_r+0x924>
 8016a60:	4631      	mov	r1, r6
 8016a62:	4658      	mov	r0, fp
 8016a64:	f000 fd22 	bl	80174ac <__mcmp>
 8016a68:	2800      	cmp	r0, #0
 8016a6a:	da63      	bge.n	8016b34 <_dtoa_r+0x924>
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	4659      	mov	r1, fp
 8016a70:	220a      	movs	r2, #10
 8016a72:	4620      	mov	r0, r4
 8016a74:	f000 fafe 	bl	8017074 <__multadd>
 8016a78:	9b08      	ldr	r3, [sp, #32]
 8016a7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8016a7e:	4683      	mov	fp, r0
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	f000 818f 	beq.w	8016da4 <_dtoa_r+0xb94>
 8016a86:	4639      	mov	r1, r7
 8016a88:	2300      	movs	r3, #0
 8016a8a:	220a      	movs	r2, #10
 8016a8c:	4620      	mov	r0, r4
 8016a8e:	f000 faf1 	bl	8017074 <__multadd>
 8016a92:	f1b9 0f00 	cmp.w	r9, #0
 8016a96:	4607      	mov	r7, r0
 8016a98:	f300 808e 	bgt.w	8016bb8 <_dtoa_r+0x9a8>
 8016a9c:	9b05      	ldr	r3, [sp, #20]
 8016a9e:	2b02      	cmp	r3, #2
 8016aa0:	dc50      	bgt.n	8016b44 <_dtoa_r+0x934>
 8016aa2:	e089      	b.n	8016bb8 <_dtoa_r+0x9a8>
 8016aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016aa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016aaa:	e75d      	b.n	8016968 <_dtoa_r+0x758>
 8016aac:	9b01      	ldr	r3, [sp, #4]
 8016aae:	1e5e      	subs	r6, r3, #1
 8016ab0:	9b06      	ldr	r3, [sp, #24]
 8016ab2:	42b3      	cmp	r3, r6
 8016ab4:	bfbf      	itttt	lt
 8016ab6:	9b06      	ldrlt	r3, [sp, #24]
 8016ab8:	9606      	strlt	r6, [sp, #24]
 8016aba:	1af2      	sublt	r2, r6, r3
 8016abc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8016abe:	bfb6      	itet	lt
 8016ac0:	189b      	addlt	r3, r3, r2
 8016ac2:	1b9e      	subge	r6, r3, r6
 8016ac4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8016ac6:	9b01      	ldr	r3, [sp, #4]
 8016ac8:	bfb8      	it	lt
 8016aca:	2600      	movlt	r6, #0
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	bfb5      	itete	lt
 8016ad0:	eba8 0503 	sublt.w	r5, r8, r3
 8016ad4:	9b01      	ldrge	r3, [sp, #4]
 8016ad6:	2300      	movlt	r3, #0
 8016ad8:	4645      	movge	r5, r8
 8016ada:	e747      	b.n	801696c <_dtoa_r+0x75c>
 8016adc:	9e06      	ldr	r6, [sp, #24]
 8016ade:	9f08      	ldr	r7, [sp, #32]
 8016ae0:	4645      	mov	r5, r8
 8016ae2:	e74c      	b.n	801697e <_dtoa_r+0x76e>
 8016ae4:	9a06      	ldr	r2, [sp, #24]
 8016ae6:	e775      	b.n	80169d4 <_dtoa_r+0x7c4>
 8016ae8:	9b05      	ldr	r3, [sp, #20]
 8016aea:	2b01      	cmp	r3, #1
 8016aec:	dc18      	bgt.n	8016b20 <_dtoa_r+0x910>
 8016aee:	9b02      	ldr	r3, [sp, #8]
 8016af0:	b9b3      	cbnz	r3, 8016b20 <_dtoa_r+0x910>
 8016af2:	9b03      	ldr	r3, [sp, #12]
 8016af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016af8:	b9a3      	cbnz	r3, 8016b24 <_dtoa_r+0x914>
 8016afa:	9b03      	ldr	r3, [sp, #12]
 8016afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016b00:	0d1b      	lsrs	r3, r3, #20
 8016b02:	051b      	lsls	r3, r3, #20
 8016b04:	b12b      	cbz	r3, 8016b12 <_dtoa_r+0x902>
 8016b06:	9b04      	ldr	r3, [sp, #16]
 8016b08:	3301      	adds	r3, #1
 8016b0a:	9304      	str	r3, [sp, #16]
 8016b0c:	f108 0801 	add.w	r8, r8, #1
 8016b10:	2301      	movs	r3, #1
 8016b12:	9306      	str	r3, [sp, #24]
 8016b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	f47f af74 	bne.w	8016a04 <_dtoa_r+0x7f4>
 8016b1c:	2001      	movs	r0, #1
 8016b1e:	e779      	b.n	8016a14 <_dtoa_r+0x804>
 8016b20:	2300      	movs	r3, #0
 8016b22:	e7f6      	b.n	8016b12 <_dtoa_r+0x902>
 8016b24:	9b02      	ldr	r3, [sp, #8]
 8016b26:	e7f4      	b.n	8016b12 <_dtoa_r+0x902>
 8016b28:	d085      	beq.n	8016a36 <_dtoa_r+0x826>
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	301c      	adds	r0, #28
 8016b2e:	e77d      	b.n	8016a2c <_dtoa_r+0x81c>
 8016b30:	40240000 	.word	0x40240000
 8016b34:	9b01      	ldr	r3, [sp, #4]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	dc38      	bgt.n	8016bac <_dtoa_r+0x99c>
 8016b3a:	9b05      	ldr	r3, [sp, #20]
 8016b3c:	2b02      	cmp	r3, #2
 8016b3e:	dd35      	ble.n	8016bac <_dtoa_r+0x99c>
 8016b40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016b44:	f1b9 0f00 	cmp.w	r9, #0
 8016b48:	d10d      	bne.n	8016b66 <_dtoa_r+0x956>
 8016b4a:	4631      	mov	r1, r6
 8016b4c:	464b      	mov	r3, r9
 8016b4e:	2205      	movs	r2, #5
 8016b50:	4620      	mov	r0, r4
 8016b52:	f000 fa8f 	bl	8017074 <__multadd>
 8016b56:	4601      	mov	r1, r0
 8016b58:	4606      	mov	r6, r0
 8016b5a:	4658      	mov	r0, fp
 8016b5c:	f000 fca6 	bl	80174ac <__mcmp>
 8016b60:	2800      	cmp	r0, #0
 8016b62:	f73f adbd 	bgt.w	80166e0 <_dtoa_r+0x4d0>
 8016b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b68:	9d00      	ldr	r5, [sp, #0]
 8016b6a:	ea6f 0a03 	mvn.w	sl, r3
 8016b6e:	f04f 0800 	mov.w	r8, #0
 8016b72:	4631      	mov	r1, r6
 8016b74:	4620      	mov	r0, r4
 8016b76:	f000 fa5b 	bl	8017030 <_Bfree>
 8016b7a:	2f00      	cmp	r7, #0
 8016b7c:	f43f aeb4 	beq.w	80168e8 <_dtoa_r+0x6d8>
 8016b80:	f1b8 0f00 	cmp.w	r8, #0
 8016b84:	d005      	beq.n	8016b92 <_dtoa_r+0x982>
 8016b86:	45b8      	cmp	r8, r7
 8016b88:	d003      	beq.n	8016b92 <_dtoa_r+0x982>
 8016b8a:	4641      	mov	r1, r8
 8016b8c:	4620      	mov	r0, r4
 8016b8e:	f000 fa4f 	bl	8017030 <_Bfree>
 8016b92:	4639      	mov	r1, r7
 8016b94:	4620      	mov	r0, r4
 8016b96:	f000 fa4b 	bl	8017030 <_Bfree>
 8016b9a:	e6a5      	b.n	80168e8 <_dtoa_r+0x6d8>
 8016b9c:	2600      	movs	r6, #0
 8016b9e:	4637      	mov	r7, r6
 8016ba0:	e7e1      	b.n	8016b66 <_dtoa_r+0x956>
 8016ba2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016ba4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016ba8:	4637      	mov	r7, r6
 8016baa:	e599      	b.n	80166e0 <_dtoa_r+0x4d0>
 8016bac:	9b08      	ldr	r3, [sp, #32]
 8016bae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	f000 80fd 	beq.w	8016db2 <_dtoa_r+0xba2>
 8016bb8:	2d00      	cmp	r5, #0
 8016bba:	dd05      	ble.n	8016bc8 <_dtoa_r+0x9b8>
 8016bbc:	4639      	mov	r1, r7
 8016bbe:	462a      	mov	r2, r5
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	f000 fc07 	bl	80173d4 <__lshift>
 8016bc6:	4607      	mov	r7, r0
 8016bc8:	9b06      	ldr	r3, [sp, #24]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d05c      	beq.n	8016c88 <_dtoa_r+0xa78>
 8016bce:	6879      	ldr	r1, [r7, #4]
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	f000 f9ed 	bl	8016fb0 <_Balloc>
 8016bd6:	4605      	mov	r5, r0
 8016bd8:	b928      	cbnz	r0, 8016be6 <_dtoa_r+0x9d6>
 8016bda:	4b80      	ldr	r3, [pc, #512]	; (8016ddc <_dtoa_r+0xbcc>)
 8016bdc:	4602      	mov	r2, r0
 8016bde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016be2:	f7ff bb2e 	b.w	8016242 <_dtoa_r+0x32>
 8016be6:	693a      	ldr	r2, [r7, #16]
 8016be8:	3202      	adds	r2, #2
 8016bea:	0092      	lsls	r2, r2, #2
 8016bec:	f107 010c 	add.w	r1, r7, #12
 8016bf0:	300c      	adds	r0, #12
 8016bf2:	f7fe fbfd 	bl	80153f0 <memcpy>
 8016bf6:	2201      	movs	r2, #1
 8016bf8:	4629      	mov	r1, r5
 8016bfa:	4620      	mov	r0, r4
 8016bfc:	f000 fbea 	bl	80173d4 <__lshift>
 8016c00:	9b00      	ldr	r3, [sp, #0]
 8016c02:	3301      	adds	r3, #1
 8016c04:	9301      	str	r3, [sp, #4]
 8016c06:	9b00      	ldr	r3, [sp, #0]
 8016c08:	444b      	add	r3, r9
 8016c0a:	9307      	str	r3, [sp, #28]
 8016c0c:	9b02      	ldr	r3, [sp, #8]
 8016c0e:	f003 0301 	and.w	r3, r3, #1
 8016c12:	46b8      	mov	r8, r7
 8016c14:	9306      	str	r3, [sp, #24]
 8016c16:	4607      	mov	r7, r0
 8016c18:	9b01      	ldr	r3, [sp, #4]
 8016c1a:	4631      	mov	r1, r6
 8016c1c:	3b01      	subs	r3, #1
 8016c1e:	4658      	mov	r0, fp
 8016c20:	9302      	str	r3, [sp, #8]
 8016c22:	f7ff fa67 	bl	80160f4 <quorem>
 8016c26:	4603      	mov	r3, r0
 8016c28:	3330      	adds	r3, #48	; 0x30
 8016c2a:	9004      	str	r0, [sp, #16]
 8016c2c:	4641      	mov	r1, r8
 8016c2e:	4658      	mov	r0, fp
 8016c30:	9308      	str	r3, [sp, #32]
 8016c32:	f000 fc3b 	bl	80174ac <__mcmp>
 8016c36:	463a      	mov	r2, r7
 8016c38:	4681      	mov	r9, r0
 8016c3a:	4631      	mov	r1, r6
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	f000 fc51 	bl	80174e4 <__mdiff>
 8016c42:	68c2      	ldr	r2, [r0, #12]
 8016c44:	9b08      	ldr	r3, [sp, #32]
 8016c46:	4605      	mov	r5, r0
 8016c48:	bb02      	cbnz	r2, 8016c8c <_dtoa_r+0xa7c>
 8016c4a:	4601      	mov	r1, r0
 8016c4c:	4658      	mov	r0, fp
 8016c4e:	f000 fc2d 	bl	80174ac <__mcmp>
 8016c52:	9b08      	ldr	r3, [sp, #32]
 8016c54:	4602      	mov	r2, r0
 8016c56:	4629      	mov	r1, r5
 8016c58:	4620      	mov	r0, r4
 8016c5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8016c5e:	f000 f9e7 	bl	8017030 <_Bfree>
 8016c62:	9b05      	ldr	r3, [sp, #20]
 8016c64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c66:	9d01      	ldr	r5, [sp, #4]
 8016c68:	ea43 0102 	orr.w	r1, r3, r2
 8016c6c:	9b06      	ldr	r3, [sp, #24]
 8016c6e:	430b      	orrs	r3, r1
 8016c70:	9b08      	ldr	r3, [sp, #32]
 8016c72:	d10d      	bne.n	8016c90 <_dtoa_r+0xa80>
 8016c74:	2b39      	cmp	r3, #57	; 0x39
 8016c76:	d029      	beq.n	8016ccc <_dtoa_r+0xabc>
 8016c78:	f1b9 0f00 	cmp.w	r9, #0
 8016c7c:	dd01      	ble.n	8016c82 <_dtoa_r+0xa72>
 8016c7e:	9b04      	ldr	r3, [sp, #16]
 8016c80:	3331      	adds	r3, #49	; 0x31
 8016c82:	9a02      	ldr	r2, [sp, #8]
 8016c84:	7013      	strb	r3, [r2, #0]
 8016c86:	e774      	b.n	8016b72 <_dtoa_r+0x962>
 8016c88:	4638      	mov	r0, r7
 8016c8a:	e7b9      	b.n	8016c00 <_dtoa_r+0x9f0>
 8016c8c:	2201      	movs	r2, #1
 8016c8e:	e7e2      	b.n	8016c56 <_dtoa_r+0xa46>
 8016c90:	f1b9 0f00 	cmp.w	r9, #0
 8016c94:	db06      	blt.n	8016ca4 <_dtoa_r+0xa94>
 8016c96:	9905      	ldr	r1, [sp, #20]
 8016c98:	ea41 0909 	orr.w	r9, r1, r9
 8016c9c:	9906      	ldr	r1, [sp, #24]
 8016c9e:	ea59 0101 	orrs.w	r1, r9, r1
 8016ca2:	d120      	bne.n	8016ce6 <_dtoa_r+0xad6>
 8016ca4:	2a00      	cmp	r2, #0
 8016ca6:	ddec      	ble.n	8016c82 <_dtoa_r+0xa72>
 8016ca8:	4659      	mov	r1, fp
 8016caa:	2201      	movs	r2, #1
 8016cac:	4620      	mov	r0, r4
 8016cae:	9301      	str	r3, [sp, #4]
 8016cb0:	f000 fb90 	bl	80173d4 <__lshift>
 8016cb4:	4631      	mov	r1, r6
 8016cb6:	4683      	mov	fp, r0
 8016cb8:	f000 fbf8 	bl	80174ac <__mcmp>
 8016cbc:	2800      	cmp	r0, #0
 8016cbe:	9b01      	ldr	r3, [sp, #4]
 8016cc0:	dc02      	bgt.n	8016cc8 <_dtoa_r+0xab8>
 8016cc2:	d1de      	bne.n	8016c82 <_dtoa_r+0xa72>
 8016cc4:	07da      	lsls	r2, r3, #31
 8016cc6:	d5dc      	bpl.n	8016c82 <_dtoa_r+0xa72>
 8016cc8:	2b39      	cmp	r3, #57	; 0x39
 8016cca:	d1d8      	bne.n	8016c7e <_dtoa_r+0xa6e>
 8016ccc:	9a02      	ldr	r2, [sp, #8]
 8016cce:	2339      	movs	r3, #57	; 0x39
 8016cd0:	7013      	strb	r3, [r2, #0]
 8016cd2:	462b      	mov	r3, r5
 8016cd4:	461d      	mov	r5, r3
 8016cd6:	3b01      	subs	r3, #1
 8016cd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016cdc:	2a39      	cmp	r2, #57	; 0x39
 8016cde:	d050      	beq.n	8016d82 <_dtoa_r+0xb72>
 8016ce0:	3201      	adds	r2, #1
 8016ce2:	701a      	strb	r2, [r3, #0]
 8016ce4:	e745      	b.n	8016b72 <_dtoa_r+0x962>
 8016ce6:	2a00      	cmp	r2, #0
 8016ce8:	dd03      	ble.n	8016cf2 <_dtoa_r+0xae2>
 8016cea:	2b39      	cmp	r3, #57	; 0x39
 8016cec:	d0ee      	beq.n	8016ccc <_dtoa_r+0xabc>
 8016cee:	3301      	adds	r3, #1
 8016cf0:	e7c7      	b.n	8016c82 <_dtoa_r+0xa72>
 8016cf2:	9a01      	ldr	r2, [sp, #4]
 8016cf4:	9907      	ldr	r1, [sp, #28]
 8016cf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016cfa:	428a      	cmp	r2, r1
 8016cfc:	d02a      	beq.n	8016d54 <_dtoa_r+0xb44>
 8016cfe:	4659      	mov	r1, fp
 8016d00:	2300      	movs	r3, #0
 8016d02:	220a      	movs	r2, #10
 8016d04:	4620      	mov	r0, r4
 8016d06:	f000 f9b5 	bl	8017074 <__multadd>
 8016d0a:	45b8      	cmp	r8, r7
 8016d0c:	4683      	mov	fp, r0
 8016d0e:	f04f 0300 	mov.w	r3, #0
 8016d12:	f04f 020a 	mov.w	r2, #10
 8016d16:	4641      	mov	r1, r8
 8016d18:	4620      	mov	r0, r4
 8016d1a:	d107      	bne.n	8016d2c <_dtoa_r+0xb1c>
 8016d1c:	f000 f9aa 	bl	8017074 <__multadd>
 8016d20:	4680      	mov	r8, r0
 8016d22:	4607      	mov	r7, r0
 8016d24:	9b01      	ldr	r3, [sp, #4]
 8016d26:	3301      	adds	r3, #1
 8016d28:	9301      	str	r3, [sp, #4]
 8016d2a:	e775      	b.n	8016c18 <_dtoa_r+0xa08>
 8016d2c:	f000 f9a2 	bl	8017074 <__multadd>
 8016d30:	4639      	mov	r1, r7
 8016d32:	4680      	mov	r8, r0
 8016d34:	2300      	movs	r3, #0
 8016d36:	220a      	movs	r2, #10
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f000 f99b 	bl	8017074 <__multadd>
 8016d3e:	4607      	mov	r7, r0
 8016d40:	e7f0      	b.n	8016d24 <_dtoa_r+0xb14>
 8016d42:	f1b9 0f00 	cmp.w	r9, #0
 8016d46:	9a00      	ldr	r2, [sp, #0]
 8016d48:	bfcc      	ite	gt
 8016d4a:	464d      	movgt	r5, r9
 8016d4c:	2501      	movle	r5, #1
 8016d4e:	4415      	add	r5, r2
 8016d50:	f04f 0800 	mov.w	r8, #0
 8016d54:	4659      	mov	r1, fp
 8016d56:	2201      	movs	r2, #1
 8016d58:	4620      	mov	r0, r4
 8016d5a:	9301      	str	r3, [sp, #4]
 8016d5c:	f000 fb3a 	bl	80173d4 <__lshift>
 8016d60:	4631      	mov	r1, r6
 8016d62:	4683      	mov	fp, r0
 8016d64:	f000 fba2 	bl	80174ac <__mcmp>
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	dcb2      	bgt.n	8016cd2 <_dtoa_r+0xac2>
 8016d6c:	d102      	bne.n	8016d74 <_dtoa_r+0xb64>
 8016d6e:	9b01      	ldr	r3, [sp, #4]
 8016d70:	07db      	lsls	r3, r3, #31
 8016d72:	d4ae      	bmi.n	8016cd2 <_dtoa_r+0xac2>
 8016d74:	462b      	mov	r3, r5
 8016d76:	461d      	mov	r5, r3
 8016d78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016d7c:	2a30      	cmp	r2, #48	; 0x30
 8016d7e:	d0fa      	beq.n	8016d76 <_dtoa_r+0xb66>
 8016d80:	e6f7      	b.n	8016b72 <_dtoa_r+0x962>
 8016d82:	9a00      	ldr	r2, [sp, #0]
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d1a5      	bne.n	8016cd4 <_dtoa_r+0xac4>
 8016d88:	f10a 0a01 	add.w	sl, sl, #1
 8016d8c:	2331      	movs	r3, #49	; 0x31
 8016d8e:	e779      	b.n	8016c84 <_dtoa_r+0xa74>
 8016d90:	4b13      	ldr	r3, [pc, #76]	; (8016de0 <_dtoa_r+0xbd0>)
 8016d92:	f7ff baaf 	b.w	80162f4 <_dtoa_r+0xe4>
 8016d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	f47f aa86 	bne.w	80162aa <_dtoa_r+0x9a>
 8016d9e:	4b11      	ldr	r3, [pc, #68]	; (8016de4 <_dtoa_r+0xbd4>)
 8016da0:	f7ff baa8 	b.w	80162f4 <_dtoa_r+0xe4>
 8016da4:	f1b9 0f00 	cmp.w	r9, #0
 8016da8:	dc03      	bgt.n	8016db2 <_dtoa_r+0xba2>
 8016daa:	9b05      	ldr	r3, [sp, #20]
 8016dac:	2b02      	cmp	r3, #2
 8016dae:	f73f aec9 	bgt.w	8016b44 <_dtoa_r+0x934>
 8016db2:	9d00      	ldr	r5, [sp, #0]
 8016db4:	4631      	mov	r1, r6
 8016db6:	4658      	mov	r0, fp
 8016db8:	f7ff f99c 	bl	80160f4 <quorem>
 8016dbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016dc0:	f805 3b01 	strb.w	r3, [r5], #1
 8016dc4:	9a00      	ldr	r2, [sp, #0]
 8016dc6:	1aaa      	subs	r2, r5, r2
 8016dc8:	4591      	cmp	r9, r2
 8016dca:	ddba      	ble.n	8016d42 <_dtoa_r+0xb32>
 8016dcc:	4659      	mov	r1, fp
 8016dce:	2300      	movs	r3, #0
 8016dd0:	220a      	movs	r2, #10
 8016dd2:	4620      	mov	r0, r4
 8016dd4:	f000 f94e 	bl	8017074 <__multadd>
 8016dd8:	4683      	mov	fp, r0
 8016dda:	e7eb      	b.n	8016db4 <_dtoa_r+0xba4>
 8016ddc:	08018e8c 	.word	0x08018e8c
 8016de0:	08018dc0 	.word	0x08018dc0
 8016de4:	08018e09 	.word	0x08018e09

08016de8 <__sflush_r>:
 8016de8:	898a      	ldrh	r2, [r1, #12]
 8016dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dee:	4605      	mov	r5, r0
 8016df0:	0710      	lsls	r0, r2, #28
 8016df2:	460c      	mov	r4, r1
 8016df4:	d458      	bmi.n	8016ea8 <__sflush_r+0xc0>
 8016df6:	684b      	ldr	r3, [r1, #4]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	dc05      	bgt.n	8016e08 <__sflush_r+0x20>
 8016dfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	dc02      	bgt.n	8016e08 <__sflush_r+0x20>
 8016e02:	2000      	movs	r0, #0
 8016e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e0a:	2e00      	cmp	r6, #0
 8016e0c:	d0f9      	beq.n	8016e02 <__sflush_r+0x1a>
 8016e0e:	2300      	movs	r3, #0
 8016e10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e14:	682f      	ldr	r7, [r5, #0]
 8016e16:	602b      	str	r3, [r5, #0]
 8016e18:	d032      	beq.n	8016e80 <__sflush_r+0x98>
 8016e1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e1c:	89a3      	ldrh	r3, [r4, #12]
 8016e1e:	075a      	lsls	r2, r3, #29
 8016e20:	d505      	bpl.n	8016e2e <__sflush_r+0x46>
 8016e22:	6863      	ldr	r3, [r4, #4]
 8016e24:	1ac0      	subs	r0, r0, r3
 8016e26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e28:	b10b      	cbz	r3, 8016e2e <__sflush_r+0x46>
 8016e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e2c:	1ac0      	subs	r0, r0, r3
 8016e2e:	2300      	movs	r3, #0
 8016e30:	4602      	mov	r2, r0
 8016e32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e34:	6a21      	ldr	r1, [r4, #32]
 8016e36:	4628      	mov	r0, r5
 8016e38:	47b0      	blx	r6
 8016e3a:	1c43      	adds	r3, r0, #1
 8016e3c:	89a3      	ldrh	r3, [r4, #12]
 8016e3e:	d106      	bne.n	8016e4e <__sflush_r+0x66>
 8016e40:	6829      	ldr	r1, [r5, #0]
 8016e42:	291d      	cmp	r1, #29
 8016e44:	d82c      	bhi.n	8016ea0 <__sflush_r+0xb8>
 8016e46:	4a2a      	ldr	r2, [pc, #168]	; (8016ef0 <__sflush_r+0x108>)
 8016e48:	40ca      	lsrs	r2, r1
 8016e4a:	07d6      	lsls	r6, r2, #31
 8016e4c:	d528      	bpl.n	8016ea0 <__sflush_r+0xb8>
 8016e4e:	2200      	movs	r2, #0
 8016e50:	6062      	str	r2, [r4, #4]
 8016e52:	04d9      	lsls	r1, r3, #19
 8016e54:	6922      	ldr	r2, [r4, #16]
 8016e56:	6022      	str	r2, [r4, #0]
 8016e58:	d504      	bpl.n	8016e64 <__sflush_r+0x7c>
 8016e5a:	1c42      	adds	r2, r0, #1
 8016e5c:	d101      	bne.n	8016e62 <__sflush_r+0x7a>
 8016e5e:	682b      	ldr	r3, [r5, #0]
 8016e60:	b903      	cbnz	r3, 8016e64 <__sflush_r+0x7c>
 8016e62:	6560      	str	r0, [r4, #84]	; 0x54
 8016e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e66:	602f      	str	r7, [r5, #0]
 8016e68:	2900      	cmp	r1, #0
 8016e6a:	d0ca      	beq.n	8016e02 <__sflush_r+0x1a>
 8016e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e70:	4299      	cmp	r1, r3
 8016e72:	d002      	beq.n	8016e7a <__sflush_r+0x92>
 8016e74:	4628      	mov	r0, r5
 8016e76:	f7fe fad1 	bl	801541c <_free_r>
 8016e7a:	2000      	movs	r0, #0
 8016e7c:	6360      	str	r0, [r4, #52]	; 0x34
 8016e7e:	e7c1      	b.n	8016e04 <__sflush_r+0x1c>
 8016e80:	6a21      	ldr	r1, [r4, #32]
 8016e82:	2301      	movs	r3, #1
 8016e84:	4628      	mov	r0, r5
 8016e86:	47b0      	blx	r6
 8016e88:	1c41      	adds	r1, r0, #1
 8016e8a:	d1c7      	bne.n	8016e1c <__sflush_r+0x34>
 8016e8c:	682b      	ldr	r3, [r5, #0]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d0c4      	beq.n	8016e1c <__sflush_r+0x34>
 8016e92:	2b1d      	cmp	r3, #29
 8016e94:	d001      	beq.n	8016e9a <__sflush_r+0xb2>
 8016e96:	2b16      	cmp	r3, #22
 8016e98:	d101      	bne.n	8016e9e <__sflush_r+0xb6>
 8016e9a:	602f      	str	r7, [r5, #0]
 8016e9c:	e7b1      	b.n	8016e02 <__sflush_r+0x1a>
 8016e9e:	89a3      	ldrh	r3, [r4, #12]
 8016ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ea4:	81a3      	strh	r3, [r4, #12]
 8016ea6:	e7ad      	b.n	8016e04 <__sflush_r+0x1c>
 8016ea8:	690f      	ldr	r7, [r1, #16]
 8016eaa:	2f00      	cmp	r7, #0
 8016eac:	d0a9      	beq.n	8016e02 <__sflush_r+0x1a>
 8016eae:	0793      	lsls	r3, r2, #30
 8016eb0:	680e      	ldr	r6, [r1, #0]
 8016eb2:	bf08      	it	eq
 8016eb4:	694b      	ldreq	r3, [r1, #20]
 8016eb6:	600f      	str	r7, [r1, #0]
 8016eb8:	bf18      	it	ne
 8016eba:	2300      	movne	r3, #0
 8016ebc:	eba6 0807 	sub.w	r8, r6, r7
 8016ec0:	608b      	str	r3, [r1, #8]
 8016ec2:	f1b8 0f00 	cmp.w	r8, #0
 8016ec6:	dd9c      	ble.n	8016e02 <__sflush_r+0x1a>
 8016ec8:	6a21      	ldr	r1, [r4, #32]
 8016eca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016ecc:	4643      	mov	r3, r8
 8016ece:	463a      	mov	r2, r7
 8016ed0:	4628      	mov	r0, r5
 8016ed2:	47b0      	blx	r6
 8016ed4:	2800      	cmp	r0, #0
 8016ed6:	dc06      	bgt.n	8016ee6 <__sflush_r+0xfe>
 8016ed8:	89a3      	ldrh	r3, [r4, #12]
 8016eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ede:	81a3      	strh	r3, [r4, #12]
 8016ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ee4:	e78e      	b.n	8016e04 <__sflush_r+0x1c>
 8016ee6:	4407      	add	r7, r0
 8016ee8:	eba8 0800 	sub.w	r8, r8, r0
 8016eec:	e7e9      	b.n	8016ec2 <__sflush_r+0xda>
 8016eee:	bf00      	nop
 8016ef0:	20400001 	.word	0x20400001

08016ef4 <_fflush_r>:
 8016ef4:	b538      	push	{r3, r4, r5, lr}
 8016ef6:	690b      	ldr	r3, [r1, #16]
 8016ef8:	4605      	mov	r5, r0
 8016efa:	460c      	mov	r4, r1
 8016efc:	b913      	cbnz	r3, 8016f04 <_fflush_r+0x10>
 8016efe:	2500      	movs	r5, #0
 8016f00:	4628      	mov	r0, r5
 8016f02:	bd38      	pop	{r3, r4, r5, pc}
 8016f04:	b118      	cbz	r0, 8016f0e <_fflush_r+0x1a>
 8016f06:	6983      	ldr	r3, [r0, #24]
 8016f08:	b90b      	cbnz	r3, 8016f0e <_fflush_r+0x1a>
 8016f0a:	f7fe f981 	bl	8015210 <__sinit>
 8016f0e:	4b14      	ldr	r3, [pc, #80]	; (8016f60 <_fflush_r+0x6c>)
 8016f10:	429c      	cmp	r4, r3
 8016f12:	d11b      	bne.n	8016f4c <_fflush_r+0x58>
 8016f14:	686c      	ldr	r4, [r5, #4]
 8016f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d0ef      	beq.n	8016efe <_fflush_r+0xa>
 8016f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f20:	07d0      	lsls	r0, r2, #31
 8016f22:	d404      	bmi.n	8016f2e <_fflush_r+0x3a>
 8016f24:	0599      	lsls	r1, r3, #22
 8016f26:	d402      	bmi.n	8016f2e <_fflush_r+0x3a>
 8016f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f2a:	f7fe fa4e 	bl	80153ca <__retarget_lock_acquire_recursive>
 8016f2e:	4628      	mov	r0, r5
 8016f30:	4621      	mov	r1, r4
 8016f32:	f7ff ff59 	bl	8016de8 <__sflush_r>
 8016f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f38:	07da      	lsls	r2, r3, #31
 8016f3a:	4605      	mov	r5, r0
 8016f3c:	d4e0      	bmi.n	8016f00 <_fflush_r+0xc>
 8016f3e:	89a3      	ldrh	r3, [r4, #12]
 8016f40:	059b      	lsls	r3, r3, #22
 8016f42:	d4dd      	bmi.n	8016f00 <_fflush_r+0xc>
 8016f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f46:	f7fe fa41 	bl	80153cc <__retarget_lock_release_recursive>
 8016f4a:	e7d9      	b.n	8016f00 <_fflush_r+0xc>
 8016f4c:	4b05      	ldr	r3, [pc, #20]	; (8016f64 <_fflush_r+0x70>)
 8016f4e:	429c      	cmp	r4, r3
 8016f50:	d101      	bne.n	8016f56 <_fflush_r+0x62>
 8016f52:	68ac      	ldr	r4, [r5, #8]
 8016f54:	e7df      	b.n	8016f16 <_fflush_r+0x22>
 8016f56:	4b04      	ldr	r3, [pc, #16]	; (8016f68 <_fflush_r+0x74>)
 8016f58:	429c      	cmp	r4, r3
 8016f5a:	bf08      	it	eq
 8016f5c:	68ec      	ldreq	r4, [r5, #12]
 8016f5e:	e7da      	b.n	8016f16 <_fflush_r+0x22>
 8016f60:	08018d6c 	.word	0x08018d6c
 8016f64:	08018d8c 	.word	0x08018d8c
 8016f68:	08018d4c 	.word	0x08018d4c

08016f6c <_localeconv_r>:
 8016f6c:	4800      	ldr	r0, [pc, #0]	; (8016f70 <_localeconv_r+0x4>)
 8016f6e:	4770      	bx	lr
 8016f70:	200002f0 	.word	0x200002f0

08016f74 <_lseek_r>:
 8016f74:	b538      	push	{r3, r4, r5, lr}
 8016f76:	4d07      	ldr	r5, [pc, #28]	; (8016f94 <_lseek_r+0x20>)
 8016f78:	4604      	mov	r4, r0
 8016f7a:	4608      	mov	r0, r1
 8016f7c:	4611      	mov	r1, r2
 8016f7e:	2200      	movs	r2, #0
 8016f80:	602a      	str	r2, [r5, #0]
 8016f82:	461a      	mov	r2, r3
 8016f84:	f7ed ff4e 	bl	8004e24 <_lseek>
 8016f88:	1c43      	adds	r3, r0, #1
 8016f8a:	d102      	bne.n	8016f92 <_lseek_r+0x1e>
 8016f8c:	682b      	ldr	r3, [r5, #0]
 8016f8e:	b103      	cbz	r3, 8016f92 <_lseek_r+0x1e>
 8016f90:	6023      	str	r3, [r4, #0]
 8016f92:	bd38      	pop	{r3, r4, r5, pc}
 8016f94:	20014ba0 	.word	0x20014ba0

08016f98 <__malloc_lock>:
 8016f98:	4801      	ldr	r0, [pc, #4]	; (8016fa0 <__malloc_lock+0x8>)
 8016f9a:	f7fe ba16 	b.w	80153ca <__retarget_lock_acquire_recursive>
 8016f9e:	bf00      	nop
 8016fa0:	20014b98 	.word	0x20014b98

08016fa4 <__malloc_unlock>:
 8016fa4:	4801      	ldr	r0, [pc, #4]	; (8016fac <__malloc_unlock+0x8>)
 8016fa6:	f7fe ba11 	b.w	80153cc <__retarget_lock_release_recursive>
 8016faa:	bf00      	nop
 8016fac:	20014b98 	.word	0x20014b98

08016fb0 <_Balloc>:
 8016fb0:	b570      	push	{r4, r5, r6, lr}
 8016fb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016fb4:	4604      	mov	r4, r0
 8016fb6:	460d      	mov	r5, r1
 8016fb8:	b976      	cbnz	r6, 8016fd8 <_Balloc+0x28>
 8016fba:	2010      	movs	r0, #16
 8016fbc:	f7fe fa08 	bl	80153d0 <malloc>
 8016fc0:	4602      	mov	r2, r0
 8016fc2:	6260      	str	r0, [r4, #36]	; 0x24
 8016fc4:	b920      	cbnz	r0, 8016fd0 <_Balloc+0x20>
 8016fc6:	4b18      	ldr	r3, [pc, #96]	; (8017028 <_Balloc+0x78>)
 8016fc8:	4818      	ldr	r0, [pc, #96]	; (801702c <_Balloc+0x7c>)
 8016fca:	2166      	movs	r1, #102	; 0x66
 8016fcc:	f000 fcea 	bl	80179a4 <__assert_func>
 8016fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016fd4:	6006      	str	r6, [r0, #0]
 8016fd6:	60c6      	str	r6, [r0, #12]
 8016fd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016fda:	68f3      	ldr	r3, [r6, #12]
 8016fdc:	b183      	cbz	r3, 8017000 <_Balloc+0x50>
 8016fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016fe0:	68db      	ldr	r3, [r3, #12]
 8016fe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016fe6:	b9b8      	cbnz	r0, 8017018 <_Balloc+0x68>
 8016fe8:	2101      	movs	r1, #1
 8016fea:	fa01 f605 	lsl.w	r6, r1, r5
 8016fee:	1d72      	adds	r2, r6, #5
 8016ff0:	0092      	lsls	r2, r2, #2
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	f000 fb5a 	bl	80176ac <_calloc_r>
 8016ff8:	b160      	cbz	r0, 8017014 <_Balloc+0x64>
 8016ffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016ffe:	e00e      	b.n	801701e <_Balloc+0x6e>
 8017000:	2221      	movs	r2, #33	; 0x21
 8017002:	2104      	movs	r1, #4
 8017004:	4620      	mov	r0, r4
 8017006:	f000 fb51 	bl	80176ac <_calloc_r>
 801700a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801700c:	60f0      	str	r0, [r6, #12]
 801700e:	68db      	ldr	r3, [r3, #12]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d1e4      	bne.n	8016fde <_Balloc+0x2e>
 8017014:	2000      	movs	r0, #0
 8017016:	bd70      	pop	{r4, r5, r6, pc}
 8017018:	6802      	ldr	r2, [r0, #0]
 801701a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801701e:	2300      	movs	r3, #0
 8017020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017024:	e7f7      	b.n	8017016 <_Balloc+0x66>
 8017026:	bf00      	nop
 8017028:	08018e16 	.word	0x08018e16
 801702c:	08018e9d 	.word	0x08018e9d

08017030 <_Bfree>:
 8017030:	b570      	push	{r4, r5, r6, lr}
 8017032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017034:	4605      	mov	r5, r0
 8017036:	460c      	mov	r4, r1
 8017038:	b976      	cbnz	r6, 8017058 <_Bfree+0x28>
 801703a:	2010      	movs	r0, #16
 801703c:	f7fe f9c8 	bl	80153d0 <malloc>
 8017040:	4602      	mov	r2, r0
 8017042:	6268      	str	r0, [r5, #36]	; 0x24
 8017044:	b920      	cbnz	r0, 8017050 <_Bfree+0x20>
 8017046:	4b09      	ldr	r3, [pc, #36]	; (801706c <_Bfree+0x3c>)
 8017048:	4809      	ldr	r0, [pc, #36]	; (8017070 <_Bfree+0x40>)
 801704a:	218a      	movs	r1, #138	; 0x8a
 801704c:	f000 fcaa 	bl	80179a4 <__assert_func>
 8017050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017054:	6006      	str	r6, [r0, #0]
 8017056:	60c6      	str	r6, [r0, #12]
 8017058:	b13c      	cbz	r4, 801706a <_Bfree+0x3a>
 801705a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801705c:	6862      	ldr	r2, [r4, #4]
 801705e:	68db      	ldr	r3, [r3, #12]
 8017060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017064:	6021      	str	r1, [r4, #0]
 8017066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801706a:	bd70      	pop	{r4, r5, r6, pc}
 801706c:	08018e16 	.word	0x08018e16
 8017070:	08018e9d 	.word	0x08018e9d

08017074 <__multadd>:
 8017074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017078:	690e      	ldr	r6, [r1, #16]
 801707a:	4607      	mov	r7, r0
 801707c:	4698      	mov	r8, r3
 801707e:	460c      	mov	r4, r1
 8017080:	f101 0014 	add.w	r0, r1, #20
 8017084:	2300      	movs	r3, #0
 8017086:	6805      	ldr	r5, [r0, #0]
 8017088:	b2a9      	uxth	r1, r5
 801708a:	fb02 8101 	mla	r1, r2, r1, r8
 801708e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8017092:	0c2d      	lsrs	r5, r5, #16
 8017094:	fb02 c505 	mla	r5, r2, r5, ip
 8017098:	b289      	uxth	r1, r1
 801709a:	3301      	adds	r3, #1
 801709c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80170a0:	429e      	cmp	r6, r3
 80170a2:	f840 1b04 	str.w	r1, [r0], #4
 80170a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80170aa:	dcec      	bgt.n	8017086 <__multadd+0x12>
 80170ac:	f1b8 0f00 	cmp.w	r8, #0
 80170b0:	d022      	beq.n	80170f8 <__multadd+0x84>
 80170b2:	68a3      	ldr	r3, [r4, #8]
 80170b4:	42b3      	cmp	r3, r6
 80170b6:	dc19      	bgt.n	80170ec <__multadd+0x78>
 80170b8:	6861      	ldr	r1, [r4, #4]
 80170ba:	4638      	mov	r0, r7
 80170bc:	3101      	adds	r1, #1
 80170be:	f7ff ff77 	bl	8016fb0 <_Balloc>
 80170c2:	4605      	mov	r5, r0
 80170c4:	b928      	cbnz	r0, 80170d2 <__multadd+0x5e>
 80170c6:	4602      	mov	r2, r0
 80170c8:	4b0d      	ldr	r3, [pc, #52]	; (8017100 <__multadd+0x8c>)
 80170ca:	480e      	ldr	r0, [pc, #56]	; (8017104 <__multadd+0x90>)
 80170cc:	21b5      	movs	r1, #181	; 0xb5
 80170ce:	f000 fc69 	bl	80179a4 <__assert_func>
 80170d2:	6922      	ldr	r2, [r4, #16]
 80170d4:	3202      	adds	r2, #2
 80170d6:	f104 010c 	add.w	r1, r4, #12
 80170da:	0092      	lsls	r2, r2, #2
 80170dc:	300c      	adds	r0, #12
 80170de:	f7fe f987 	bl	80153f0 <memcpy>
 80170e2:	4621      	mov	r1, r4
 80170e4:	4638      	mov	r0, r7
 80170e6:	f7ff ffa3 	bl	8017030 <_Bfree>
 80170ea:	462c      	mov	r4, r5
 80170ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80170f0:	3601      	adds	r6, #1
 80170f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80170f6:	6126      	str	r6, [r4, #16]
 80170f8:	4620      	mov	r0, r4
 80170fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170fe:	bf00      	nop
 8017100:	08018e8c 	.word	0x08018e8c
 8017104:	08018e9d 	.word	0x08018e9d

08017108 <__hi0bits>:
 8017108:	0c03      	lsrs	r3, r0, #16
 801710a:	041b      	lsls	r3, r3, #16
 801710c:	b9d3      	cbnz	r3, 8017144 <__hi0bits+0x3c>
 801710e:	0400      	lsls	r0, r0, #16
 8017110:	2310      	movs	r3, #16
 8017112:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017116:	bf04      	itt	eq
 8017118:	0200      	lsleq	r0, r0, #8
 801711a:	3308      	addeq	r3, #8
 801711c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017120:	bf04      	itt	eq
 8017122:	0100      	lsleq	r0, r0, #4
 8017124:	3304      	addeq	r3, #4
 8017126:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801712a:	bf04      	itt	eq
 801712c:	0080      	lsleq	r0, r0, #2
 801712e:	3302      	addeq	r3, #2
 8017130:	2800      	cmp	r0, #0
 8017132:	db05      	blt.n	8017140 <__hi0bits+0x38>
 8017134:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017138:	f103 0301 	add.w	r3, r3, #1
 801713c:	bf08      	it	eq
 801713e:	2320      	moveq	r3, #32
 8017140:	4618      	mov	r0, r3
 8017142:	4770      	bx	lr
 8017144:	2300      	movs	r3, #0
 8017146:	e7e4      	b.n	8017112 <__hi0bits+0xa>

08017148 <__lo0bits>:
 8017148:	6803      	ldr	r3, [r0, #0]
 801714a:	f013 0207 	ands.w	r2, r3, #7
 801714e:	4601      	mov	r1, r0
 8017150:	d00b      	beq.n	801716a <__lo0bits+0x22>
 8017152:	07da      	lsls	r2, r3, #31
 8017154:	d424      	bmi.n	80171a0 <__lo0bits+0x58>
 8017156:	0798      	lsls	r0, r3, #30
 8017158:	bf49      	itett	mi
 801715a:	085b      	lsrmi	r3, r3, #1
 801715c:	089b      	lsrpl	r3, r3, #2
 801715e:	2001      	movmi	r0, #1
 8017160:	600b      	strmi	r3, [r1, #0]
 8017162:	bf5c      	itt	pl
 8017164:	600b      	strpl	r3, [r1, #0]
 8017166:	2002      	movpl	r0, #2
 8017168:	4770      	bx	lr
 801716a:	b298      	uxth	r0, r3
 801716c:	b9b0      	cbnz	r0, 801719c <__lo0bits+0x54>
 801716e:	0c1b      	lsrs	r3, r3, #16
 8017170:	2010      	movs	r0, #16
 8017172:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017176:	bf04      	itt	eq
 8017178:	0a1b      	lsreq	r3, r3, #8
 801717a:	3008      	addeq	r0, #8
 801717c:	071a      	lsls	r2, r3, #28
 801717e:	bf04      	itt	eq
 8017180:	091b      	lsreq	r3, r3, #4
 8017182:	3004      	addeq	r0, #4
 8017184:	079a      	lsls	r2, r3, #30
 8017186:	bf04      	itt	eq
 8017188:	089b      	lsreq	r3, r3, #2
 801718a:	3002      	addeq	r0, #2
 801718c:	07da      	lsls	r2, r3, #31
 801718e:	d403      	bmi.n	8017198 <__lo0bits+0x50>
 8017190:	085b      	lsrs	r3, r3, #1
 8017192:	f100 0001 	add.w	r0, r0, #1
 8017196:	d005      	beq.n	80171a4 <__lo0bits+0x5c>
 8017198:	600b      	str	r3, [r1, #0]
 801719a:	4770      	bx	lr
 801719c:	4610      	mov	r0, r2
 801719e:	e7e8      	b.n	8017172 <__lo0bits+0x2a>
 80171a0:	2000      	movs	r0, #0
 80171a2:	4770      	bx	lr
 80171a4:	2020      	movs	r0, #32
 80171a6:	4770      	bx	lr

080171a8 <__i2b>:
 80171a8:	b510      	push	{r4, lr}
 80171aa:	460c      	mov	r4, r1
 80171ac:	2101      	movs	r1, #1
 80171ae:	f7ff feff 	bl	8016fb0 <_Balloc>
 80171b2:	4602      	mov	r2, r0
 80171b4:	b928      	cbnz	r0, 80171c2 <__i2b+0x1a>
 80171b6:	4b05      	ldr	r3, [pc, #20]	; (80171cc <__i2b+0x24>)
 80171b8:	4805      	ldr	r0, [pc, #20]	; (80171d0 <__i2b+0x28>)
 80171ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80171be:	f000 fbf1 	bl	80179a4 <__assert_func>
 80171c2:	2301      	movs	r3, #1
 80171c4:	6144      	str	r4, [r0, #20]
 80171c6:	6103      	str	r3, [r0, #16]
 80171c8:	bd10      	pop	{r4, pc}
 80171ca:	bf00      	nop
 80171cc:	08018e8c 	.word	0x08018e8c
 80171d0:	08018e9d 	.word	0x08018e9d

080171d4 <__multiply>:
 80171d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d8:	4614      	mov	r4, r2
 80171da:	690a      	ldr	r2, [r1, #16]
 80171dc:	6923      	ldr	r3, [r4, #16]
 80171de:	429a      	cmp	r2, r3
 80171e0:	bfb8      	it	lt
 80171e2:	460b      	movlt	r3, r1
 80171e4:	460d      	mov	r5, r1
 80171e6:	bfbc      	itt	lt
 80171e8:	4625      	movlt	r5, r4
 80171ea:	461c      	movlt	r4, r3
 80171ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80171f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80171f4:	68ab      	ldr	r3, [r5, #8]
 80171f6:	6869      	ldr	r1, [r5, #4]
 80171f8:	eb0a 0709 	add.w	r7, sl, r9
 80171fc:	42bb      	cmp	r3, r7
 80171fe:	b085      	sub	sp, #20
 8017200:	bfb8      	it	lt
 8017202:	3101      	addlt	r1, #1
 8017204:	f7ff fed4 	bl	8016fb0 <_Balloc>
 8017208:	b930      	cbnz	r0, 8017218 <__multiply+0x44>
 801720a:	4602      	mov	r2, r0
 801720c:	4b42      	ldr	r3, [pc, #264]	; (8017318 <__multiply+0x144>)
 801720e:	4843      	ldr	r0, [pc, #268]	; (801731c <__multiply+0x148>)
 8017210:	f240 115d 	movw	r1, #349	; 0x15d
 8017214:	f000 fbc6 	bl	80179a4 <__assert_func>
 8017218:	f100 0614 	add.w	r6, r0, #20
 801721c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8017220:	4633      	mov	r3, r6
 8017222:	2200      	movs	r2, #0
 8017224:	4543      	cmp	r3, r8
 8017226:	d31e      	bcc.n	8017266 <__multiply+0x92>
 8017228:	f105 0c14 	add.w	ip, r5, #20
 801722c:	f104 0314 	add.w	r3, r4, #20
 8017230:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8017234:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8017238:	9202      	str	r2, [sp, #8]
 801723a:	ebac 0205 	sub.w	r2, ip, r5
 801723e:	3a15      	subs	r2, #21
 8017240:	f022 0203 	bic.w	r2, r2, #3
 8017244:	3204      	adds	r2, #4
 8017246:	f105 0115 	add.w	r1, r5, #21
 801724a:	458c      	cmp	ip, r1
 801724c:	bf38      	it	cc
 801724e:	2204      	movcc	r2, #4
 8017250:	9201      	str	r2, [sp, #4]
 8017252:	9a02      	ldr	r2, [sp, #8]
 8017254:	9303      	str	r3, [sp, #12]
 8017256:	429a      	cmp	r2, r3
 8017258:	d808      	bhi.n	801726c <__multiply+0x98>
 801725a:	2f00      	cmp	r7, #0
 801725c:	dc55      	bgt.n	801730a <__multiply+0x136>
 801725e:	6107      	str	r7, [r0, #16]
 8017260:	b005      	add	sp, #20
 8017262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017266:	f843 2b04 	str.w	r2, [r3], #4
 801726a:	e7db      	b.n	8017224 <__multiply+0x50>
 801726c:	f8b3 a000 	ldrh.w	sl, [r3]
 8017270:	f1ba 0f00 	cmp.w	sl, #0
 8017274:	d020      	beq.n	80172b8 <__multiply+0xe4>
 8017276:	f105 0e14 	add.w	lr, r5, #20
 801727a:	46b1      	mov	r9, r6
 801727c:	2200      	movs	r2, #0
 801727e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8017282:	f8d9 b000 	ldr.w	fp, [r9]
 8017286:	b2a1      	uxth	r1, r4
 8017288:	fa1f fb8b 	uxth.w	fp, fp
 801728c:	fb0a b101 	mla	r1, sl, r1, fp
 8017290:	4411      	add	r1, r2
 8017292:	f8d9 2000 	ldr.w	r2, [r9]
 8017296:	0c24      	lsrs	r4, r4, #16
 8017298:	0c12      	lsrs	r2, r2, #16
 801729a:	fb0a 2404 	mla	r4, sl, r4, r2
 801729e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80172a2:	b289      	uxth	r1, r1
 80172a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80172a8:	45f4      	cmp	ip, lr
 80172aa:	f849 1b04 	str.w	r1, [r9], #4
 80172ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80172b2:	d8e4      	bhi.n	801727e <__multiply+0xaa>
 80172b4:	9901      	ldr	r1, [sp, #4]
 80172b6:	5072      	str	r2, [r6, r1]
 80172b8:	9a03      	ldr	r2, [sp, #12]
 80172ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80172be:	3304      	adds	r3, #4
 80172c0:	f1b9 0f00 	cmp.w	r9, #0
 80172c4:	d01f      	beq.n	8017306 <__multiply+0x132>
 80172c6:	6834      	ldr	r4, [r6, #0]
 80172c8:	f105 0114 	add.w	r1, r5, #20
 80172cc:	46b6      	mov	lr, r6
 80172ce:	f04f 0a00 	mov.w	sl, #0
 80172d2:	880a      	ldrh	r2, [r1, #0]
 80172d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80172d8:	fb09 b202 	mla	r2, r9, r2, fp
 80172dc:	4492      	add	sl, r2
 80172de:	b2a4      	uxth	r4, r4
 80172e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80172e4:	f84e 4b04 	str.w	r4, [lr], #4
 80172e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80172ec:	f8be 2000 	ldrh.w	r2, [lr]
 80172f0:	0c24      	lsrs	r4, r4, #16
 80172f2:	fb09 2404 	mla	r4, r9, r4, r2
 80172f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80172fa:	458c      	cmp	ip, r1
 80172fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017300:	d8e7      	bhi.n	80172d2 <__multiply+0xfe>
 8017302:	9a01      	ldr	r2, [sp, #4]
 8017304:	50b4      	str	r4, [r6, r2]
 8017306:	3604      	adds	r6, #4
 8017308:	e7a3      	b.n	8017252 <__multiply+0x7e>
 801730a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801730e:	2b00      	cmp	r3, #0
 8017310:	d1a5      	bne.n	801725e <__multiply+0x8a>
 8017312:	3f01      	subs	r7, #1
 8017314:	e7a1      	b.n	801725a <__multiply+0x86>
 8017316:	bf00      	nop
 8017318:	08018e8c 	.word	0x08018e8c
 801731c:	08018e9d 	.word	0x08018e9d

08017320 <__pow5mult>:
 8017320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017324:	4615      	mov	r5, r2
 8017326:	f012 0203 	ands.w	r2, r2, #3
 801732a:	4606      	mov	r6, r0
 801732c:	460f      	mov	r7, r1
 801732e:	d007      	beq.n	8017340 <__pow5mult+0x20>
 8017330:	4c25      	ldr	r4, [pc, #148]	; (80173c8 <__pow5mult+0xa8>)
 8017332:	3a01      	subs	r2, #1
 8017334:	2300      	movs	r3, #0
 8017336:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801733a:	f7ff fe9b 	bl	8017074 <__multadd>
 801733e:	4607      	mov	r7, r0
 8017340:	10ad      	asrs	r5, r5, #2
 8017342:	d03d      	beq.n	80173c0 <__pow5mult+0xa0>
 8017344:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017346:	b97c      	cbnz	r4, 8017368 <__pow5mult+0x48>
 8017348:	2010      	movs	r0, #16
 801734a:	f7fe f841 	bl	80153d0 <malloc>
 801734e:	4602      	mov	r2, r0
 8017350:	6270      	str	r0, [r6, #36]	; 0x24
 8017352:	b928      	cbnz	r0, 8017360 <__pow5mult+0x40>
 8017354:	4b1d      	ldr	r3, [pc, #116]	; (80173cc <__pow5mult+0xac>)
 8017356:	481e      	ldr	r0, [pc, #120]	; (80173d0 <__pow5mult+0xb0>)
 8017358:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801735c:	f000 fb22 	bl	80179a4 <__assert_func>
 8017360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017364:	6004      	str	r4, [r0, #0]
 8017366:	60c4      	str	r4, [r0, #12]
 8017368:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801736c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017370:	b94c      	cbnz	r4, 8017386 <__pow5mult+0x66>
 8017372:	f240 2171 	movw	r1, #625	; 0x271
 8017376:	4630      	mov	r0, r6
 8017378:	f7ff ff16 	bl	80171a8 <__i2b>
 801737c:	2300      	movs	r3, #0
 801737e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017382:	4604      	mov	r4, r0
 8017384:	6003      	str	r3, [r0, #0]
 8017386:	f04f 0900 	mov.w	r9, #0
 801738a:	07eb      	lsls	r3, r5, #31
 801738c:	d50a      	bpl.n	80173a4 <__pow5mult+0x84>
 801738e:	4639      	mov	r1, r7
 8017390:	4622      	mov	r2, r4
 8017392:	4630      	mov	r0, r6
 8017394:	f7ff ff1e 	bl	80171d4 <__multiply>
 8017398:	4639      	mov	r1, r7
 801739a:	4680      	mov	r8, r0
 801739c:	4630      	mov	r0, r6
 801739e:	f7ff fe47 	bl	8017030 <_Bfree>
 80173a2:	4647      	mov	r7, r8
 80173a4:	106d      	asrs	r5, r5, #1
 80173a6:	d00b      	beq.n	80173c0 <__pow5mult+0xa0>
 80173a8:	6820      	ldr	r0, [r4, #0]
 80173aa:	b938      	cbnz	r0, 80173bc <__pow5mult+0x9c>
 80173ac:	4622      	mov	r2, r4
 80173ae:	4621      	mov	r1, r4
 80173b0:	4630      	mov	r0, r6
 80173b2:	f7ff ff0f 	bl	80171d4 <__multiply>
 80173b6:	6020      	str	r0, [r4, #0]
 80173b8:	f8c0 9000 	str.w	r9, [r0]
 80173bc:	4604      	mov	r4, r0
 80173be:	e7e4      	b.n	801738a <__pow5mult+0x6a>
 80173c0:	4638      	mov	r0, r7
 80173c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173c6:	bf00      	nop
 80173c8:	08018ff0 	.word	0x08018ff0
 80173cc:	08018e16 	.word	0x08018e16
 80173d0:	08018e9d 	.word	0x08018e9d

080173d4 <__lshift>:
 80173d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173d8:	460c      	mov	r4, r1
 80173da:	6849      	ldr	r1, [r1, #4]
 80173dc:	6923      	ldr	r3, [r4, #16]
 80173de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80173e2:	68a3      	ldr	r3, [r4, #8]
 80173e4:	4607      	mov	r7, r0
 80173e6:	4691      	mov	r9, r2
 80173e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80173ec:	f108 0601 	add.w	r6, r8, #1
 80173f0:	42b3      	cmp	r3, r6
 80173f2:	db0b      	blt.n	801740c <__lshift+0x38>
 80173f4:	4638      	mov	r0, r7
 80173f6:	f7ff fddb 	bl	8016fb0 <_Balloc>
 80173fa:	4605      	mov	r5, r0
 80173fc:	b948      	cbnz	r0, 8017412 <__lshift+0x3e>
 80173fe:	4602      	mov	r2, r0
 8017400:	4b28      	ldr	r3, [pc, #160]	; (80174a4 <__lshift+0xd0>)
 8017402:	4829      	ldr	r0, [pc, #164]	; (80174a8 <__lshift+0xd4>)
 8017404:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017408:	f000 facc 	bl	80179a4 <__assert_func>
 801740c:	3101      	adds	r1, #1
 801740e:	005b      	lsls	r3, r3, #1
 8017410:	e7ee      	b.n	80173f0 <__lshift+0x1c>
 8017412:	2300      	movs	r3, #0
 8017414:	f100 0114 	add.w	r1, r0, #20
 8017418:	f100 0210 	add.w	r2, r0, #16
 801741c:	4618      	mov	r0, r3
 801741e:	4553      	cmp	r3, sl
 8017420:	db33      	blt.n	801748a <__lshift+0xb6>
 8017422:	6920      	ldr	r0, [r4, #16]
 8017424:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017428:	f104 0314 	add.w	r3, r4, #20
 801742c:	f019 091f 	ands.w	r9, r9, #31
 8017430:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017434:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017438:	d02b      	beq.n	8017492 <__lshift+0xbe>
 801743a:	f1c9 0e20 	rsb	lr, r9, #32
 801743e:	468a      	mov	sl, r1
 8017440:	2200      	movs	r2, #0
 8017442:	6818      	ldr	r0, [r3, #0]
 8017444:	fa00 f009 	lsl.w	r0, r0, r9
 8017448:	4302      	orrs	r2, r0
 801744a:	f84a 2b04 	str.w	r2, [sl], #4
 801744e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017452:	459c      	cmp	ip, r3
 8017454:	fa22 f20e 	lsr.w	r2, r2, lr
 8017458:	d8f3      	bhi.n	8017442 <__lshift+0x6e>
 801745a:	ebac 0304 	sub.w	r3, ip, r4
 801745e:	3b15      	subs	r3, #21
 8017460:	f023 0303 	bic.w	r3, r3, #3
 8017464:	3304      	adds	r3, #4
 8017466:	f104 0015 	add.w	r0, r4, #21
 801746a:	4584      	cmp	ip, r0
 801746c:	bf38      	it	cc
 801746e:	2304      	movcc	r3, #4
 8017470:	50ca      	str	r2, [r1, r3]
 8017472:	b10a      	cbz	r2, 8017478 <__lshift+0xa4>
 8017474:	f108 0602 	add.w	r6, r8, #2
 8017478:	3e01      	subs	r6, #1
 801747a:	4638      	mov	r0, r7
 801747c:	612e      	str	r6, [r5, #16]
 801747e:	4621      	mov	r1, r4
 8017480:	f7ff fdd6 	bl	8017030 <_Bfree>
 8017484:	4628      	mov	r0, r5
 8017486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801748a:	f842 0f04 	str.w	r0, [r2, #4]!
 801748e:	3301      	adds	r3, #1
 8017490:	e7c5      	b.n	801741e <__lshift+0x4a>
 8017492:	3904      	subs	r1, #4
 8017494:	f853 2b04 	ldr.w	r2, [r3], #4
 8017498:	f841 2f04 	str.w	r2, [r1, #4]!
 801749c:	459c      	cmp	ip, r3
 801749e:	d8f9      	bhi.n	8017494 <__lshift+0xc0>
 80174a0:	e7ea      	b.n	8017478 <__lshift+0xa4>
 80174a2:	bf00      	nop
 80174a4:	08018e8c 	.word	0x08018e8c
 80174a8:	08018e9d 	.word	0x08018e9d

080174ac <__mcmp>:
 80174ac:	b530      	push	{r4, r5, lr}
 80174ae:	6902      	ldr	r2, [r0, #16]
 80174b0:	690c      	ldr	r4, [r1, #16]
 80174b2:	1b12      	subs	r2, r2, r4
 80174b4:	d10e      	bne.n	80174d4 <__mcmp+0x28>
 80174b6:	f100 0314 	add.w	r3, r0, #20
 80174ba:	3114      	adds	r1, #20
 80174bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80174c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80174c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80174c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80174cc:	42a5      	cmp	r5, r4
 80174ce:	d003      	beq.n	80174d8 <__mcmp+0x2c>
 80174d0:	d305      	bcc.n	80174de <__mcmp+0x32>
 80174d2:	2201      	movs	r2, #1
 80174d4:	4610      	mov	r0, r2
 80174d6:	bd30      	pop	{r4, r5, pc}
 80174d8:	4283      	cmp	r3, r0
 80174da:	d3f3      	bcc.n	80174c4 <__mcmp+0x18>
 80174dc:	e7fa      	b.n	80174d4 <__mcmp+0x28>
 80174de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80174e2:	e7f7      	b.n	80174d4 <__mcmp+0x28>

080174e4 <__mdiff>:
 80174e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174e8:	460c      	mov	r4, r1
 80174ea:	4606      	mov	r6, r0
 80174ec:	4611      	mov	r1, r2
 80174ee:	4620      	mov	r0, r4
 80174f0:	4617      	mov	r7, r2
 80174f2:	f7ff ffdb 	bl	80174ac <__mcmp>
 80174f6:	1e05      	subs	r5, r0, #0
 80174f8:	d110      	bne.n	801751c <__mdiff+0x38>
 80174fa:	4629      	mov	r1, r5
 80174fc:	4630      	mov	r0, r6
 80174fe:	f7ff fd57 	bl	8016fb0 <_Balloc>
 8017502:	b930      	cbnz	r0, 8017512 <__mdiff+0x2e>
 8017504:	4b39      	ldr	r3, [pc, #228]	; (80175ec <__mdiff+0x108>)
 8017506:	4602      	mov	r2, r0
 8017508:	f240 2132 	movw	r1, #562	; 0x232
 801750c:	4838      	ldr	r0, [pc, #224]	; (80175f0 <__mdiff+0x10c>)
 801750e:	f000 fa49 	bl	80179a4 <__assert_func>
 8017512:	2301      	movs	r3, #1
 8017514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801751c:	bfa4      	itt	ge
 801751e:	463b      	movge	r3, r7
 8017520:	4627      	movge	r7, r4
 8017522:	4630      	mov	r0, r6
 8017524:	6879      	ldr	r1, [r7, #4]
 8017526:	bfa6      	itte	ge
 8017528:	461c      	movge	r4, r3
 801752a:	2500      	movge	r5, #0
 801752c:	2501      	movlt	r5, #1
 801752e:	f7ff fd3f 	bl	8016fb0 <_Balloc>
 8017532:	b920      	cbnz	r0, 801753e <__mdiff+0x5a>
 8017534:	4b2d      	ldr	r3, [pc, #180]	; (80175ec <__mdiff+0x108>)
 8017536:	4602      	mov	r2, r0
 8017538:	f44f 7110 	mov.w	r1, #576	; 0x240
 801753c:	e7e6      	b.n	801750c <__mdiff+0x28>
 801753e:	693e      	ldr	r6, [r7, #16]
 8017540:	60c5      	str	r5, [r0, #12]
 8017542:	6925      	ldr	r5, [r4, #16]
 8017544:	f107 0114 	add.w	r1, r7, #20
 8017548:	f104 0914 	add.w	r9, r4, #20
 801754c:	f100 0e14 	add.w	lr, r0, #20
 8017550:	f107 0210 	add.w	r2, r7, #16
 8017554:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8017558:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801755c:	46f2      	mov	sl, lr
 801755e:	2700      	movs	r7, #0
 8017560:	f859 3b04 	ldr.w	r3, [r9], #4
 8017564:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017568:	fa1f f883 	uxth.w	r8, r3
 801756c:	fa17 f78b 	uxtah	r7, r7, fp
 8017570:	0c1b      	lsrs	r3, r3, #16
 8017572:	eba7 0808 	sub.w	r8, r7, r8
 8017576:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801757a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801757e:	fa1f f888 	uxth.w	r8, r8
 8017582:	141f      	asrs	r7, r3, #16
 8017584:	454d      	cmp	r5, r9
 8017586:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801758a:	f84a 3b04 	str.w	r3, [sl], #4
 801758e:	d8e7      	bhi.n	8017560 <__mdiff+0x7c>
 8017590:	1b2b      	subs	r3, r5, r4
 8017592:	3b15      	subs	r3, #21
 8017594:	f023 0303 	bic.w	r3, r3, #3
 8017598:	3304      	adds	r3, #4
 801759a:	3415      	adds	r4, #21
 801759c:	42a5      	cmp	r5, r4
 801759e:	bf38      	it	cc
 80175a0:	2304      	movcc	r3, #4
 80175a2:	4419      	add	r1, r3
 80175a4:	4473      	add	r3, lr
 80175a6:	469e      	mov	lr, r3
 80175a8:	460d      	mov	r5, r1
 80175aa:	4565      	cmp	r5, ip
 80175ac:	d30e      	bcc.n	80175cc <__mdiff+0xe8>
 80175ae:	f10c 0203 	add.w	r2, ip, #3
 80175b2:	1a52      	subs	r2, r2, r1
 80175b4:	f022 0203 	bic.w	r2, r2, #3
 80175b8:	3903      	subs	r1, #3
 80175ba:	458c      	cmp	ip, r1
 80175bc:	bf38      	it	cc
 80175be:	2200      	movcc	r2, #0
 80175c0:	441a      	add	r2, r3
 80175c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80175c6:	b17b      	cbz	r3, 80175e8 <__mdiff+0x104>
 80175c8:	6106      	str	r6, [r0, #16]
 80175ca:	e7a5      	b.n	8017518 <__mdiff+0x34>
 80175cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80175d0:	fa17 f488 	uxtah	r4, r7, r8
 80175d4:	1422      	asrs	r2, r4, #16
 80175d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80175da:	b2a4      	uxth	r4, r4
 80175dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80175e0:	f84e 4b04 	str.w	r4, [lr], #4
 80175e4:	1417      	asrs	r7, r2, #16
 80175e6:	e7e0      	b.n	80175aa <__mdiff+0xc6>
 80175e8:	3e01      	subs	r6, #1
 80175ea:	e7ea      	b.n	80175c2 <__mdiff+0xde>
 80175ec:	08018e8c 	.word	0x08018e8c
 80175f0:	08018e9d 	.word	0x08018e9d

080175f4 <__d2b>:
 80175f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80175f8:	4689      	mov	r9, r1
 80175fa:	2101      	movs	r1, #1
 80175fc:	ec57 6b10 	vmov	r6, r7, d0
 8017600:	4690      	mov	r8, r2
 8017602:	f7ff fcd5 	bl	8016fb0 <_Balloc>
 8017606:	4604      	mov	r4, r0
 8017608:	b930      	cbnz	r0, 8017618 <__d2b+0x24>
 801760a:	4602      	mov	r2, r0
 801760c:	4b25      	ldr	r3, [pc, #148]	; (80176a4 <__d2b+0xb0>)
 801760e:	4826      	ldr	r0, [pc, #152]	; (80176a8 <__d2b+0xb4>)
 8017610:	f240 310a 	movw	r1, #778	; 0x30a
 8017614:	f000 f9c6 	bl	80179a4 <__assert_func>
 8017618:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801761c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017620:	bb35      	cbnz	r5, 8017670 <__d2b+0x7c>
 8017622:	2e00      	cmp	r6, #0
 8017624:	9301      	str	r3, [sp, #4]
 8017626:	d028      	beq.n	801767a <__d2b+0x86>
 8017628:	4668      	mov	r0, sp
 801762a:	9600      	str	r6, [sp, #0]
 801762c:	f7ff fd8c 	bl	8017148 <__lo0bits>
 8017630:	9900      	ldr	r1, [sp, #0]
 8017632:	b300      	cbz	r0, 8017676 <__d2b+0x82>
 8017634:	9a01      	ldr	r2, [sp, #4]
 8017636:	f1c0 0320 	rsb	r3, r0, #32
 801763a:	fa02 f303 	lsl.w	r3, r2, r3
 801763e:	430b      	orrs	r3, r1
 8017640:	40c2      	lsrs	r2, r0
 8017642:	6163      	str	r3, [r4, #20]
 8017644:	9201      	str	r2, [sp, #4]
 8017646:	9b01      	ldr	r3, [sp, #4]
 8017648:	61a3      	str	r3, [r4, #24]
 801764a:	2b00      	cmp	r3, #0
 801764c:	bf14      	ite	ne
 801764e:	2202      	movne	r2, #2
 8017650:	2201      	moveq	r2, #1
 8017652:	6122      	str	r2, [r4, #16]
 8017654:	b1d5      	cbz	r5, 801768c <__d2b+0x98>
 8017656:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801765a:	4405      	add	r5, r0
 801765c:	f8c9 5000 	str.w	r5, [r9]
 8017660:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017664:	f8c8 0000 	str.w	r0, [r8]
 8017668:	4620      	mov	r0, r4
 801766a:	b003      	add	sp, #12
 801766c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017674:	e7d5      	b.n	8017622 <__d2b+0x2e>
 8017676:	6161      	str	r1, [r4, #20]
 8017678:	e7e5      	b.n	8017646 <__d2b+0x52>
 801767a:	a801      	add	r0, sp, #4
 801767c:	f7ff fd64 	bl	8017148 <__lo0bits>
 8017680:	9b01      	ldr	r3, [sp, #4]
 8017682:	6163      	str	r3, [r4, #20]
 8017684:	2201      	movs	r2, #1
 8017686:	6122      	str	r2, [r4, #16]
 8017688:	3020      	adds	r0, #32
 801768a:	e7e3      	b.n	8017654 <__d2b+0x60>
 801768c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017690:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017694:	f8c9 0000 	str.w	r0, [r9]
 8017698:	6918      	ldr	r0, [r3, #16]
 801769a:	f7ff fd35 	bl	8017108 <__hi0bits>
 801769e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80176a2:	e7df      	b.n	8017664 <__d2b+0x70>
 80176a4:	08018e8c 	.word	0x08018e8c
 80176a8:	08018e9d 	.word	0x08018e9d

080176ac <_calloc_r>:
 80176ac:	b513      	push	{r0, r1, r4, lr}
 80176ae:	434a      	muls	r2, r1
 80176b0:	4611      	mov	r1, r2
 80176b2:	9201      	str	r2, [sp, #4]
 80176b4:	f7fd ff02 	bl	80154bc <_malloc_r>
 80176b8:	4604      	mov	r4, r0
 80176ba:	b118      	cbz	r0, 80176c4 <_calloc_r+0x18>
 80176bc:	9a01      	ldr	r2, [sp, #4]
 80176be:	2100      	movs	r1, #0
 80176c0:	f7fd fea4 	bl	801540c <memset>
 80176c4:	4620      	mov	r0, r4
 80176c6:	b002      	add	sp, #8
 80176c8:	bd10      	pop	{r4, pc}

080176ca <__ssputs_r>:
 80176ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176ce:	688e      	ldr	r6, [r1, #8]
 80176d0:	429e      	cmp	r6, r3
 80176d2:	4682      	mov	sl, r0
 80176d4:	460c      	mov	r4, r1
 80176d6:	4690      	mov	r8, r2
 80176d8:	461f      	mov	r7, r3
 80176da:	d838      	bhi.n	801774e <__ssputs_r+0x84>
 80176dc:	898a      	ldrh	r2, [r1, #12]
 80176de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80176e2:	d032      	beq.n	801774a <__ssputs_r+0x80>
 80176e4:	6825      	ldr	r5, [r4, #0]
 80176e6:	6909      	ldr	r1, [r1, #16]
 80176e8:	eba5 0901 	sub.w	r9, r5, r1
 80176ec:	6965      	ldr	r5, [r4, #20]
 80176ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80176f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80176f6:	3301      	adds	r3, #1
 80176f8:	444b      	add	r3, r9
 80176fa:	106d      	asrs	r5, r5, #1
 80176fc:	429d      	cmp	r5, r3
 80176fe:	bf38      	it	cc
 8017700:	461d      	movcc	r5, r3
 8017702:	0553      	lsls	r3, r2, #21
 8017704:	d531      	bpl.n	801776a <__ssputs_r+0xa0>
 8017706:	4629      	mov	r1, r5
 8017708:	f7fd fed8 	bl	80154bc <_malloc_r>
 801770c:	4606      	mov	r6, r0
 801770e:	b950      	cbnz	r0, 8017726 <__ssputs_r+0x5c>
 8017710:	230c      	movs	r3, #12
 8017712:	f8ca 3000 	str.w	r3, [sl]
 8017716:	89a3      	ldrh	r3, [r4, #12]
 8017718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801771c:	81a3      	strh	r3, [r4, #12]
 801771e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017726:	6921      	ldr	r1, [r4, #16]
 8017728:	464a      	mov	r2, r9
 801772a:	f7fd fe61 	bl	80153f0 <memcpy>
 801772e:	89a3      	ldrh	r3, [r4, #12]
 8017730:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017738:	81a3      	strh	r3, [r4, #12]
 801773a:	6126      	str	r6, [r4, #16]
 801773c:	6165      	str	r5, [r4, #20]
 801773e:	444e      	add	r6, r9
 8017740:	eba5 0509 	sub.w	r5, r5, r9
 8017744:	6026      	str	r6, [r4, #0]
 8017746:	60a5      	str	r5, [r4, #8]
 8017748:	463e      	mov	r6, r7
 801774a:	42be      	cmp	r6, r7
 801774c:	d900      	bls.n	8017750 <__ssputs_r+0x86>
 801774e:	463e      	mov	r6, r7
 8017750:	4632      	mov	r2, r6
 8017752:	6820      	ldr	r0, [r4, #0]
 8017754:	4641      	mov	r1, r8
 8017756:	f000 f967 	bl	8017a28 <memmove>
 801775a:	68a3      	ldr	r3, [r4, #8]
 801775c:	6822      	ldr	r2, [r4, #0]
 801775e:	1b9b      	subs	r3, r3, r6
 8017760:	4432      	add	r2, r6
 8017762:	60a3      	str	r3, [r4, #8]
 8017764:	6022      	str	r2, [r4, #0]
 8017766:	2000      	movs	r0, #0
 8017768:	e7db      	b.n	8017722 <__ssputs_r+0x58>
 801776a:	462a      	mov	r2, r5
 801776c:	f000 f976 	bl	8017a5c <_realloc_r>
 8017770:	4606      	mov	r6, r0
 8017772:	2800      	cmp	r0, #0
 8017774:	d1e1      	bne.n	801773a <__ssputs_r+0x70>
 8017776:	6921      	ldr	r1, [r4, #16]
 8017778:	4650      	mov	r0, sl
 801777a:	f7fd fe4f 	bl	801541c <_free_r>
 801777e:	e7c7      	b.n	8017710 <__ssputs_r+0x46>

08017780 <_svfiprintf_r>:
 8017780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017784:	4698      	mov	r8, r3
 8017786:	898b      	ldrh	r3, [r1, #12]
 8017788:	061b      	lsls	r3, r3, #24
 801778a:	b09d      	sub	sp, #116	; 0x74
 801778c:	4607      	mov	r7, r0
 801778e:	460d      	mov	r5, r1
 8017790:	4614      	mov	r4, r2
 8017792:	d50e      	bpl.n	80177b2 <_svfiprintf_r+0x32>
 8017794:	690b      	ldr	r3, [r1, #16]
 8017796:	b963      	cbnz	r3, 80177b2 <_svfiprintf_r+0x32>
 8017798:	2140      	movs	r1, #64	; 0x40
 801779a:	f7fd fe8f 	bl	80154bc <_malloc_r>
 801779e:	6028      	str	r0, [r5, #0]
 80177a0:	6128      	str	r0, [r5, #16]
 80177a2:	b920      	cbnz	r0, 80177ae <_svfiprintf_r+0x2e>
 80177a4:	230c      	movs	r3, #12
 80177a6:	603b      	str	r3, [r7, #0]
 80177a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80177ac:	e0d1      	b.n	8017952 <_svfiprintf_r+0x1d2>
 80177ae:	2340      	movs	r3, #64	; 0x40
 80177b0:	616b      	str	r3, [r5, #20]
 80177b2:	2300      	movs	r3, #0
 80177b4:	9309      	str	r3, [sp, #36]	; 0x24
 80177b6:	2320      	movs	r3, #32
 80177b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80177bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80177c0:	2330      	movs	r3, #48	; 0x30
 80177c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801796c <_svfiprintf_r+0x1ec>
 80177c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80177ca:	f04f 0901 	mov.w	r9, #1
 80177ce:	4623      	mov	r3, r4
 80177d0:	469a      	mov	sl, r3
 80177d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177d6:	b10a      	cbz	r2, 80177dc <_svfiprintf_r+0x5c>
 80177d8:	2a25      	cmp	r2, #37	; 0x25
 80177da:	d1f9      	bne.n	80177d0 <_svfiprintf_r+0x50>
 80177dc:	ebba 0b04 	subs.w	fp, sl, r4
 80177e0:	d00b      	beq.n	80177fa <_svfiprintf_r+0x7a>
 80177e2:	465b      	mov	r3, fp
 80177e4:	4622      	mov	r2, r4
 80177e6:	4629      	mov	r1, r5
 80177e8:	4638      	mov	r0, r7
 80177ea:	f7ff ff6e 	bl	80176ca <__ssputs_r>
 80177ee:	3001      	adds	r0, #1
 80177f0:	f000 80aa 	beq.w	8017948 <_svfiprintf_r+0x1c8>
 80177f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177f6:	445a      	add	r2, fp
 80177f8:	9209      	str	r2, [sp, #36]	; 0x24
 80177fa:	f89a 3000 	ldrb.w	r3, [sl]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	f000 80a2 	beq.w	8017948 <_svfiprintf_r+0x1c8>
 8017804:	2300      	movs	r3, #0
 8017806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801780a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801780e:	f10a 0a01 	add.w	sl, sl, #1
 8017812:	9304      	str	r3, [sp, #16]
 8017814:	9307      	str	r3, [sp, #28]
 8017816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801781a:	931a      	str	r3, [sp, #104]	; 0x68
 801781c:	4654      	mov	r4, sl
 801781e:	2205      	movs	r2, #5
 8017820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017824:	4851      	ldr	r0, [pc, #324]	; (801796c <_svfiprintf_r+0x1ec>)
 8017826:	f7e8 fcdb 	bl	80001e0 <memchr>
 801782a:	9a04      	ldr	r2, [sp, #16]
 801782c:	b9d8      	cbnz	r0, 8017866 <_svfiprintf_r+0xe6>
 801782e:	06d0      	lsls	r0, r2, #27
 8017830:	bf44      	itt	mi
 8017832:	2320      	movmi	r3, #32
 8017834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017838:	0711      	lsls	r1, r2, #28
 801783a:	bf44      	itt	mi
 801783c:	232b      	movmi	r3, #43	; 0x2b
 801783e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017842:	f89a 3000 	ldrb.w	r3, [sl]
 8017846:	2b2a      	cmp	r3, #42	; 0x2a
 8017848:	d015      	beq.n	8017876 <_svfiprintf_r+0xf6>
 801784a:	9a07      	ldr	r2, [sp, #28]
 801784c:	4654      	mov	r4, sl
 801784e:	2000      	movs	r0, #0
 8017850:	f04f 0c0a 	mov.w	ip, #10
 8017854:	4621      	mov	r1, r4
 8017856:	f811 3b01 	ldrb.w	r3, [r1], #1
 801785a:	3b30      	subs	r3, #48	; 0x30
 801785c:	2b09      	cmp	r3, #9
 801785e:	d94e      	bls.n	80178fe <_svfiprintf_r+0x17e>
 8017860:	b1b0      	cbz	r0, 8017890 <_svfiprintf_r+0x110>
 8017862:	9207      	str	r2, [sp, #28]
 8017864:	e014      	b.n	8017890 <_svfiprintf_r+0x110>
 8017866:	eba0 0308 	sub.w	r3, r0, r8
 801786a:	fa09 f303 	lsl.w	r3, r9, r3
 801786e:	4313      	orrs	r3, r2
 8017870:	9304      	str	r3, [sp, #16]
 8017872:	46a2      	mov	sl, r4
 8017874:	e7d2      	b.n	801781c <_svfiprintf_r+0x9c>
 8017876:	9b03      	ldr	r3, [sp, #12]
 8017878:	1d19      	adds	r1, r3, #4
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	9103      	str	r1, [sp, #12]
 801787e:	2b00      	cmp	r3, #0
 8017880:	bfbb      	ittet	lt
 8017882:	425b      	neglt	r3, r3
 8017884:	f042 0202 	orrlt.w	r2, r2, #2
 8017888:	9307      	strge	r3, [sp, #28]
 801788a:	9307      	strlt	r3, [sp, #28]
 801788c:	bfb8      	it	lt
 801788e:	9204      	strlt	r2, [sp, #16]
 8017890:	7823      	ldrb	r3, [r4, #0]
 8017892:	2b2e      	cmp	r3, #46	; 0x2e
 8017894:	d10c      	bne.n	80178b0 <_svfiprintf_r+0x130>
 8017896:	7863      	ldrb	r3, [r4, #1]
 8017898:	2b2a      	cmp	r3, #42	; 0x2a
 801789a:	d135      	bne.n	8017908 <_svfiprintf_r+0x188>
 801789c:	9b03      	ldr	r3, [sp, #12]
 801789e:	1d1a      	adds	r2, r3, #4
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	9203      	str	r2, [sp, #12]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	bfb8      	it	lt
 80178a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80178ac:	3402      	adds	r4, #2
 80178ae:	9305      	str	r3, [sp, #20]
 80178b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801797c <_svfiprintf_r+0x1fc>
 80178b4:	7821      	ldrb	r1, [r4, #0]
 80178b6:	2203      	movs	r2, #3
 80178b8:	4650      	mov	r0, sl
 80178ba:	f7e8 fc91 	bl	80001e0 <memchr>
 80178be:	b140      	cbz	r0, 80178d2 <_svfiprintf_r+0x152>
 80178c0:	2340      	movs	r3, #64	; 0x40
 80178c2:	eba0 000a 	sub.w	r0, r0, sl
 80178c6:	fa03 f000 	lsl.w	r0, r3, r0
 80178ca:	9b04      	ldr	r3, [sp, #16]
 80178cc:	4303      	orrs	r3, r0
 80178ce:	3401      	adds	r4, #1
 80178d0:	9304      	str	r3, [sp, #16]
 80178d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178d6:	4826      	ldr	r0, [pc, #152]	; (8017970 <_svfiprintf_r+0x1f0>)
 80178d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80178dc:	2206      	movs	r2, #6
 80178de:	f7e8 fc7f 	bl	80001e0 <memchr>
 80178e2:	2800      	cmp	r0, #0
 80178e4:	d038      	beq.n	8017958 <_svfiprintf_r+0x1d8>
 80178e6:	4b23      	ldr	r3, [pc, #140]	; (8017974 <_svfiprintf_r+0x1f4>)
 80178e8:	bb1b      	cbnz	r3, 8017932 <_svfiprintf_r+0x1b2>
 80178ea:	9b03      	ldr	r3, [sp, #12]
 80178ec:	3307      	adds	r3, #7
 80178ee:	f023 0307 	bic.w	r3, r3, #7
 80178f2:	3308      	adds	r3, #8
 80178f4:	9303      	str	r3, [sp, #12]
 80178f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178f8:	4433      	add	r3, r6
 80178fa:	9309      	str	r3, [sp, #36]	; 0x24
 80178fc:	e767      	b.n	80177ce <_svfiprintf_r+0x4e>
 80178fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8017902:	460c      	mov	r4, r1
 8017904:	2001      	movs	r0, #1
 8017906:	e7a5      	b.n	8017854 <_svfiprintf_r+0xd4>
 8017908:	2300      	movs	r3, #0
 801790a:	3401      	adds	r4, #1
 801790c:	9305      	str	r3, [sp, #20]
 801790e:	4619      	mov	r1, r3
 8017910:	f04f 0c0a 	mov.w	ip, #10
 8017914:	4620      	mov	r0, r4
 8017916:	f810 2b01 	ldrb.w	r2, [r0], #1
 801791a:	3a30      	subs	r2, #48	; 0x30
 801791c:	2a09      	cmp	r2, #9
 801791e:	d903      	bls.n	8017928 <_svfiprintf_r+0x1a8>
 8017920:	2b00      	cmp	r3, #0
 8017922:	d0c5      	beq.n	80178b0 <_svfiprintf_r+0x130>
 8017924:	9105      	str	r1, [sp, #20]
 8017926:	e7c3      	b.n	80178b0 <_svfiprintf_r+0x130>
 8017928:	fb0c 2101 	mla	r1, ip, r1, r2
 801792c:	4604      	mov	r4, r0
 801792e:	2301      	movs	r3, #1
 8017930:	e7f0      	b.n	8017914 <_svfiprintf_r+0x194>
 8017932:	ab03      	add	r3, sp, #12
 8017934:	9300      	str	r3, [sp, #0]
 8017936:	462a      	mov	r2, r5
 8017938:	4b0f      	ldr	r3, [pc, #60]	; (8017978 <_svfiprintf_r+0x1f8>)
 801793a:	a904      	add	r1, sp, #16
 801793c:	4638      	mov	r0, r7
 801793e:	f7fd feb7 	bl	80156b0 <_printf_float>
 8017942:	1c42      	adds	r2, r0, #1
 8017944:	4606      	mov	r6, r0
 8017946:	d1d6      	bne.n	80178f6 <_svfiprintf_r+0x176>
 8017948:	89ab      	ldrh	r3, [r5, #12]
 801794a:	065b      	lsls	r3, r3, #25
 801794c:	f53f af2c 	bmi.w	80177a8 <_svfiprintf_r+0x28>
 8017950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017952:	b01d      	add	sp, #116	; 0x74
 8017954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017958:	ab03      	add	r3, sp, #12
 801795a:	9300      	str	r3, [sp, #0]
 801795c:	462a      	mov	r2, r5
 801795e:	4b06      	ldr	r3, [pc, #24]	; (8017978 <_svfiprintf_r+0x1f8>)
 8017960:	a904      	add	r1, sp, #16
 8017962:	4638      	mov	r0, r7
 8017964:	f7fe f948 	bl	8015bf8 <_printf_i>
 8017968:	e7eb      	b.n	8017942 <_svfiprintf_r+0x1c2>
 801796a:	bf00      	nop
 801796c:	08018ffc 	.word	0x08018ffc
 8017970:	08019006 	.word	0x08019006
 8017974:	080156b1 	.word	0x080156b1
 8017978:	080176cb 	.word	0x080176cb
 801797c:	08019002 	.word	0x08019002

08017980 <_read_r>:
 8017980:	b538      	push	{r3, r4, r5, lr}
 8017982:	4d07      	ldr	r5, [pc, #28]	; (80179a0 <_read_r+0x20>)
 8017984:	4604      	mov	r4, r0
 8017986:	4608      	mov	r0, r1
 8017988:	4611      	mov	r1, r2
 801798a:	2200      	movs	r2, #0
 801798c:	602a      	str	r2, [r5, #0]
 801798e:	461a      	mov	r2, r3
 8017990:	f7ed f9e8 	bl	8004d64 <_read>
 8017994:	1c43      	adds	r3, r0, #1
 8017996:	d102      	bne.n	801799e <_read_r+0x1e>
 8017998:	682b      	ldr	r3, [r5, #0]
 801799a:	b103      	cbz	r3, 801799e <_read_r+0x1e>
 801799c:	6023      	str	r3, [r4, #0]
 801799e:	bd38      	pop	{r3, r4, r5, pc}
 80179a0:	20014ba0 	.word	0x20014ba0

080179a4 <__assert_func>:
 80179a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80179a6:	4614      	mov	r4, r2
 80179a8:	461a      	mov	r2, r3
 80179aa:	4b09      	ldr	r3, [pc, #36]	; (80179d0 <__assert_func+0x2c>)
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	4605      	mov	r5, r0
 80179b0:	68d8      	ldr	r0, [r3, #12]
 80179b2:	b14c      	cbz	r4, 80179c8 <__assert_func+0x24>
 80179b4:	4b07      	ldr	r3, [pc, #28]	; (80179d4 <__assert_func+0x30>)
 80179b6:	9100      	str	r1, [sp, #0]
 80179b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80179bc:	4906      	ldr	r1, [pc, #24]	; (80179d8 <__assert_func+0x34>)
 80179be:	462b      	mov	r3, r5
 80179c0:	f000 f80e 	bl	80179e0 <fiprintf>
 80179c4:	f000 fa98 	bl	8017ef8 <abort>
 80179c8:	4b04      	ldr	r3, [pc, #16]	; (80179dc <__assert_func+0x38>)
 80179ca:	461c      	mov	r4, r3
 80179cc:	e7f3      	b.n	80179b6 <__assert_func+0x12>
 80179ce:	bf00      	nop
 80179d0:	2000019c 	.word	0x2000019c
 80179d4:	0801900d 	.word	0x0801900d
 80179d8:	0801901a 	.word	0x0801901a
 80179dc:	08019048 	.word	0x08019048

080179e0 <fiprintf>:
 80179e0:	b40e      	push	{r1, r2, r3}
 80179e2:	b503      	push	{r0, r1, lr}
 80179e4:	4601      	mov	r1, r0
 80179e6:	ab03      	add	r3, sp, #12
 80179e8:	4805      	ldr	r0, [pc, #20]	; (8017a00 <fiprintf+0x20>)
 80179ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80179ee:	6800      	ldr	r0, [r0, #0]
 80179f0:	9301      	str	r3, [sp, #4]
 80179f2:	f000 f883 	bl	8017afc <_vfiprintf_r>
 80179f6:	b002      	add	sp, #8
 80179f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80179fc:	b003      	add	sp, #12
 80179fe:	4770      	bx	lr
 8017a00:	2000019c 	.word	0x2000019c

08017a04 <__ascii_mbtowc>:
 8017a04:	b082      	sub	sp, #8
 8017a06:	b901      	cbnz	r1, 8017a0a <__ascii_mbtowc+0x6>
 8017a08:	a901      	add	r1, sp, #4
 8017a0a:	b142      	cbz	r2, 8017a1e <__ascii_mbtowc+0x1a>
 8017a0c:	b14b      	cbz	r3, 8017a22 <__ascii_mbtowc+0x1e>
 8017a0e:	7813      	ldrb	r3, [r2, #0]
 8017a10:	600b      	str	r3, [r1, #0]
 8017a12:	7812      	ldrb	r2, [r2, #0]
 8017a14:	1e10      	subs	r0, r2, #0
 8017a16:	bf18      	it	ne
 8017a18:	2001      	movne	r0, #1
 8017a1a:	b002      	add	sp, #8
 8017a1c:	4770      	bx	lr
 8017a1e:	4610      	mov	r0, r2
 8017a20:	e7fb      	b.n	8017a1a <__ascii_mbtowc+0x16>
 8017a22:	f06f 0001 	mvn.w	r0, #1
 8017a26:	e7f8      	b.n	8017a1a <__ascii_mbtowc+0x16>

08017a28 <memmove>:
 8017a28:	4288      	cmp	r0, r1
 8017a2a:	b510      	push	{r4, lr}
 8017a2c:	eb01 0402 	add.w	r4, r1, r2
 8017a30:	d902      	bls.n	8017a38 <memmove+0x10>
 8017a32:	4284      	cmp	r4, r0
 8017a34:	4623      	mov	r3, r4
 8017a36:	d807      	bhi.n	8017a48 <memmove+0x20>
 8017a38:	1e43      	subs	r3, r0, #1
 8017a3a:	42a1      	cmp	r1, r4
 8017a3c:	d008      	beq.n	8017a50 <memmove+0x28>
 8017a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017a46:	e7f8      	b.n	8017a3a <memmove+0x12>
 8017a48:	4402      	add	r2, r0
 8017a4a:	4601      	mov	r1, r0
 8017a4c:	428a      	cmp	r2, r1
 8017a4e:	d100      	bne.n	8017a52 <memmove+0x2a>
 8017a50:	bd10      	pop	{r4, pc}
 8017a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a5a:	e7f7      	b.n	8017a4c <memmove+0x24>

08017a5c <_realloc_r>:
 8017a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a5e:	4607      	mov	r7, r0
 8017a60:	4614      	mov	r4, r2
 8017a62:	460e      	mov	r6, r1
 8017a64:	b921      	cbnz	r1, 8017a70 <_realloc_r+0x14>
 8017a66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017a6a:	4611      	mov	r1, r2
 8017a6c:	f7fd bd26 	b.w	80154bc <_malloc_r>
 8017a70:	b922      	cbnz	r2, 8017a7c <_realloc_r+0x20>
 8017a72:	f7fd fcd3 	bl	801541c <_free_r>
 8017a76:	4625      	mov	r5, r4
 8017a78:	4628      	mov	r0, r5
 8017a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a7c:	f000 faa8 	bl	8017fd0 <_malloc_usable_size_r>
 8017a80:	42a0      	cmp	r0, r4
 8017a82:	d20f      	bcs.n	8017aa4 <_realloc_r+0x48>
 8017a84:	4621      	mov	r1, r4
 8017a86:	4638      	mov	r0, r7
 8017a88:	f7fd fd18 	bl	80154bc <_malloc_r>
 8017a8c:	4605      	mov	r5, r0
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	d0f2      	beq.n	8017a78 <_realloc_r+0x1c>
 8017a92:	4631      	mov	r1, r6
 8017a94:	4622      	mov	r2, r4
 8017a96:	f7fd fcab 	bl	80153f0 <memcpy>
 8017a9a:	4631      	mov	r1, r6
 8017a9c:	4638      	mov	r0, r7
 8017a9e:	f7fd fcbd 	bl	801541c <_free_r>
 8017aa2:	e7e9      	b.n	8017a78 <_realloc_r+0x1c>
 8017aa4:	4635      	mov	r5, r6
 8017aa6:	e7e7      	b.n	8017a78 <_realloc_r+0x1c>

08017aa8 <__sfputc_r>:
 8017aa8:	6893      	ldr	r3, [r2, #8]
 8017aaa:	3b01      	subs	r3, #1
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	b410      	push	{r4}
 8017ab0:	6093      	str	r3, [r2, #8]
 8017ab2:	da08      	bge.n	8017ac6 <__sfputc_r+0x1e>
 8017ab4:	6994      	ldr	r4, [r2, #24]
 8017ab6:	42a3      	cmp	r3, r4
 8017ab8:	db01      	blt.n	8017abe <__sfputc_r+0x16>
 8017aba:	290a      	cmp	r1, #10
 8017abc:	d103      	bne.n	8017ac6 <__sfputc_r+0x1e>
 8017abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ac2:	f000 b94b 	b.w	8017d5c <__swbuf_r>
 8017ac6:	6813      	ldr	r3, [r2, #0]
 8017ac8:	1c58      	adds	r0, r3, #1
 8017aca:	6010      	str	r0, [r2, #0]
 8017acc:	7019      	strb	r1, [r3, #0]
 8017ace:	4608      	mov	r0, r1
 8017ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ad4:	4770      	bx	lr

08017ad6 <__sfputs_r>:
 8017ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ad8:	4606      	mov	r6, r0
 8017ada:	460f      	mov	r7, r1
 8017adc:	4614      	mov	r4, r2
 8017ade:	18d5      	adds	r5, r2, r3
 8017ae0:	42ac      	cmp	r4, r5
 8017ae2:	d101      	bne.n	8017ae8 <__sfputs_r+0x12>
 8017ae4:	2000      	movs	r0, #0
 8017ae6:	e007      	b.n	8017af8 <__sfputs_r+0x22>
 8017ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017aec:	463a      	mov	r2, r7
 8017aee:	4630      	mov	r0, r6
 8017af0:	f7ff ffda 	bl	8017aa8 <__sfputc_r>
 8017af4:	1c43      	adds	r3, r0, #1
 8017af6:	d1f3      	bne.n	8017ae0 <__sfputs_r+0xa>
 8017af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017afc <_vfiprintf_r>:
 8017afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b00:	460d      	mov	r5, r1
 8017b02:	b09d      	sub	sp, #116	; 0x74
 8017b04:	4614      	mov	r4, r2
 8017b06:	4698      	mov	r8, r3
 8017b08:	4606      	mov	r6, r0
 8017b0a:	b118      	cbz	r0, 8017b14 <_vfiprintf_r+0x18>
 8017b0c:	6983      	ldr	r3, [r0, #24]
 8017b0e:	b90b      	cbnz	r3, 8017b14 <_vfiprintf_r+0x18>
 8017b10:	f7fd fb7e 	bl	8015210 <__sinit>
 8017b14:	4b89      	ldr	r3, [pc, #548]	; (8017d3c <_vfiprintf_r+0x240>)
 8017b16:	429d      	cmp	r5, r3
 8017b18:	d11b      	bne.n	8017b52 <_vfiprintf_r+0x56>
 8017b1a:	6875      	ldr	r5, [r6, #4]
 8017b1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b1e:	07d9      	lsls	r1, r3, #31
 8017b20:	d405      	bmi.n	8017b2e <_vfiprintf_r+0x32>
 8017b22:	89ab      	ldrh	r3, [r5, #12]
 8017b24:	059a      	lsls	r2, r3, #22
 8017b26:	d402      	bmi.n	8017b2e <_vfiprintf_r+0x32>
 8017b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b2a:	f7fd fc4e 	bl	80153ca <__retarget_lock_acquire_recursive>
 8017b2e:	89ab      	ldrh	r3, [r5, #12]
 8017b30:	071b      	lsls	r3, r3, #28
 8017b32:	d501      	bpl.n	8017b38 <_vfiprintf_r+0x3c>
 8017b34:	692b      	ldr	r3, [r5, #16]
 8017b36:	b9eb      	cbnz	r3, 8017b74 <_vfiprintf_r+0x78>
 8017b38:	4629      	mov	r1, r5
 8017b3a:	4630      	mov	r0, r6
 8017b3c:	f000 f96e 	bl	8017e1c <__swsetup_r>
 8017b40:	b1c0      	cbz	r0, 8017b74 <_vfiprintf_r+0x78>
 8017b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b44:	07dc      	lsls	r4, r3, #31
 8017b46:	d50e      	bpl.n	8017b66 <_vfiprintf_r+0x6a>
 8017b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b4c:	b01d      	add	sp, #116	; 0x74
 8017b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b52:	4b7b      	ldr	r3, [pc, #492]	; (8017d40 <_vfiprintf_r+0x244>)
 8017b54:	429d      	cmp	r5, r3
 8017b56:	d101      	bne.n	8017b5c <_vfiprintf_r+0x60>
 8017b58:	68b5      	ldr	r5, [r6, #8]
 8017b5a:	e7df      	b.n	8017b1c <_vfiprintf_r+0x20>
 8017b5c:	4b79      	ldr	r3, [pc, #484]	; (8017d44 <_vfiprintf_r+0x248>)
 8017b5e:	429d      	cmp	r5, r3
 8017b60:	bf08      	it	eq
 8017b62:	68f5      	ldreq	r5, [r6, #12]
 8017b64:	e7da      	b.n	8017b1c <_vfiprintf_r+0x20>
 8017b66:	89ab      	ldrh	r3, [r5, #12]
 8017b68:	0598      	lsls	r0, r3, #22
 8017b6a:	d4ed      	bmi.n	8017b48 <_vfiprintf_r+0x4c>
 8017b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b6e:	f7fd fc2d 	bl	80153cc <__retarget_lock_release_recursive>
 8017b72:	e7e9      	b.n	8017b48 <_vfiprintf_r+0x4c>
 8017b74:	2300      	movs	r3, #0
 8017b76:	9309      	str	r3, [sp, #36]	; 0x24
 8017b78:	2320      	movs	r3, #32
 8017b7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b82:	2330      	movs	r3, #48	; 0x30
 8017b84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017d48 <_vfiprintf_r+0x24c>
 8017b88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b8c:	f04f 0901 	mov.w	r9, #1
 8017b90:	4623      	mov	r3, r4
 8017b92:	469a      	mov	sl, r3
 8017b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b98:	b10a      	cbz	r2, 8017b9e <_vfiprintf_r+0xa2>
 8017b9a:	2a25      	cmp	r2, #37	; 0x25
 8017b9c:	d1f9      	bne.n	8017b92 <_vfiprintf_r+0x96>
 8017b9e:	ebba 0b04 	subs.w	fp, sl, r4
 8017ba2:	d00b      	beq.n	8017bbc <_vfiprintf_r+0xc0>
 8017ba4:	465b      	mov	r3, fp
 8017ba6:	4622      	mov	r2, r4
 8017ba8:	4629      	mov	r1, r5
 8017baa:	4630      	mov	r0, r6
 8017bac:	f7ff ff93 	bl	8017ad6 <__sfputs_r>
 8017bb0:	3001      	adds	r0, #1
 8017bb2:	f000 80aa 	beq.w	8017d0a <_vfiprintf_r+0x20e>
 8017bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bb8:	445a      	add	r2, fp
 8017bba:	9209      	str	r2, [sp, #36]	; 0x24
 8017bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	f000 80a2 	beq.w	8017d0a <_vfiprintf_r+0x20e>
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bd0:	f10a 0a01 	add.w	sl, sl, #1
 8017bd4:	9304      	str	r3, [sp, #16]
 8017bd6:	9307      	str	r3, [sp, #28]
 8017bd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017bdc:	931a      	str	r3, [sp, #104]	; 0x68
 8017bde:	4654      	mov	r4, sl
 8017be0:	2205      	movs	r2, #5
 8017be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017be6:	4858      	ldr	r0, [pc, #352]	; (8017d48 <_vfiprintf_r+0x24c>)
 8017be8:	f7e8 fafa 	bl	80001e0 <memchr>
 8017bec:	9a04      	ldr	r2, [sp, #16]
 8017bee:	b9d8      	cbnz	r0, 8017c28 <_vfiprintf_r+0x12c>
 8017bf0:	06d1      	lsls	r1, r2, #27
 8017bf2:	bf44      	itt	mi
 8017bf4:	2320      	movmi	r3, #32
 8017bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bfa:	0713      	lsls	r3, r2, #28
 8017bfc:	bf44      	itt	mi
 8017bfe:	232b      	movmi	r3, #43	; 0x2b
 8017c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c04:	f89a 3000 	ldrb.w	r3, [sl]
 8017c08:	2b2a      	cmp	r3, #42	; 0x2a
 8017c0a:	d015      	beq.n	8017c38 <_vfiprintf_r+0x13c>
 8017c0c:	9a07      	ldr	r2, [sp, #28]
 8017c0e:	4654      	mov	r4, sl
 8017c10:	2000      	movs	r0, #0
 8017c12:	f04f 0c0a 	mov.w	ip, #10
 8017c16:	4621      	mov	r1, r4
 8017c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c1c:	3b30      	subs	r3, #48	; 0x30
 8017c1e:	2b09      	cmp	r3, #9
 8017c20:	d94e      	bls.n	8017cc0 <_vfiprintf_r+0x1c4>
 8017c22:	b1b0      	cbz	r0, 8017c52 <_vfiprintf_r+0x156>
 8017c24:	9207      	str	r2, [sp, #28]
 8017c26:	e014      	b.n	8017c52 <_vfiprintf_r+0x156>
 8017c28:	eba0 0308 	sub.w	r3, r0, r8
 8017c2c:	fa09 f303 	lsl.w	r3, r9, r3
 8017c30:	4313      	orrs	r3, r2
 8017c32:	9304      	str	r3, [sp, #16]
 8017c34:	46a2      	mov	sl, r4
 8017c36:	e7d2      	b.n	8017bde <_vfiprintf_r+0xe2>
 8017c38:	9b03      	ldr	r3, [sp, #12]
 8017c3a:	1d19      	adds	r1, r3, #4
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	9103      	str	r1, [sp, #12]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	bfbb      	ittet	lt
 8017c44:	425b      	neglt	r3, r3
 8017c46:	f042 0202 	orrlt.w	r2, r2, #2
 8017c4a:	9307      	strge	r3, [sp, #28]
 8017c4c:	9307      	strlt	r3, [sp, #28]
 8017c4e:	bfb8      	it	lt
 8017c50:	9204      	strlt	r2, [sp, #16]
 8017c52:	7823      	ldrb	r3, [r4, #0]
 8017c54:	2b2e      	cmp	r3, #46	; 0x2e
 8017c56:	d10c      	bne.n	8017c72 <_vfiprintf_r+0x176>
 8017c58:	7863      	ldrb	r3, [r4, #1]
 8017c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8017c5c:	d135      	bne.n	8017cca <_vfiprintf_r+0x1ce>
 8017c5e:	9b03      	ldr	r3, [sp, #12]
 8017c60:	1d1a      	adds	r2, r3, #4
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	9203      	str	r2, [sp, #12]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	bfb8      	it	lt
 8017c6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017c6e:	3402      	adds	r4, #2
 8017c70:	9305      	str	r3, [sp, #20]
 8017c72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017d58 <_vfiprintf_r+0x25c>
 8017c76:	7821      	ldrb	r1, [r4, #0]
 8017c78:	2203      	movs	r2, #3
 8017c7a:	4650      	mov	r0, sl
 8017c7c:	f7e8 fab0 	bl	80001e0 <memchr>
 8017c80:	b140      	cbz	r0, 8017c94 <_vfiprintf_r+0x198>
 8017c82:	2340      	movs	r3, #64	; 0x40
 8017c84:	eba0 000a 	sub.w	r0, r0, sl
 8017c88:	fa03 f000 	lsl.w	r0, r3, r0
 8017c8c:	9b04      	ldr	r3, [sp, #16]
 8017c8e:	4303      	orrs	r3, r0
 8017c90:	3401      	adds	r4, #1
 8017c92:	9304      	str	r3, [sp, #16]
 8017c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c98:	482c      	ldr	r0, [pc, #176]	; (8017d4c <_vfiprintf_r+0x250>)
 8017c9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c9e:	2206      	movs	r2, #6
 8017ca0:	f7e8 fa9e 	bl	80001e0 <memchr>
 8017ca4:	2800      	cmp	r0, #0
 8017ca6:	d03f      	beq.n	8017d28 <_vfiprintf_r+0x22c>
 8017ca8:	4b29      	ldr	r3, [pc, #164]	; (8017d50 <_vfiprintf_r+0x254>)
 8017caa:	bb1b      	cbnz	r3, 8017cf4 <_vfiprintf_r+0x1f8>
 8017cac:	9b03      	ldr	r3, [sp, #12]
 8017cae:	3307      	adds	r3, #7
 8017cb0:	f023 0307 	bic.w	r3, r3, #7
 8017cb4:	3308      	adds	r3, #8
 8017cb6:	9303      	str	r3, [sp, #12]
 8017cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cba:	443b      	add	r3, r7
 8017cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8017cbe:	e767      	b.n	8017b90 <_vfiprintf_r+0x94>
 8017cc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8017cc4:	460c      	mov	r4, r1
 8017cc6:	2001      	movs	r0, #1
 8017cc8:	e7a5      	b.n	8017c16 <_vfiprintf_r+0x11a>
 8017cca:	2300      	movs	r3, #0
 8017ccc:	3401      	adds	r4, #1
 8017cce:	9305      	str	r3, [sp, #20]
 8017cd0:	4619      	mov	r1, r3
 8017cd2:	f04f 0c0a 	mov.w	ip, #10
 8017cd6:	4620      	mov	r0, r4
 8017cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cdc:	3a30      	subs	r2, #48	; 0x30
 8017cde:	2a09      	cmp	r2, #9
 8017ce0:	d903      	bls.n	8017cea <_vfiprintf_r+0x1ee>
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d0c5      	beq.n	8017c72 <_vfiprintf_r+0x176>
 8017ce6:	9105      	str	r1, [sp, #20]
 8017ce8:	e7c3      	b.n	8017c72 <_vfiprintf_r+0x176>
 8017cea:	fb0c 2101 	mla	r1, ip, r1, r2
 8017cee:	4604      	mov	r4, r0
 8017cf0:	2301      	movs	r3, #1
 8017cf2:	e7f0      	b.n	8017cd6 <_vfiprintf_r+0x1da>
 8017cf4:	ab03      	add	r3, sp, #12
 8017cf6:	9300      	str	r3, [sp, #0]
 8017cf8:	462a      	mov	r2, r5
 8017cfa:	4b16      	ldr	r3, [pc, #88]	; (8017d54 <_vfiprintf_r+0x258>)
 8017cfc:	a904      	add	r1, sp, #16
 8017cfe:	4630      	mov	r0, r6
 8017d00:	f7fd fcd6 	bl	80156b0 <_printf_float>
 8017d04:	4607      	mov	r7, r0
 8017d06:	1c78      	adds	r0, r7, #1
 8017d08:	d1d6      	bne.n	8017cb8 <_vfiprintf_r+0x1bc>
 8017d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d0c:	07d9      	lsls	r1, r3, #31
 8017d0e:	d405      	bmi.n	8017d1c <_vfiprintf_r+0x220>
 8017d10:	89ab      	ldrh	r3, [r5, #12]
 8017d12:	059a      	lsls	r2, r3, #22
 8017d14:	d402      	bmi.n	8017d1c <_vfiprintf_r+0x220>
 8017d16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d18:	f7fd fb58 	bl	80153cc <__retarget_lock_release_recursive>
 8017d1c:	89ab      	ldrh	r3, [r5, #12]
 8017d1e:	065b      	lsls	r3, r3, #25
 8017d20:	f53f af12 	bmi.w	8017b48 <_vfiprintf_r+0x4c>
 8017d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d26:	e711      	b.n	8017b4c <_vfiprintf_r+0x50>
 8017d28:	ab03      	add	r3, sp, #12
 8017d2a:	9300      	str	r3, [sp, #0]
 8017d2c:	462a      	mov	r2, r5
 8017d2e:	4b09      	ldr	r3, [pc, #36]	; (8017d54 <_vfiprintf_r+0x258>)
 8017d30:	a904      	add	r1, sp, #16
 8017d32:	4630      	mov	r0, r6
 8017d34:	f7fd ff60 	bl	8015bf8 <_printf_i>
 8017d38:	e7e4      	b.n	8017d04 <_vfiprintf_r+0x208>
 8017d3a:	bf00      	nop
 8017d3c:	08018d6c 	.word	0x08018d6c
 8017d40:	08018d8c 	.word	0x08018d8c
 8017d44:	08018d4c 	.word	0x08018d4c
 8017d48:	08018ffc 	.word	0x08018ffc
 8017d4c:	08019006 	.word	0x08019006
 8017d50:	080156b1 	.word	0x080156b1
 8017d54:	08017ad7 	.word	0x08017ad7
 8017d58:	08019002 	.word	0x08019002

08017d5c <__swbuf_r>:
 8017d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d5e:	460e      	mov	r6, r1
 8017d60:	4614      	mov	r4, r2
 8017d62:	4605      	mov	r5, r0
 8017d64:	b118      	cbz	r0, 8017d6e <__swbuf_r+0x12>
 8017d66:	6983      	ldr	r3, [r0, #24]
 8017d68:	b90b      	cbnz	r3, 8017d6e <__swbuf_r+0x12>
 8017d6a:	f7fd fa51 	bl	8015210 <__sinit>
 8017d6e:	4b21      	ldr	r3, [pc, #132]	; (8017df4 <__swbuf_r+0x98>)
 8017d70:	429c      	cmp	r4, r3
 8017d72:	d12b      	bne.n	8017dcc <__swbuf_r+0x70>
 8017d74:	686c      	ldr	r4, [r5, #4]
 8017d76:	69a3      	ldr	r3, [r4, #24]
 8017d78:	60a3      	str	r3, [r4, #8]
 8017d7a:	89a3      	ldrh	r3, [r4, #12]
 8017d7c:	071a      	lsls	r2, r3, #28
 8017d7e:	d52f      	bpl.n	8017de0 <__swbuf_r+0x84>
 8017d80:	6923      	ldr	r3, [r4, #16]
 8017d82:	b36b      	cbz	r3, 8017de0 <__swbuf_r+0x84>
 8017d84:	6923      	ldr	r3, [r4, #16]
 8017d86:	6820      	ldr	r0, [r4, #0]
 8017d88:	1ac0      	subs	r0, r0, r3
 8017d8a:	6963      	ldr	r3, [r4, #20]
 8017d8c:	b2f6      	uxtb	r6, r6
 8017d8e:	4283      	cmp	r3, r0
 8017d90:	4637      	mov	r7, r6
 8017d92:	dc04      	bgt.n	8017d9e <__swbuf_r+0x42>
 8017d94:	4621      	mov	r1, r4
 8017d96:	4628      	mov	r0, r5
 8017d98:	f7ff f8ac 	bl	8016ef4 <_fflush_r>
 8017d9c:	bb30      	cbnz	r0, 8017dec <__swbuf_r+0x90>
 8017d9e:	68a3      	ldr	r3, [r4, #8]
 8017da0:	3b01      	subs	r3, #1
 8017da2:	60a3      	str	r3, [r4, #8]
 8017da4:	6823      	ldr	r3, [r4, #0]
 8017da6:	1c5a      	adds	r2, r3, #1
 8017da8:	6022      	str	r2, [r4, #0]
 8017daa:	701e      	strb	r6, [r3, #0]
 8017dac:	6963      	ldr	r3, [r4, #20]
 8017dae:	3001      	adds	r0, #1
 8017db0:	4283      	cmp	r3, r0
 8017db2:	d004      	beq.n	8017dbe <__swbuf_r+0x62>
 8017db4:	89a3      	ldrh	r3, [r4, #12]
 8017db6:	07db      	lsls	r3, r3, #31
 8017db8:	d506      	bpl.n	8017dc8 <__swbuf_r+0x6c>
 8017dba:	2e0a      	cmp	r6, #10
 8017dbc:	d104      	bne.n	8017dc8 <__swbuf_r+0x6c>
 8017dbe:	4621      	mov	r1, r4
 8017dc0:	4628      	mov	r0, r5
 8017dc2:	f7ff f897 	bl	8016ef4 <_fflush_r>
 8017dc6:	b988      	cbnz	r0, 8017dec <__swbuf_r+0x90>
 8017dc8:	4638      	mov	r0, r7
 8017dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dcc:	4b0a      	ldr	r3, [pc, #40]	; (8017df8 <__swbuf_r+0x9c>)
 8017dce:	429c      	cmp	r4, r3
 8017dd0:	d101      	bne.n	8017dd6 <__swbuf_r+0x7a>
 8017dd2:	68ac      	ldr	r4, [r5, #8]
 8017dd4:	e7cf      	b.n	8017d76 <__swbuf_r+0x1a>
 8017dd6:	4b09      	ldr	r3, [pc, #36]	; (8017dfc <__swbuf_r+0xa0>)
 8017dd8:	429c      	cmp	r4, r3
 8017dda:	bf08      	it	eq
 8017ddc:	68ec      	ldreq	r4, [r5, #12]
 8017dde:	e7ca      	b.n	8017d76 <__swbuf_r+0x1a>
 8017de0:	4621      	mov	r1, r4
 8017de2:	4628      	mov	r0, r5
 8017de4:	f000 f81a 	bl	8017e1c <__swsetup_r>
 8017de8:	2800      	cmp	r0, #0
 8017dea:	d0cb      	beq.n	8017d84 <__swbuf_r+0x28>
 8017dec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017df0:	e7ea      	b.n	8017dc8 <__swbuf_r+0x6c>
 8017df2:	bf00      	nop
 8017df4:	08018d6c 	.word	0x08018d6c
 8017df8:	08018d8c 	.word	0x08018d8c
 8017dfc:	08018d4c 	.word	0x08018d4c

08017e00 <__ascii_wctomb>:
 8017e00:	b149      	cbz	r1, 8017e16 <__ascii_wctomb+0x16>
 8017e02:	2aff      	cmp	r2, #255	; 0xff
 8017e04:	bf85      	ittet	hi
 8017e06:	238a      	movhi	r3, #138	; 0x8a
 8017e08:	6003      	strhi	r3, [r0, #0]
 8017e0a:	700a      	strbls	r2, [r1, #0]
 8017e0c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017e10:	bf98      	it	ls
 8017e12:	2001      	movls	r0, #1
 8017e14:	4770      	bx	lr
 8017e16:	4608      	mov	r0, r1
 8017e18:	4770      	bx	lr
	...

08017e1c <__swsetup_r>:
 8017e1c:	4b32      	ldr	r3, [pc, #200]	; (8017ee8 <__swsetup_r+0xcc>)
 8017e1e:	b570      	push	{r4, r5, r6, lr}
 8017e20:	681d      	ldr	r5, [r3, #0]
 8017e22:	4606      	mov	r6, r0
 8017e24:	460c      	mov	r4, r1
 8017e26:	b125      	cbz	r5, 8017e32 <__swsetup_r+0x16>
 8017e28:	69ab      	ldr	r3, [r5, #24]
 8017e2a:	b913      	cbnz	r3, 8017e32 <__swsetup_r+0x16>
 8017e2c:	4628      	mov	r0, r5
 8017e2e:	f7fd f9ef 	bl	8015210 <__sinit>
 8017e32:	4b2e      	ldr	r3, [pc, #184]	; (8017eec <__swsetup_r+0xd0>)
 8017e34:	429c      	cmp	r4, r3
 8017e36:	d10f      	bne.n	8017e58 <__swsetup_r+0x3c>
 8017e38:	686c      	ldr	r4, [r5, #4]
 8017e3a:	89a3      	ldrh	r3, [r4, #12]
 8017e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017e40:	0719      	lsls	r1, r3, #28
 8017e42:	d42c      	bmi.n	8017e9e <__swsetup_r+0x82>
 8017e44:	06dd      	lsls	r5, r3, #27
 8017e46:	d411      	bmi.n	8017e6c <__swsetup_r+0x50>
 8017e48:	2309      	movs	r3, #9
 8017e4a:	6033      	str	r3, [r6, #0]
 8017e4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017e50:	81a3      	strh	r3, [r4, #12]
 8017e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e56:	e03e      	b.n	8017ed6 <__swsetup_r+0xba>
 8017e58:	4b25      	ldr	r3, [pc, #148]	; (8017ef0 <__swsetup_r+0xd4>)
 8017e5a:	429c      	cmp	r4, r3
 8017e5c:	d101      	bne.n	8017e62 <__swsetup_r+0x46>
 8017e5e:	68ac      	ldr	r4, [r5, #8]
 8017e60:	e7eb      	b.n	8017e3a <__swsetup_r+0x1e>
 8017e62:	4b24      	ldr	r3, [pc, #144]	; (8017ef4 <__swsetup_r+0xd8>)
 8017e64:	429c      	cmp	r4, r3
 8017e66:	bf08      	it	eq
 8017e68:	68ec      	ldreq	r4, [r5, #12]
 8017e6a:	e7e6      	b.n	8017e3a <__swsetup_r+0x1e>
 8017e6c:	0758      	lsls	r0, r3, #29
 8017e6e:	d512      	bpl.n	8017e96 <__swsetup_r+0x7a>
 8017e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e72:	b141      	cbz	r1, 8017e86 <__swsetup_r+0x6a>
 8017e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e78:	4299      	cmp	r1, r3
 8017e7a:	d002      	beq.n	8017e82 <__swsetup_r+0x66>
 8017e7c:	4630      	mov	r0, r6
 8017e7e:	f7fd facd 	bl	801541c <_free_r>
 8017e82:	2300      	movs	r3, #0
 8017e84:	6363      	str	r3, [r4, #52]	; 0x34
 8017e86:	89a3      	ldrh	r3, [r4, #12]
 8017e88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017e8c:	81a3      	strh	r3, [r4, #12]
 8017e8e:	2300      	movs	r3, #0
 8017e90:	6063      	str	r3, [r4, #4]
 8017e92:	6923      	ldr	r3, [r4, #16]
 8017e94:	6023      	str	r3, [r4, #0]
 8017e96:	89a3      	ldrh	r3, [r4, #12]
 8017e98:	f043 0308 	orr.w	r3, r3, #8
 8017e9c:	81a3      	strh	r3, [r4, #12]
 8017e9e:	6923      	ldr	r3, [r4, #16]
 8017ea0:	b94b      	cbnz	r3, 8017eb6 <__swsetup_r+0x9a>
 8017ea2:	89a3      	ldrh	r3, [r4, #12]
 8017ea4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017eac:	d003      	beq.n	8017eb6 <__swsetup_r+0x9a>
 8017eae:	4621      	mov	r1, r4
 8017eb0:	4630      	mov	r0, r6
 8017eb2:	f000 f84d 	bl	8017f50 <__smakebuf_r>
 8017eb6:	89a0      	ldrh	r0, [r4, #12]
 8017eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ebc:	f010 0301 	ands.w	r3, r0, #1
 8017ec0:	d00a      	beq.n	8017ed8 <__swsetup_r+0xbc>
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	60a3      	str	r3, [r4, #8]
 8017ec6:	6963      	ldr	r3, [r4, #20]
 8017ec8:	425b      	negs	r3, r3
 8017eca:	61a3      	str	r3, [r4, #24]
 8017ecc:	6923      	ldr	r3, [r4, #16]
 8017ece:	b943      	cbnz	r3, 8017ee2 <__swsetup_r+0xc6>
 8017ed0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017ed4:	d1ba      	bne.n	8017e4c <__swsetup_r+0x30>
 8017ed6:	bd70      	pop	{r4, r5, r6, pc}
 8017ed8:	0781      	lsls	r1, r0, #30
 8017eda:	bf58      	it	pl
 8017edc:	6963      	ldrpl	r3, [r4, #20]
 8017ede:	60a3      	str	r3, [r4, #8]
 8017ee0:	e7f4      	b.n	8017ecc <__swsetup_r+0xb0>
 8017ee2:	2000      	movs	r0, #0
 8017ee4:	e7f7      	b.n	8017ed6 <__swsetup_r+0xba>
 8017ee6:	bf00      	nop
 8017ee8:	2000019c 	.word	0x2000019c
 8017eec:	08018d6c 	.word	0x08018d6c
 8017ef0:	08018d8c 	.word	0x08018d8c
 8017ef4:	08018d4c 	.word	0x08018d4c

08017ef8 <abort>:
 8017ef8:	b508      	push	{r3, lr}
 8017efa:	2006      	movs	r0, #6
 8017efc:	f000 f898 	bl	8018030 <raise>
 8017f00:	2001      	movs	r0, #1
 8017f02:	f7ec ff25 	bl	8004d50 <_exit>

08017f06 <__swhatbuf_r>:
 8017f06:	b570      	push	{r4, r5, r6, lr}
 8017f08:	460e      	mov	r6, r1
 8017f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f0e:	2900      	cmp	r1, #0
 8017f10:	b096      	sub	sp, #88	; 0x58
 8017f12:	4614      	mov	r4, r2
 8017f14:	461d      	mov	r5, r3
 8017f16:	da07      	bge.n	8017f28 <__swhatbuf_r+0x22>
 8017f18:	2300      	movs	r3, #0
 8017f1a:	602b      	str	r3, [r5, #0]
 8017f1c:	89b3      	ldrh	r3, [r6, #12]
 8017f1e:	061a      	lsls	r2, r3, #24
 8017f20:	d410      	bmi.n	8017f44 <__swhatbuf_r+0x3e>
 8017f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f26:	e00e      	b.n	8017f46 <__swhatbuf_r+0x40>
 8017f28:	466a      	mov	r2, sp
 8017f2a:	f000 f89d 	bl	8018068 <_fstat_r>
 8017f2e:	2800      	cmp	r0, #0
 8017f30:	dbf2      	blt.n	8017f18 <__swhatbuf_r+0x12>
 8017f32:	9a01      	ldr	r2, [sp, #4]
 8017f34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017f38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017f3c:	425a      	negs	r2, r3
 8017f3e:	415a      	adcs	r2, r3
 8017f40:	602a      	str	r2, [r5, #0]
 8017f42:	e7ee      	b.n	8017f22 <__swhatbuf_r+0x1c>
 8017f44:	2340      	movs	r3, #64	; 0x40
 8017f46:	2000      	movs	r0, #0
 8017f48:	6023      	str	r3, [r4, #0]
 8017f4a:	b016      	add	sp, #88	; 0x58
 8017f4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017f50 <__smakebuf_r>:
 8017f50:	898b      	ldrh	r3, [r1, #12]
 8017f52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f54:	079d      	lsls	r5, r3, #30
 8017f56:	4606      	mov	r6, r0
 8017f58:	460c      	mov	r4, r1
 8017f5a:	d507      	bpl.n	8017f6c <__smakebuf_r+0x1c>
 8017f5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f60:	6023      	str	r3, [r4, #0]
 8017f62:	6123      	str	r3, [r4, #16]
 8017f64:	2301      	movs	r3, #1
 8017f66:	6163      	str	r3, [r4, #20]
 8017f68:	b002      	add	sp, #8
 8017f6a:	bd70      	pop	{r4, r5, r6, pc}
 8017f6c:	ab01      	add	r3, sp, #4
 8017f6e:	466a      	mov	r2, sp
 8017f70:	f7ff ffc9 	bl	8017f06 <__swhatbuf_r>
 8017f74:	9900      	ldr	r1, [sp, #0]
 8017f76:	4605      	mov	r5, r0
 8017f78:	4630      	mov	r0, r6
 8017f7a:	f7fd fa9f 	bl	80154bc <_malloc_r>
 8017f7e:	b948      	cbnz	r0, 8017f94 <__smakebuf_r+0x44>
 8017f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f84:	059a      	lsls	r2, r3, #22
 8017f86:	d4ef      	bmi.n	8017f68 <__smakebuf_r+0x18>
 8017f88:	f023 0303 	bic.w	r3, r3, #3
 8017f8c:	f043 0302 	orr.w	r3, r3, #2
 8017f90:	81a3      	strh	r3, [r4, #12]
 8017f92:	e7e3      	b.n	8017f5c <__smakebuf_r+0xc>
 8017f94:	4b0d      	ldr	r3, [pc, #52]	; (8017fcc <__smakebuf_r+0x7c>)
 8017f96:	62b3      	str	r3, [r6, #40]	; 0x28
 8017f98:	89a3      	ldrh	r3, [r4, #12]
 8017f9a:	6020      	str	r0, [r4, #0]
 8017f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fa0:	81a3      	strh	r3, [r4, #12]
 8017fa2:	9b00      	ldr	r3, [sp, #0]
 8017fa4:	6163      	str	r3, [r4, #20]
 8017fa6:	9b01      	ldr	r3, [sp, #4]
 8017fa8:	6120      	str	r0, [r4, #16]
 8017faa:	b15b      	cbz	r3, 8017fc4 <__smakebuf_r+0x74>
 8017fac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	f000 f86b 	bl	801808c <_isatty_r>
 8017fb6:	b128      	cbz	r0, 8017fc4 <__smakebuf_r+0x74>
 8017fb8:	89a3      	ldrh	r3, [r4, #12]
 8017fba:	f023 0303 	bic.w	r3, r3, #3
 8017fbe:	f043 0301 	orr.w	r3, r3, #1
 8017fc2:	81a3      	strh	r3, [r4, #12]
 8017fc4:	89a0      	ldrh	r0, [r4, #12]
 8017fc6:	4305      	orrs	r5, r0
 8017fc8:	81a5      	strh	r5, [r4, #12]
 8017fca:	e7cd      	b.n	8017f68 <__smakebuf_r+0x18>
 8017fcc:	080151a9 	.word	0x080151a9

08017fd0 <_malloc_usable_size_r>:
 8017fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fd4:	1f18      	subs	r0, r3, #4
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	bfbc      	itt	lt
 8017fda:	580b      	ldrlt	r3, [r1, r0]
 8017fdc:	18c0      	addlt	r0, r0, r3
 8017fde:	4770      	bx	lr

08017fe0 <_raise_r>:
 8017fe0:	291f      	cmp	r1, #31
 8017fe2:	b538      	push	{r3, r4, r5, lr}
 8017fe4:	4604      	mov	r4, r0
 8017fe6:	460d      	mov	r5, r1
 8017fe8:	d904      	bls.n	8017ff4 <_raise_r+0x14>
 8017fea:	2316      	movs	r3, #22
 8017fec:	6003      	str	r3, [r0, #0]
 8017fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ff2:	bd38      	pop	{r3, r4, r5, pc}
 8017ff4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017ff6:	b112      	cbz	r2, 8017ffe <_raise_r+0x1e>
 8017ff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ffc:	b94b      	cbnz	r3, 8018012 <_raise_r+0x32>
 8017ffe:	4620      	mov	r0, r4
 8018000:	f000 f830 	bl	8018064 <_getpid_r>
 8018004:	462a      	mov	r2, r5
 8018006:	4601      	mov	r1, r0
 8018008:	4620      	mov	r0, r4
 801800a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801800e:	f000 b817 	b.w	8018040 <_kill_r>
 8018012:	2b01      	cmp	r3, #1
 8018014:	d00a      	beq.n	801802c <_raise_r+0x4c>
 8018016:	1c59      	adds	r1, r3, #1
 8018018:	d103      	bne.n	8018022 <_raise_r+0x42>
 801801a:	2316      	movs	r3, #22
 801801c:	6003      	str	r3, [r0, #0]
 801801e:	2001      	movs	r0, #1
 8018020:	e7e7      	b.n	8017ff2 <_raise_r+0x12>
 8018022:	2400      	movs	r4, #0
 8018024:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018028:	4628      	mov	r0, r5
 801802a:	4798      	blx	r3
 801802c:	2000      	movs	r0, #0
 801802e:	e7e0      	b.n	8017ff2 <_raise_r+0x12>

08018030 <raise>:
 8018030:	4b02      	ldr	r3, [pc, #8]	; (801803c <raise+0xc>)
 8018032:	4601      	mov	r1, r0
 8018034:	6818      	ldr	r0, [r3, #0]
 8018036:	f7ff bfd3 	b.w	8017fe0 <_raise_r>
 801803a:	bf00      	nop
 801803c:	2000019c 	.word	0x2000019c

08018040 <_kill_r>:
 8018040:	b538      	push	{r3, r4, r5, lr}
 8018042:	4d07      	ldr	r5, [pc, #28]	; (8018060 <_kill_r+0x20>)
 8018044:	2300      	movs	r3, #0
 8018046:	4604      	mov	r4, r0
 8018048:	4608      	mov	r0, r1
 801804a:	4611      	mov	r1, r2
 801804c:	602b      	str	r3, [r5, #0]
 801804e:	f7ec fe6f 	bl	8004d30 <_kill>
 8018052:	1c43      	adds	r3, r0, #1
 8018054:	d102      	bne.n	801805c <_kill_r+0x1c>
 8018056:	682b      	ldr	r3, [r5, #0]
 8018058:	b103      	cbz	r3, 801805c <_kill_r+0x1c>
 801805a:	6023      	str	r3, [r4, #0]
 801805c:	bd38      	pop	{r3, r4, r5, pc}
 801805e:	bf00      	nop
 8018060:	20014ba0 	.word	0x20014ba0

08018064 <_getpid_r>:
 8018064:	f7ec be5c 	b.w	8004d20 <_getpid>

08018068 <_fstat_r>:
 8018068:	b538      	push	{r3, r4, r5, lr}
 801806a:	4d07      	ldr	r5, [pc, #28]	; (8018088 <_fstat_r+0x20>)
 801806c:	2300      	movs	r3, #0
 801806e:	4604      	mov	r4, r0
 8018070:	4608      	mov	r0, r1
 8018072:	4611      	mov	r1, r2
 8018074:	602b      	str	r3, [r5, #0]
 8018076:	f7ec feba 	bl	8004dee <_fstat>
 801807a:	1c43      	adds	r3, r0, #1
 801807c:	d102      	bne.n	8018084 <_fstat_r+0x1c>
 801807e:	682b      	ldr	r3, [r5, #0]
 8018080:	b103      	cbz	r3, 8018084 <_fstat_r+0x1c>
 8018082:	6023      	str	r3, [r4, #0]
 8018084:	bd38      	pop	{r3, r4, r5, pc}
 8018086:	bf00      	nop
 8018088:	20014ba0 	.word	0x20014ba0

0801808c <_isatty_r>:
 801808c:	b538      	push	{r3, r4, r5, lr}
 801808e:	4d06      	ldr	r5, [pc, #24]	; (80180a8 <_isatty_r+0x1c>)
 8018090:	2300      	movs	r3, #0
 8018092:	4604      	mov	r4, r0
 8018094:	4608      	mov	r0, r1
 8018096:	602b      	str	r3, [r5, #0]
 8018098:	f7ec feb9 	bl	8004e0e <_isatty>
 801809c:	1c43      	adds	r3, r0, #1
 801809e:	d102      	bne.n	80180a6 <_isatty_r+0x1a>
 80180a0:	682b      	ldr	r3, [r5, #0]
 80180a2:	b103      	cbz	r3, 80180a6 <_isatty_r+0x1a>
 80180a4:	6023      	str	r3, [r4, #0]
 80180a6:	bd38      	pop	{r3, r4, r5, pc}
 80180a8:	20014ba0 	.word	0x20014ba0

080180ac <_init>:
 80180ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180ae:	bf00      	nop
 80180b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180b2:	bc08      	pop	{r3}
 80180b4:	469e      	mov	lr, r3
 80180b6:	4770      	bx	lr

080180b8 <_fini>:
 80180b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180ba:	bf00      	nop
 80180bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180be:	bc08      	pop	{r3}
 80180c0:	469e      	mov	lr, r3
 80180c2:	4770      	bx	lr
